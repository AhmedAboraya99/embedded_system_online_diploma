
Sec2_ATMEGA32_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  0000050e  000005a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800072  00800072  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ade  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae5  00000000  00000000  00002236  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b7  00000000  00000000  00002d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  000036d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fd  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009b7  00000000  00000000  00004371  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004d28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 37       	cpi	r26, 0x7B	; 123
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  8a:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	#endif
	
	#ifdef FOUR_BIT_MODE
	SET_Pin(DataDir_LCD_PORT, 0xFF<<DATA_shift) ;
	#endif
	MCAL_DIO_WritePIN(LCD_CTRL ,RW_SWITCH, DIO_PIN_RESET);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	64 e0       	ldi	r22, 0x04	; 4
  96:	89 e3       	ldi	r24, 0x39	; 57
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>
  9e:	83 ed       	ldi	r24, 0xD3	; 211
  a0:	90 e3       	ldi	r25, 0x30	; 48
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_lcd_kick+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_lcd_kick+0x16>
  a8:	00 00       	nop
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	64 e0       	ldi	r22, 0x04	; 4
  ae:	89 e3       	ldi	r24, 0x39	; 57
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>
  b6:	08 95       	ret

000000b8 <LCD_DIO_INIT>:
  b8:	42 e0       	ldi	r20, 0x02	; 2
  ba:	64 e0       	ldi	r22, 0x04	; 4
  bc:	89 e3       	ldi	r24, 0x39	; 57
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 0b 02 	call	0x416	; 0x416 <MCAL_DIO_SET_Pin>
  c4:	42 e0       	ldi	r20, 0x02	; 2
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	89 e3       	ldi	r24, 0x39	; 57
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 0b 02 	call	0x416	; 0x416 <MCAL_DIO_SET_Pin>
  d0:	42 e0       	ldi	r20, 0x02	; 2
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	89 e3       	ldi	r24, 0x39	; 57
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 0b 02 	call	0x416	; 0x416 <MCAL_DIO_SET_Pin>
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	60 e1       	ldi	r22, 0x10	; 16
  e0:	89 e3       	ldi	r24, 0x39	; 57
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MCAL_PIN_Direction>
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	60 e2       	ldi	r22, 0x20	; 32
  ec:	89 e3       	ldi	r24, 0x39	; 57
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MCAL_PIN_Direction>
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	60 e4       	ldi	r22, 0x40	; 64
  f8:	89 e3       	ldi	r24, 0x39	; 57
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MCAL_PIN_Direction>
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	60 e8       	ldi	r22, 0x80	; 128
 104:	89 e3       	ldi	r24, 0x39	; 57
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MCAL_PIN_Direction>
 10c:	08 95       	ret

0000010e <LCD_WRITE_COMMAND>:

}


void LCD_WRITE_COMMAND(unsigned char command){
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
	#ifdef FOUR_BIT_MODE
		

		/* take 1st 4 bits of command */
		//LCD_PORT = ((LCD_PORT & 0x0F) | (command & 0xF0));
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) | (command & 0xF0));
 112:	6b b3       	in	r22, 0x1b	; 27
 114:	6f 70       	andi	r22, 0x0F	; 15
 116:	80 7f       	andi	r24, 0xF0	; 240
 118:	68 2b       	or	r22, r24
 11a:	89 e3       	ldi	r24, 0x39	; 57
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_DIO_WritePort>
		
		//turn RW&RS OFF for instruction write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_RESET);
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	62 e0       	ldi	r22, 0x02	; 2
 126:	89 e3       	ldi	r24, 0x39	; 57
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	89 e3       	ldi	r24, 0x39	; 57
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>
		
		LCD_lcd_kick();
 13a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		
		/*send 2nd 4 bits of command */
		//LCD_PORT= (LCD_PORT & 0x0F) | (command<<4);
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) |(command<<DATA_shift));
 13e:	6b b3       	in	r22, 0x1b	; 27
 140:	20 e1       	ldi	r18, 0x10	; 16
 142:	c2 9f       	mul	r28, r18
 144:	c0 01       	movw	r24, r0
 146:	11 24       	eor	r1, r1
 148:	6f 70       	andi	r22, 0x0F	; 15
 14a:	68 2b       	or	r22, r24
 14c:	89 e3       	ldi	r24, 0x39	; 57
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_DIO_WritePort>
		
		//turn RW&RS OFF for instruction write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_RESET);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	62 e0       	ldi	r22, 0x02	; 2
 158:	89 e3       	ldi	r24, 0x39	; 57
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	89 e3       	ldi	r24, 0x39	; 57
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>

		LCD_lcd_kick();
 16c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		
	#endif
}
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LCD_clear_screen>:

#include "lcd.h"


void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
 17a:	08 95       	ret

0000017c <LCD_GOTO_XY>:
	_delay_ms(50);
	MCAL_DIO_WritePIN(LCD_CTRL, EN_SWITCH, DIO_PIN_RESET);

}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	c8 2f       	mov	r28, r24
 182:	d6 2f       	mov	r29, r22
	if (line == 1)
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	31 f4       	brne	.+12     	; 0x194 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 188:	60 31       	cpi	r22, 0x10	; 16
 18a:	20 f4       	brcc	.+8      	; 0x194 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 18c:	80 e8       	ldi	r24, 0x80	; 128
 18e:	86 0f       	add	r24, r22
 190:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 194:	c2 30       	cpi	r28, 0x02	; 2
 196:	31 f4       	brne	.+12     	; 0x1a4 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 198:	d0 31       	cpi	r29, 0x10	; 16
 19a:	20 f4       	brcc	.+8      	; 0x1a4 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 19c:	80 ec       	ldi	r24, 0xC0	; 192
 19e:	8d 0f       	add	r24, r29
 1a0:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
		}
	}
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	87 e8       	ldi	r24, 0x87	; 135
 1ac:	93 e1       	ldi	r25, 0x13	; 19
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <LCD_INIT+0x4>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <LCD_INIT+0xa>
 1b4:	00 00       	nop
}

void LCD_INIT(){

	_delay_ms(20);
	LCD_DIO_INIT();
 1b6:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_DIO_INIT>
 1ba:	85 ea       	ldi	r24, 0xA5	; 165
 1bc:	9e e0       	ldi	r25, 0x0E	; 14
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_INIT+0x14>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_INIT+0x1a>
 1c4:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 1c6:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_RETURN_HOME);		/* send for 4-bit initialization of LCD  */
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);              /* 2 line, 5*7 matrix in 4-bit mode */
 1d0:	88 e2       	ldi	r24, 0x28	; 40
 1d2:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
	#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 1dc:	80 e8       	ldi	r24, 0x80	; 128
 1de:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 1e2:	8f e0       	ldi	r24, 0x0F	; 15
 1e4:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_WRITE_COMMAND>
 1e8:	08 95       	ret

000001ea <LCD_WRITE_CHAR>:

		LCD_lcd_kick();
		
	#endif
}
void LCD_WRITE_CHAR(unsigned char character){
 1ea:	cf 93       	push	r28
 1ec:	c8 2f       	mov	r28, r24
		_delay_ms(1);
		LCD_lcd_kick();	
	#endif
	#ifdef FOUR_BIT_MODE
		//turn RS ON & RW OFF for Data write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_SET);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	62 e0       	ldi	r22, 0x02	; 2
 1f2:	89 e3       	ldi	r24, 0x39	; 57
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	89 e3       	ldi	r24, 0x39	; 57
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>

		
		//LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) | (character & 0xF0));
 206:	6b b3       	in	r22, 0x1b	; 27
 208:	6f 70       	andi	r22, 0x0F	; 15
 20a:	8c 2f       	mov	r24, r28
 20c:	80 7f       	andi	r24, 0xF0	; 240
 20e:	68 2b       	or	r22, r24
 210:	89 e3       	ldi	r24, 0x39	; 57
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_DIO_WritePort>
		
		LCD_lcd_kick();
 218:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>

		//LCD_PORT = (LCD_PORT & 0x0F) | (character<<4);
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) | (character<<DATA_shift));
 21c:	6b b3       	in	r22, 0x1b	; 27
 21e:	20 e1       	ldi	r18, 0x10	; 16
 220:	c2 9f       	mul	r28, r18
 222:	c0 01       	movw	r24, r0
 224:	11 24       	eor	r1, r1
 226:	6f 70       	andi	r22, 0x0F	; 15
 228:	68 2b       	or	r22, r24
 22a:	89 e3       	ldi	r24, 0x39	; 57
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 4d 02 	call	0x49a	; 0x49a <MCAL_DIO_WritePort>
		//turn RS ON & RW OFF for Data write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_SET);
 232:	41 e0       	ldi	r20, 0x01	; 1
 234:	62 e0       	ldi	r22, 0x02	; 2
 236:	89 e3       	ldi	r24, 0x39	; 57
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	89 e3       	ldi	r24, 0x39	; 57
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 41 02 	call	0x482	; 0x482 <MCAL_DIO_WritePIN>

		LCD_lcd_kick();
 24a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
}
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(char* string){
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	8c 01       	movw	r16, r24
	int count = 0;
 25c:	c0 e0       	ldi	r28, 0x00	; 0
 25e:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 260:	18 c0       	rjmp	.+48     	; 0x292 <LCD_WRITE_STRING+0x40>
		count++;
 262:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 264:	0f 5f       	subi	r16, 0xFF	; 255
 266:	1f 4f       	sbci	r17, 0xFF	; 255
 268:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LCD_WRITE_CHAR>
		if (count == 16)
 26c:	c0 31       	cpi	r28, 0x10	; 16
 26e:	d1 05       	cpc	r29, r1
 270:	29 f4       	brne	.+10     	; 0x27c <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_GOTO_XY>
 27a:	0b c0       	rjmp	.+22     	; 0x292 <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 27c:	c0 32       	cpi	r28, 0x20	; 32
 27e:	d1 05       	cpc	r29, r1
 280:	41 f4       	brne	.+16     	; 0x292 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 282:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_GOTO_XY>
			count = 0;
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	d0 e0       	ldi	r29, 0x00	; 0
}


void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 292:	f8 01       	movw	r30, r16
 294:	80 81       	ld	r24, Z
 296:	81 11       	cpse	r24, r1
 298:	e4 cf       	rjmp	.-56     	; 0x262 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	0f 91       	pop	r16
 2a2:	08 95       	ret

000002a4 <ADC_GetTemprature>:
/* ======================= Global Functions ====================== */
/* ================================================================ */
uint8_t ADC_GetTemprature(uint16_t ADCVal)
{
	uint8_t TempVal = 0 ;
	TempVal = ADCVal/(LM35_REFVOLT/1024);
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	96 95       	lsr	r25
 2aa:	87 95       	ror	r24
	return TempVal;
}
 2ac:	08 95       	ret

000002ae <main>:
/* ================================================================ */
/* ======================= Main Function ========================== */
/* ================================================================ */

int main(void)
{
 2ae:	cf 93       	push	r28
 2b0:	df 93       	push	r29
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	63 97       	sbiw	r28, 0x13	; 19
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61

	uint16_t ADC_ReadVal;
	uint8_t	TempSensorVal;
	char TempString[10];
	ADC_Config_t ADC_Cfg = {ADC_FREE_RUNNING_MODE, ADC_PRESCALER_64, ADC_INTERNAL_256V, ADC_FREE_TRIGGERING, ADC_IRQ_ENABLE};
 2c2:	ce 01       	movw	r24, r28
 2c4:	0b 96       	adiw	r24, 0x0b	; 11
 2c6:	29 e0       	ldi	r18, 0x09	; 9
 2c8:	fc 01       	movw	r30, r24
 2ca:	11 92       	st	Z+, r1
 2cc:	2a 95       	dec	r18
 2ce:	e9 f7       	brne	.-6      	; 0x2ca <main+0x1c>
 2d0:	20 e6       	ldi	r18, 0x60	; 96
 2d2:	2b 87       	std	Y+11, r18	; 0x0b
 2d4:	26 e0       	ldi	r18, 0x06	; 6
 2d6:	2c 87       	std	Y+12, r18	; 0x0c
 2d8:	20 ec       	ldi	r18, 0xC0	; 192
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	3e 87       	std	Y+14, r19	; 0x0e
 2de:	2d 87       	std	Y+13, r18	; 0x0d
 2e0:	2f e1       	ldi	r18, 0x1F	; 31
 2e2:	3f ef       	ldi	r19, 0xFF	; 255
 2e4:	38 8b       	std	Y+16, r19	; 0x10
 2e6:	2f 87       	std	Y+15, r18	; 0x0f
 2e8:	28 e0       	ldi	r18, 0x08	; 8
 2ea:	29 8b       	std	Y+17, r18	; 0x11
	MCAL_ADC_Init(&ADC_Cfg);
 2ec:	0e 94 9b 01 	call	0x336	; 0x336 <MCAL_ADC_Init>
	
	LCD_INIT();			/* Initialization of LCD */
 2f0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_INIT>
	LCD_GOTO_XY(1,0);	/* LCD16x2 cursor position */
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_GOTO_XY>
	
	LCD_WRITE_STRING("Temperature =");	/* Write string on 1st line of LCD */
 2fc:	80 e6       	ldi	r24, 0x60	; 96
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 29 01 	call	0x252	; 0x252 <LCD_WRITE_STRING>

	while(1){
			
			
			ADC_ReadVal=MCAL_ADC_Read(ADC_CHANNEL3);	/* Read ADC channel 7 */
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	0e 94 da 01 	call	0x3b4	; 0x3b4 <MCAL_ADC_Read>
			TempSensorVal = ADC_GetTemprature(ADC_ReadVal);
 30a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <ADC_GetTemprature>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 30e:	4a e0       	ldi	r20, 0x0A	; 10
 310:	be 01       	movw	r22, r28
 312:	6f 5f       	subi	r22, 0xFF	; 255
 314:	7f 4f       	sbci	r23, 0xFF	; 255
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__itoa_ncheck>
			itoa(TempSensorVal,TempString,10);	/* Integer to string conversion */
			LCD_GOTO_XY(2,0);	/* LCD16x2 cursor position */
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	82 e0       	ldi	r24, 0x02	; 2
 320:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_GOTO_XY>
			LCD_WRITE_STRING(TempString);
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 29 01 	call	0x252	; 0x252 <LCD_WRITE_STRING>
			
			LCD_WRITE_STRING(" C");
 32c:	8e e6       	ldi	r24, 0x6E	; 110
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 29 01 	call	0x252	; 0x252 <LCD_WRITE_STRING>
 334:	e7 cf       	rjmp	.-50     	; 0x304 <main+0x56>

00000336 <MCAL_ADC_Init>:
		SET_Bitfield(ADC->ADCSRA.bits.ADEN);
}

void MCAL_ADC_DeInit(void){
	RESET_Port(ADCSRA_Reg);
	RESET_Config(SFIOR, ADC_FREE_TRIGGERING);
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	ec 01       	movw	r28, r24
 33c:	89 e0       	ldi	r24, 0x09	; 9
 33e:	fe 01       	movw	r30, r28
 340:	a2 e7       	ldi	r26, 0x72	; 114
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	01 90       	ld	r0, Z+
 346:	0d 92       	st	X+, r0
 348:	8a 95       	dec	r24
 34a:	e1 f7       	brne	.-8      	; 0x344 <MCAL_ADC_Init+0xe>
 34c:	98 81       	ld	r25, Y
 34e:	9f 39       	cpi	r25, 0x9F	; 159
 350:	69 f0       	breq	.+26     	; 0x36c <MCAL_ADC_Init+0x36>
 352:	91 32       	cpi	r25, 0x21	; 33
 354:	64 f0       	brlt	.+24     	; 0x36e <MCAL_ADC_Init+0x38>
 356:	80 b7       	in	r24, 0x30	; 48
 358:	8f 71       	andi	r24, 0x1F	; 31
 35a:	80 bf       	out	0x30, r24	; 48
 35c:	88 81       	ld	r24, Y
 35e:	80 36       	cpi	r24, 0x60	; 96
 360:	31 f0       	breq	.+12     	; 0x36e <MCAL_ADC_Init+0x38>
 362:	20 b7       	in	r18, 0x30	; 48
 364:	8c 81       	ldd	r24, Y+4	; 0x04
 366:	82 2b       	or	r24, r18
 368:	80 bf       	out	0x30, r24	; 48
 36a:	01 c0       	rjmp	.+2      	; 0x36e <MCAL_ADC_Init+0x38>
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	87 b1       	in	r24, 0x07	; 7
 370:	87 b9       	out	0x07, r24	; 7
 372:	2a 81       	ldd	r18, Y+2	; 0x02
 374:	3b 81       	ldd	r19, Y+3	; 0x03
 376:	2f 3f       	cpi	r18, 0xFF	; 255
 378:	8f ef       	ldi	r24, 0xFF	; 255
 37a:	38 07       	cpc	r19, r24
 37c:	19 f0       	breq	.+6      	; 0x384 <MCAL_ADC_Init+0x4e>
 37e:	87 b1       	in	r24, 0x07	; 7
 380:	28 2b       	or	r18, r24
 382:	27 b9       	out	0x07, r18	; 7
 384:	98 7f       	andi	r25, 0xF8	; 248
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	88 3f       	cpi	r24, 0xF8	; 248
 38a:	09 f0       	breq	.+2      	; 0x38e <MCAL_ADC_Init+0x58>
 38c:	98 2b       	or	r25, r24
 38e:	8e 81       	ldd	r24, Y+6	; 0x06
 390:	87 3f       	cpi	r24, 0xF7	; 247
 392:	29 f0       	breq	.+10     	; 0x39e <MCAL_ADC_Init+0x68>
 394:	8f b7       	in	r24, 0x3f	; 63
 396:	80 68       	ori	r24, 0x80	; 128
 398:	8f bf       	out	0x3f, r24	; 63
 39a:	98 60       	ori	r25, 0x08	; 8
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <MCAL_ADC_Init+0x70>
 39e:	8f b7       	in	r24, 0x3f	; 63
 3a0:	8f 77       	andi	r24, 0x7F	; 127
 3a2:	8f bf       	out	0x3f, r24	; 63
 3a4:	97 7f       	andi	r25, 0xF7	; 247
 3a6:	96 b9       	out	0x06, r25	; 6
 3a8:	86 b1       	in	r24, 0x06	; 6
 3aa:	80 68       	ori	r24, 0x80	; 128
 3ac:	86 b9       	out	0x06, r24	; 6
 3ae:	df 91       	pop	r29
 3b0:	cf 91       	pop	r28
 3b2:	08 95       	ret

000003b4 <MCAL_ADC_Read>:

uint16_t MCAL_ADC_Read(ADC_Channels_t Read_Channel){
	uint16_t ADCVal = 0;
	
	/* Select ADC Channel */
	SET_Config(ADMUX_Reg, Read_Channel);
 3b4:	97 b1       	in	r25, 0x07	; 7
 3b6:	89 2b       	or	r24, r25
 3b8:	87 b9       	out	0x07, r24	; 7
	/* Enable Interrupt for Continuous Conversion */
	if (G_ADC_Config.ADC_Mode != ADC_SINGLE_CONVERSION_MODE)
 3ba:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end>
 3be:	80 32       	cpi	r24, 0x20	; 32
 3c0:	19 f0       	breq	.+6      	; 0x3c8 <MCAL_ADC_Read+0x14>
	{
		SET_Bitfield(ADC->ADCSRA.bits.ADIE);
 3c2:	86 b1       	in	r24, 0x06	; 6
 3c4:	88 60       	ori	r24, 0x08	; 8
 3c6:	86 b9       	out	0x06, r24	; 6
	}
	/* Start Conversion */	
	SET_Bitfield(ADC->ADCSRA.bits.ADSC);
 3c8:	86 b1       	in	r24, 0x06	; 6
 3ca:	80 64       	ori	r24, 0x40	; 64
 3cc:	86 b9       	out	0x06, r24	; 6

	
	while(!ADC->ADCSRA.bits.ADIF);
 3ce:	34 9b       	sbis	0x06, 4	; 6
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <MCAL_ADC_Read+0x1a>

	ADCVal = (ADC->ADCL) | (ADC->ADCH<<8);
 3d2:	24 b1       	in	r18, 0x04	; 4
 3d4:	85 b1       	in	r24, 0x05	; 5
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	98 2f       	mov	r25, r24
 3da:	88 27       	eor	r24, r24
	return ADCVal;
}
 3dc:	82 2b       	or	r24, r18
 3de:	08 95       	ret

000003e0 <__vector_16>:


/* ADC Conversion Complete ISR */

void __vector_16 (void) __attribute__((signal));
void __vector_16 (void){
 3e0:	1f 92       	push	r1
 3e2:	0f 92       	push	r0
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	0f 92       	push	r0
 3e8:	11 24       	eor	r1, r1
 3ea:	8f 93       	push	r24
	
	RESET_Bitfield(ADC->ADCSRA.bits.ADIE);
 3ec:	86 b1       	in	r24, 0x06	; 6
 3ee:	87 7f       	andi	r24, 0xF7	; 247
 3f0:	86 b9       	out	0x06, r24	; 6
	
 3f2:	8f 91       	pop	r24
 3f4:	0f 90       	pop	r0
 3f6:	0f be       	out	0x3f, r0	; 63
 3f8:	0f 90       	pop	r0
 3fa:	1f 90       	pop	r1
 3fc:	18 95       	reti

000003fe <MCAL_PIN_Direction>:
uint8_t MCAL_DIO_ReadPort (DIO_TypeDef* DIOx ){

	uint16_t PortVal;
		PortVal = (uint16_t) DIOx -> PINx;
		return PortVal ;
}
 3fe:	fc 01       	movw	r30, r24
 400:	41 30       	cpi	r20, 0x01	; 1
 402:	21 f4       	brne	.+8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 404:	81 81       	ldd	r24, Z+1	; 0x01
 406:	68 2b       	or	r22, r24
 408:	61 83       	std	Z+1, r22	; 0x01
 40a:	08 95       	ret
 40c:	91 81       	ldd	r25, Z+1	; 0x01
 40e:	60 95       	com	r22
 410:	69 23       	and	r22, r25
 412:	61 83       	std	Z+1, r22	; 0x01
 414:	08 95       	ret

00000416 <MCAL_DIO_SET_Pin>:
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	8c 01       	movw	r16, r24
 420:	d6 2f       	mov	r29, r22
 422:	c4 2f       	mov	r28, r20
 424:	8e ef       	ldi	r24, 0xFE	; 254
 426:	84 0f       	add	r24, r20
 428:	82 30       	cpi	r24, 0x02	; 2
 42a:	88 f4       	brcc	.+34     	; 0x44e <MCAL_DIO_SET_Pin+0x38>
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	c8 01       	movw	r24, r16
 430:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MCAL_PIN_Direction>
 434:	c3 30       	cpi	r28, 0x03	; 3
 436:	29 f4       	brne	.+10     	; 0x442 <MCAL_DIO_SET_Pin+0x2c>
 438:	f8 01       	movw	r30, r16
 43a:	82 81       	ldd	r24, Z+2	; 0x02
 43c:	d8 2b       	or	r29, r24
 43e:	d2 83       	std	Z+2, r29	; 0x02
 440:	1b c0       	rjmp	.+54     	; 0x478 <MCAL_DIO_SET_Pin+0x62>
 442:	f8 01       	movw	r30, r16
 444:	82 81       	ldd	r24, Z+2	; 0x02
 446:	d0 95       	com	r29
 448:	d8 23       	and	r29, r24
 44a:	d2 83       	std	Z+2, r29	; 0x02
 44c:	15 c0       	rjmp	.+42     	; 0x478 <MCAL_DIO_SET_Pin+0x62>
 44e:	42 30       	cpi	r20, 0x02	; 2
 450:	98 f4       	brcc	.+38     	; 0x478 <MCAL_DIO_SET_Pin+0x62>
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	c8 01       	movw	r24, r16
 456:	0e 94 ff 01 	call	0x3fe	; 0x3fe <MCAL_PIN_Direction>
 45a:	c1 11       	cpse	r28, r1
 45c:	06 c0       	rjmp	.+12     	; 0x46a <MCAL_DIO_SET_Pin+0x54>
 45e:	f8 01       	movw	r30, r16
 460:	82 81       	ldd	r24, Z+2	; 0x02
 462:	d0 95       	com	r29
 464:	d8 23       	and	r29, r24
 466:	d2 83       	std	Z+2, r29	; 0x02
 468:	07 c0       	rjmp	.+14     	; 0x478 <MCAL_DIO_SET_Pin+0x62>
 46a:	f8 01       	movw	r30, r16
 46c:	82 81       	ldd	r24, Z+2	; 0x02
 46e:	d8 2b       	or	r29, r24
 470:	d2 83       	std	Z+2, r29	; 0x02
 472:	80 b7       	in	r24, 0x30	; 48
 474:	8b 7f       	andi	r24, 0xFB	; 251
 476:	80 bf       	out	0x30, r24	; 48
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <MCAL_DIO_WritePIN>:
 * @param [in]	-PinNumber : Specific Pin number to be Write on according to @ref DIO_PINS_Define
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_DIO_WritePIN (DIO_TypeDef* DIOx ,uint8_t PIN_Number,uint8_t value ){
 482:	fc 01       	movw	r30, r24

	if (value == DIO_PIN_SET )
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	21 f4       	brne	.+8      	; 0x490 <MCAL_DIO_WritePIN+0xe>
		{
		//Port bit set/reset register (PORTx_BRR)
		//BRy: Port x Reset bit y (y= 0 ... 15)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		SET_Pin( DIOx->PORTx , PIN_Number) ;
 488:	82 81       	ldd	r24, Z+2	; 0x02
 48a:	68 2b       	or	r22, r24
 48c:	62 83       	std	Z+2, r22	; 0x02
 48e:	08 95       	ret
	else
		// Port bit set/reset register (PORTx_BSRR)
		// BSy: Port x Reset bit y (y= 0 ... 15)
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
		RESET_Pin(DIOx->PORTx, PIN_Number) ;
 490:	92 81       	ldd	r25, Z+2	; 0x02
 492:	60 95       	com	r22
 494:	69 23       	and	r22, r25
 496:	62 83       	std	Z+2, r22	; 0x02
 498:	08 95       	ret

0000049a <MCAL_DIO_WritePort>:
 * Note 		-None
 */

void MCAL_DIO_WritePort (DIO_TypeDef* DIOx, uint8_t value ){

	DIOx->PORTx = (uint8_t) value;
 49a:	fc 01       	movw	r30, r24
 49c:	62 83       	std	Z+2, r22	; 0x02
 49e:	08 95       	ret

000004a0 <__itoa_ncheck>:
 4a0:	bb 27       	eor	r27, r27
 4a2:	4a 30       	cpi	r20, 0x0A	; 10
 4a4:	31 f4       	brne	.+12     	; 0x4b2 <__itoa_ncheck+0x12>
 4a6:	99 23       	and	r25, r25
 4a8:	22 f4       	brpl	.+8      	; 0x4b2 <__itoa_ncheck+0x12>
 4aa:	bd e2       	ldi	r27, 0x2D	; 45
 4ac:	90 95       	com	r25
 4ae:	81 95       	neg	r24
 4b0:	9f 4f       	sbci	r25, 0xFF	; 255
 4b2:	0c 94 5c 02 	jmp	0x4b8	; 0x4b8 <__utoa_common>

000004b6 <__utoa_ncheck>:
 4b6:	bb 27       	eor	r27, r27

000004b8 <__utoa_common>:
 4b8:	fb 01       	movw	r30, r22
 4ba:	55 27       	eor	r21, r21
 4bc:	aa 27       	eor	r26, r26
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	aa 1f       	adc	r26, r26
 4c4:	a4 17       	cp	r26, r20
 4c6:	10 f0       	brcs	.+4      	; 0x4cc <__utoa_common+0x14>
 4c8:	a4 1b       	sub	r26, r20
 4ca:	83 95       	inc	r24
 4cc:	50 51       	subi	r21, 0x10	; 16
 4ce:	b9 f7       	brne	.-18     	; 0x4be <__utoa_common+0x6>
 4d0:	a0 5d       	subi	r26, 0xD0	; 208
 4d2:	aa 33       	cpi	r26, 0x3A	; 58
 4d4:	08 f0       	brcs	.+2      	; 0x4d8 <__utoa_common+0x20>
 4d6:	a9 5d       	subi	r26, 0xD9	; 217
 4d8:	a1 93       	st	Z+, r26
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	79 f7       	brne	.-34     	; 0x4bc <__utoa_common+0x4>
 4de:	b1 11       	cpse	r27, r1
 4e0:	b1 93       	st	Z+, r27
 4e2:	11 92       	st	Z+, r1
 4e4:	cb 01       	movw	r24, r22
 4e6:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <strrev>

000004ea <strrev>:
 4ea:	dc 01       	movw	r26, r24
 4ec:	fc 01       	movw	r30, r24
 4ee:	67 2f       	mov	r22, r23
 4f0:	71 91       	ld	r23, Z+
 4f2:	77 23       	and	r23, r23
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <strrev+0x4>
 4f6:	32 97       	sbiw	r30, 0x02	; 2
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <strrev+0x18>
 4fa:	7c 91       	ld	r23, X
 4fc:	6d 93       	st	X+, r22
 4fe:	70 83       	st	Z, r23
 500:	62 91       	ld	r22, -Z
 502:	ae 17       	cp	r26, r30
 504:	bf 07       	cpc	r27, r31
 506:	c8 f3       	brcs	.-14     	; 0x4fa <strrev+0x10>
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
