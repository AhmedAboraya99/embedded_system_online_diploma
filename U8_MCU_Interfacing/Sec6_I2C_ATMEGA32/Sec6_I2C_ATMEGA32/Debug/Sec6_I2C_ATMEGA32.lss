
Sec6_I2C_ATMEGA32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f4  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066b  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000042d  00000000  00000000  0000114b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  000019e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001af3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 86 00 	call	0x10c	; 0x10c <main>
  7a:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Init>:
 *  Author: Ahmed Aboraya
 */ 
#include "I2C.h"
uint8_t PrescalerValue = 1; //1 4 16 64

void I2C_Init(unsigned long SCL_Clock){
  82:	9b 01       	movw	r18, r22
  84:	ac 01       	movw	r20, r24
	TWBR =  ((F_CPU/SCL_Clock)-16) / (2*PrescalerValue);
  86:	60 e4       	ldi	r22, 0x40	; 64
  88:	72 e4       	ldi	r23, 0x42	; 66
  8a:	8f e0       	ldi	r24, 0x0F	; 15
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 ac 00 	call	0x158	; 0x158 <__udivmodsi4>
  92:	ca 01       	movw	r24, r20
  94:	b9 01       	movw	r22, r18
  96:	60 51       	subi	r22, 0x10	; 16
  98:	71 09       	sbc	r23, r1
  9a:	81 09       	sbc	r24, r1
  9c:	91 09       	sbc	r25, r1
  9e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	03 2e       	mov	r0, r19
  aa:	00 0c       	add	r0, r0
  ac:	44 0b       	sbc	r20, r20
  ae:	55 0b       	sbc	r21, r21
  b0:	0e 94 ac 00 	call	0x158	; 0x158 <__udivmodsi4>
  b4:	20 b9       	out	0x00, r18	; 0
	switch(PrescalerValue){
  b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	59 f0       	breq	.+22     	; 0xd4 <I2C_Init+0x52>
  be:	18 f4       	brcc	.+6      	; 0xc6 <I2C_Init+0x44>
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	31 f0       	breq	.+12     	; 0xd0 <I2C_Init+0x4e>
  c4:	08 95       	ret
  c6:	80 31       	cpi	r24, 0x10	; 16
  c8:	41 f0       	breq	.+16     	; 0xda <I2C_Init+0x58>
  ca:	80 34       	cpi	r24, 0x40	; 64
  cc:	49 f0       	breq	.+18     	; 0xe0 <I2C_Init+0x5e>
  ce:	08 95       	ret
		case 1:
			TWSR = 0;
  d0:	11 b8       	out	0x01, r1	; 1
			break;
  d2:	08 95       	ret
		case 4:
			TWSR = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	81 b9       	out	0x01, r24	; 1
			break;
  d8:	08 95       	ret
		case 16:
			TWSR = 2;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	81 b9       	out	0x01, r24	; 1
			break;	
  de:	08 95       	ret
		case 64:
			TWSR = 3;
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	81 b9       	out	0x01, r24	; 1
  e4:	08 95       	ret

000000e6 <I2C_Start>:
			break;			
		
	}
}
void I2C_Start(){
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);		/* Send START condition */
  e6:	84 ea       	ldi	r24, 0xA4	; 164
  e8:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));					/* Wait for TWINT Flag set.
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <I2C_Start+0x4>
												 This indicates that the START condition has been transmitted. */
	while(TWSR != 0x08);						/* Status code is set after Start condition has been transmitted */
  f0:	81 b1       	in	r24, 0x01	; 1
  f2:	88 30       	cpi	r24, 0x08	; 8
  f4:	e9 f7       	brne	.-6      	; 0xf0 <I2C_Start+0xa>
}
  f6:	08 95       	ret

000000f8 <I2C_Write>:
void I2C_Write(unsigned char DATA){
	TWDR = DATA;		/* Load DATA into TWDR Register. */
  f8:	83 b9       	out	0x03, r24	; 3
	
	TWCR = (1<<TWINT)|(1<<TWEN);	/*  Clear TWINT bit in TWCR to start transmission of data */
  fa:	84 e8       	ldi	r24, 0x84	; 132
  fc:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));			//Wait for TWINT Flag set.
  fe:	06 b6       	in	r0, 0x36	; 54
 100:	07 fe       	sbrs	r0, 7
 102:	fd cf       	rjmp	.-6      	; 0xfe <I2C_Write+0x6>
	/* This indicates that the DATA has been transmitted, and ACK/NACK has been received */

}
 104:	08 95       	ret

00000106 <I2C_Stop>:
void I2C_Stop(){
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 106:	84 e9       	ldi	r24, 0x94	; 148
 108:	86 bf       	out	0x36, r24	; 54
 10a:	08 95       	ret

0000010c <main>:

int main(void)
{	
	#ifdef MCU_AS_MASTER
	unsigned int buffer = 0;
	I2C_Init(0x48);
 10c:	68 e4       	ldi	r22, 0x48	; 72
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Init>
//#define MCU_AS_SLAVE

int main(void)
{	
	#ifdef MCU_AS_MASTER
	unsigned int buffer = 0;
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d0 e0       	ldi	r29, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f e7       	ldi	r18, 0x7F	; 127
 11e:	8a e1       	ldi	r24, 0x1A	; 26
 120:	96 e0       	ldi	r25, 0x06	; 6
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x16>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x20>
 12c:	00 00       	nop
	
    while (1) 
    {
		#ifdef MCU_AS_MASTER
		_delay_ms(2000);
		I2C_Start();
 12e:	0e 94 73 00 	call	0xe6	; 0xe6 <I2C_Start>
		I2C_Write(0b11010000+0);		/* Application loads SLA+W (slave address+write command) into TWDR*/
 132:	80 ed       	ldi	r24, 0xD0	; 208
 134:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
		while(TWSR != 0x18)	;			/*Check TWSR to see if SLA+W was sent and ACK received*/
 138:	81 b1       	in	r24, 0x01	; 1
 13a:	88 31       	cpi	r24, 0x18	; 24
 13c:	e9 f7       	brne	.-6      	; 0x138 <main+0x2c>
		I2C_Write(buffer++);			//transmit data
 13e:	8e 01       	movw	r16, r28
 140:	0f 5f       	subi	r16, 0xFF	; 255
 142:	1f 4f       	sbci	r17, 0xFF	; 255
 144:	8c 2f       	mov	r24, r28
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <I2C_Write>
		while(TWSR != 0x28)	;			/*Data byte has been transmitted ACK has been received*/
 14a:	81 b1       	in	r24, 0x01	; 1
 14c:	88 32       	cpi	r24, 0x28	; 40
 14e:	e9 f7       	brne	.-6      	; 0x14a <main+0x3e>
		I2C_Stop();
 150:	0e 94 83 00 	call	0x106	; 0x106 <I2C_Stop>
		#ifdef MCU_AS_MASTER
		_delay_ms(2000);
		I2C_Start();
		I2C_Write(0b11010000+0);		/* Application loads SLA+W (slave address+write command) into TWDR*/
		while(TWSR != 0x18)	;			/*Check TWSR to see if SLA+W was sent and ACK received*/
		I2C_Write(buffer++);			//transmit data
 154:	e8 01       	movw	r28, r16
		#endif
		
		#ifdef MCU_AS_SLAVE
		PORTA = I2C_Read(1);
		#endif
    }
 156:	e2 cf       	rjmp	.-60     	; 0x11c <main+0x10>

00000158 <__udivmodsi4>:
 158:	a1 e2       	ldi	r26, 0x21	; 33
 15a:	1a 2e       	mov	r1, r26
 15c:	aa 1b       	sub	r26, r26
 15e:	bb 1b       	sub	r27, r27
 160:	fd 01       	movw	r30, r26
 162:	0d c0       	rjmp	.+26     	; 0x17e <__udivmodsi4_ep>

00000164 <__udivmodsi4_loop>:
 164:	aa 1f       	adc	r26, r26
 166:	bb 1f       	adc	r27, r27
 168:	ee 1f       	adc	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	a2 17       	cp	r26, r18
 16e:	b3 07       	cpc	r27, r19
 170:	e4 07       	cpc	r30, r20
 172:	f5 07       	cpc	r31, r21
 174:	20 f0       	brcs	.+8      	; 0x17e <__udivmodsi4_ep>
 176:	a2 1b       	sub	r26, r18
 178:	b3 0b       	sbc	r27, r19
 17a:	e4 0b       	sbc	r30, r20
 17c:	f5 0b       	sbc	r31, r21

0000017e <__udivmodsi4_ep>:
 17e:	66 1f       	adc	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	88 1f       	adc	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	1a 94       	dec	r1
 188:	69 f7       	brne	.-38     	; 0x164 <__udivmodsi4_loop>
 18a:	60 95       	com	r22
 18c:	70 95       	com	r23
 18e:	80 95       	com	r24
 190:	90 95       	com	r25
 192:	9b 01       	movw	r18, r22
 194:	ac 01       	movw	r20, r24
 196:	bd 01       	movw	r22, r26
 198:	cf 01       	movw	r24, r30
 19a:	08 95       	ret

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
