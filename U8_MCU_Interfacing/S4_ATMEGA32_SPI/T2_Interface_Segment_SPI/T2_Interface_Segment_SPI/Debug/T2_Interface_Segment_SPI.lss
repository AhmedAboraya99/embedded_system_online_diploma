
T2_Interface_Segment_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000142  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000964  00000000  00000000  000001a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005e4  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000298  00000000  00000000  000010e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00001384  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000196  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000bd  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000161b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000000ea  000000ea  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000163c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.SPI_MasterInit 00000014  000000d6  000000d6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.MAX7221_PacketTransmit 0000001a  000000bc  000000bc  00000110  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    00000050  0000006c  0000006c  000000c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   8:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  10:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  14:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  18:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  1c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  20:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  24:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  28:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  2c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  30:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  34:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  38:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  3c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  40:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  44:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  48:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  4c:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>
  50:	0c 94 75 00 	jmp	0xea	; 0xea <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000ea <__bad_interrupt>:
  ea:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.SPI_MasterInit:

000000d6 <SPI_MasterInit>:
#define DDR_SPI		DDRB
#define SPI_PORT	PORTB

void SPI_MasterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1<<MOSI) | (1<<SS) |(1<<SCK);
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	80 6b       	ori	r24, 0xB0	; 176
  da:	87 bb       	out	0x17, r24	; 23
	DDR_SPI &= ~(1<<MISO) ;
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master mode and set clock rate as fck/16
	SPCR |= (1<<SPE) | (1<<MSTR) | (1<<SPR0) ;
  e2:	8d b1       	in	r24, 0x0d	; 13
  e4:	81 65       	ori	r24, 0x51	; 81
  e6:	8d b9       	out	0x0d, r24	; 13
  e8:	08 95       	ret

Disassembly of section .text.MAX7221_PacketTransmit:

000000bc <MAX7221_PacketTransmit>:

}
void MAX7221_PacketTransmit(char sCommand, char sData){
	// initialize the packet by writing 0 on SS "SS must be low to clock data in or out"
	SPI_PORT &= ~( 1 << SS); 
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	9f 7e       	andi	r25, 0xEF	; 239
  c0:	98 bb       	out	0x18, r25	; 24
	//write command on MAX7221
	SPDR = sCommand ;
  c2:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(! (SPSR&(1<<SPIF)) );
  c4:	77 9b       	sbis	0x0e, 7	; 14
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <MAX7221_PacketTransmit+0x8>
	/* Start transmission */
	SPDR = sData ;
  c8:	6f b9       	out	0x0f, r22	; 15
	/* Wait for transmission complete */
	while(! (SPSR&(1<<SPIF)) );
  ca:	77 9b       	sbis	0x0e, 7	; 14
  cc:	fe cf       	rjmp	.-4      	; 0xca <MAX7221_PacketTransmit+0xe>
	 //  terminate the packet by writing 1 on SS "SS must be HIGH after clock data in or out"
	SPI_PORT |= ( 1 << SS);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
}
int main(void)
{
	char NumData ;
	char Counter = 0;
	SPI_MasterInit();
  6c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_MasterInit>
	
	MAX7221_PacketTransmit(0x09, 0xFF); // set decoding mode
  70:	6f ef       	ldi	r22, 0xFF	; 255
  72:	89 e0       	ldi	r24, 0x09	; 9
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <MAX7221_PacketTransmit>
	MAX7221_PacketTransmit(0x0A, 0x0F); // set scan limit
  78:	6f e0       	ldi	r22, 0x0F	; 15
  7a:	8a e0       	ldi	r24, 0x0A	; 10
  7c:	0e 94 5e 00 	call	0xbc	; 0xbc <MAX7221_PacketTransmit>
	MAX7221_PacketTransmit(0x0B, 0x7F); // Max intensity
  80:	6f e7       	ldi	r22, 0x7F	; 127
  82:	8b e0       	ldi	r24, 0x0B	; 11
  84:	0e 94 5e 00 	call	0xbc	; 0xbc <MAX7221_PacketTransmit>
	MAX7221_PacketTransmit(0x0C, 0x01); // turn on display
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	8c e0       	ldi	r24, 0x0C	; 12
  8c:	0e 94 5e 00 	call	0xbc	; 0xbc <MAX7221_PacketTransmit>

}
int main(void)
{
	char NumData ;
	char Counter = 0;
  90:	60 e0       	ldi	r22, 0x00	; 0
	MAX7221_PacketTransmit(0x0C, 0x01); // turn on display
	
	while (1)
	{
		
		for( NumData = 1; NumData< 9;NumData++ ){
  92:	c1 e0       	ldi	r28, 0x01	; 1
  94:	10 c0       	rjmp	.+32     	; 0xb6 <main+0x4a>
			
			MAX7221_PacketTransmit(NumData, Counter++); 
  96:	d1 e0       	ldi	r29, 0x01	; 1
  98:	d6 0f       	add	r29, r22
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 5e 00 	call	0xbc	; 0xbc <MAX7221_PacketTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e3       	ldi	r18, 0x3F	; 63
  a2:	8d e0       	ldi	r24, 0x0D	; 13
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x3a>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
	MAX7221_PacketTransmit(0x0C, 0x01); // turn on display
	
	while (1)
	{
		
		for( NumData = 1; NumData< 9;NumData++ ){
  b2:	cf 5f       	subi	r28, 0xFF	; 255
			
			MAX7221_PacketTransmit(NumData, Counter++); 
  b4:	6d 2f       	mov	r22, r29
	MAX7221_PacketTransmit(0x0C, 0x01); // turn on display
	
	while (1)
	{
		
		for( NumData = 1; NumData< 9;NumData++ ){
  b6:	c9 30       	cpi	r28, 0x09	; 9
  b8:	70 f3       	brcs	.-36     	; 0x96 <main+0x2a>
  ba:	eb cf       	rjmp	.-42     	; 0x92 <main+0x26>
