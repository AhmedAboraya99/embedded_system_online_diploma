
ATMEGA32_SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069e  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002de  00000000  00000000  00000e69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bf  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 00 	call	0x90	; 0x90 <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_SlaveInit>:

#define DDR_SPI		DDRB
#define DDR_PORT	PORTB

void SPI_SlaveInit(void){
	DDR_SPI |= (1<<MISO);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 bb       	out	0x17, r24	; 23
	// Set MISO input
	DDR_SPI &=~(1<<MOSI) &~ (1<<SCK) &~ (1<<SS);	
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 74       	andi	r24, 0x4F	; 79
  76:	87 bb       	out	0x17, r24	; 23
	// Enable SPI
	SPCR |= (1<<SPE);
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	8d b9       	out	0x0d, r24	; 13
  7e:	08 95       	ret

00000080 <SPI_SlaveReceive>:

}
char SPI_SlaveReceive(void){

	/* Wait for Reception complete */
	while(! (SPSR & (1<<SPIF)) );
  80:	77 9b       	sbis	0x0e, 7	; 14
  82:	fe cf       	rjmp	.-4      	; 0x80 <SPI_SlaveReceive>
	
	/* Return Data Register */
	return SPDR;
  84:	8f b1       	in	r24, 0x0f	; 15

}
  86:	08 95       	ret

00000088 <SPI_SlaveTransmit>:
void SPI_SlaveTransmit(char sData){
	
	/* Start transmission */
	SPDR = sData ;
  88:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(! (SPSR&(1<<SPIF)) );
  8a:	77 9b       	sbis	0x0e, 7	; 14
  8c:	fe cf       	rjmp	.-4      	; 0x8a <SPI_SlaveTransmit+0x2>

}
  8e:	08 95       	ret

00000090 <main>:
int main(void)
{
	uint8_t NumData ;
	SPI_SlaveInit();
  90:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_SlaveInit>
	DDRA=0XFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a bb       	out	0x1a, r24	; 26
	while (1)
	{
		for(uint8_t i = 255; i >= 0;i--){
  98:	cf ef       	ldi	r28, 0xFF	; 255
			
			NumData = i;
			PORTA = SPI_SlaveReceive();
  9a:	0e 94 40 00 	call	0x80	; 0x80 <SPI_SlaveReceive>
  9e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	89 e6       	ldi	r24, 0x69	; 105
  a4:	98 e1       	ldi	r25, 0x18	; 24
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x16>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x20>
  b0:	00 00       	nop
			_delay_ms(1000);
			DDR_PORT &= ~1<<SS;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	80 7e       	andi	r24, 0xE0	; 224
  b6:	88 bb       	out	0x18, r24	; 24
			SPI_SlaveTransmit(NumData);
  b8:	8c 2f       	mov	r24, r28
  ba:	0e 94 44 00 	call	0x88	; 0x88 <SPI_SlaveTransmit>
			DDR_PORT &= ~1<<SS;
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	80 7e       	andi	r24, 0xE0	; 224
  c2:	88 bb       	out	0x18, r24	; 24
	uint8_t NumData ;
	SPI_SlaveInit();
	DDRA=0XFF;
	while (1)
	{
		for(uint8_t i = 255; i >= 0;i--){
  c4:	c1 50       	subi	r28, 0x01	; 1
  c6:	e9 cf       	rjmp	.-46     	; 0x9a <main+0xa>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
