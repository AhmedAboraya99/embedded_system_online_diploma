
ATMEGA32_SPI_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a2  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000609  00000000  00000000  00000862  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d9  00000000  00000000  00000e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001144  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000087  00000000  00000000  0000155d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_MasterInit>:
#define DDR_SPI		DDRB
#define DDR_PORT	PORTB

void SPI_MasterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDR_SPI |= (1<<MOSI) | (1<<SS) |(1<<SCK);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	// Enable SPI, Master mode and set clock rate as fck/16 
	SPCR |= (1<<SPE) | (1<<MSTR) |(1<<SPR0);
  72:	8d b1       	in	r24, 0x0d	; 13
  74:	81 65       	ori	r24, 0x51	; 81
  76:	8d b9       	out	0x0d, r24	; 13
  78:	08 95       	ret

0000007a <SPI_MasterTransmit>:

}
void SPI_MasterTransmit(char sData){
	
	/* Start transmission */
	SPDR = sData ;
  7a:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(! (SPSR&(1<<SPIF)) );
  7c:	77 9b       	sbis	0x0e, 7	; 14
  7e:	fe cf       	rjmp	.-4      	; 0x7c <SPI_MasterTransmit+0x2>

}
  80:	08 95       	ret

00000082 <SPI_MasterReceive>:
char SPI_MasterReceive(void){

	/* Wait for Reception complete */
	while(! (SPSR & (1<<SPIF)) );
  82:	77 9b       	sbis	0x0e, 7	; 14
  84:	fe cf       	rjmp	.-4      	; 0x82 <SPI_MasterReceive>
	
	/* Return Data Register */
	return SPDR;
  86:	8f b1       	in	r24, 0x0f	; 15

}
  88:	08 95       	ret

0000008a <main>:
int main(void)
{
	uint8_t NumData ;
	SPI_MasterInit();
  8a:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_MasterInit>
	DDRA=0XFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26

    while (1) 
    {
		
		for(uint8_t i = 0 ; i<= 255;i++ ){
  92:	c0 e0       	ldi	r28, 0x00	; 0
			
			NumData =  i;
			DDR_PORT &= ~1<<SS;
  94:	88 b3       	in	r24, 0x18	; 24
  96:	80 7e       	andi	r24, 0xE0	; 224
  98:	88 bb       	out	0x18, r24	; 24
			SPI_MasterTransmit(NumData);
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 3d 00 	call	0x7a	; 0x7a <SPI_MasterTransmit>
			DDR_PORT |= 1<<SS;
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	80 61       	ori	r24, 0x10	; 16
  a4:	88 bb       	out	0x18, r24	; 24
			PORTA = SPI_MasterReceive();	
  a6:	0e 94 41 00 	call	0x82	; 0x82 <SPI_MasterReceive>
  aa:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	89 e6       	ldi	r24, 0x69	; 105
  b0:	98 e1       	ldi	r25, 0x18	; 24
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x28>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x32>
  bc:	00 00       	nop
	DDRA=0XFF;

    while (1) 
    {
		
		for(uint8_t i = 0 ; i<= 255;i++ ){
  be:	cf 5f       	subi	r28, 0xFF	; 255
  c0:	e9 cf       	rjmp	.-46     	; 0x94 <main+0xa>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
