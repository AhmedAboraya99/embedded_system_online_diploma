
Lab1_SPI_STM32_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000113c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800126c  0800126c  0001126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001284  08001284  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08001284  08001284  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001284  08001284  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001284  08001284  00011284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001288  08001288  00011288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800128c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000020  080012ac  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080012ac  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010b3  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002f7  00000000  00000000  000210fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000b3c  00000000  00000000  000213f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000168  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000150  00000000  00000000  00022098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e2a  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014ac  00000000  00000000  00024012  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000091db  00000000  00000000  000254be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e699  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000057c  00000000  00000000  0002e6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08001254 	.word	0x08001254

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08001254 	.word	0x08001254

08000170 <MCAL_SPI_Init>:
*  							  the configuration information for the specified SPI Module
 * 				 None
* Note			-STM32F103C6 MCU has SPI MASTER/Slave modes  & NSS Hardware/Software
 *
*/
void  MCAL_SPI_Init(SPI_TypeDef * SPIx, SPI_Config_t * SPI_Config){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	/* Safety for registers before the entire configuration be applied */
	uint16_t Temp_CR1 = 0;
 800017a:	2300      	movs	r3, #0
 800017c:	81fb      	strh	r3, [r7, #14]
	uint16_t Temp_CR2 = 0;
 800017e:	2300      	movs	r3, #0
 8000180:	81bb      	strh	r3, [r7, #12]

	//enable SPI clock
	if (SPIx == SPI1)
 8000182:	4b54      	ldr	r3, [pc, #336]	; (80002d4 <MCAL_SPI_Init+0x164>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	429a      	cmp	r2, r3
 800018a:	d10b      	bne.n	80001a4 <MCAL_SPI_Init+0x34>
	{
		RCC_SPI1_CLOCK_EN();
 800018c:	4b52      	ldr	r3, [pc, #328]	; (80002d8 <MCAL_SPI_Init+0x168>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	699a      	ldr	r2, [r3, #24]
 8000192:	4b51      	ldr	r3, [pc, #324]	; (80002d8 <MCAL_SPI_Init+0x168>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800019a:	619a      	str	r2, [r3, #24]
		Global_SPI_Config[SPI1_INDEX] = SPI_Config;
 800019c:	4a4f      	ldr	r2, [pc, #316]	; (80002dc <MCAL_SPI_Init+0x16c>)
 800019e:	683b      	ldr	r3, [r7, #0]
 80001a0:	6013      	str	r3, [r2, #0]
 80001a2:	e00f      	b.n	80001c4 <MCAL_SPI_Init+0x54>
	}
	else if (SPIx == SPI2){
 80001a4:	4b4e      	ldr	r3, [pc, #312]	; (80002e0 <MCAL_SPI_Init+0x170>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d10a      	bne.n	80001c4 <MCAL_SPI_Init+0x54>

		RCC_SPI2_CLOCK_EN();
 80001ae:	4b4a      	ldr	r3, [pc, #296]	; (80002d8 <MCAL_SPI_Init+0x168>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	69da      	ldr	r2, [r3, #28]
 80001b4:	4b48      	ldr	r3, [pc, #288]	; (80002d8 <MCAL_SPI_Init+0x168>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80001bc:	61da      	str	r2, [r3, #28]
		Global_SPI_Config[SPI2_INDEX] = SPI_Config;
 80001be:	4a47      	ldr	r2, [pc, #284]	; (80002dc <MCAL_SPI_Init+0x16c>)
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	6053      	str	r3, [r2, #4]
	}

	//enable SPI Module
	//Bit 6 UE: SPI enable
	//When this bit is cleared the SPI prescalers and outputs are stopped
	Temp_CR1 |= 1<<6 ;
 80001c4:	89fb      	ldrh	r3, [r7, #14]
 80001c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001ca:	81fb      	strh	r3, [r7, #14]
	////Select SPI Mode (MASTER/Slave)
	//Bit 2 MSTR:> 1: MASTER , 0: Slave
	if (SPI_Config-> SPI_Mode== SPI_Mode_MASTER)
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	881b      	ldrh	r3, [r3, #0]
 80001d0:	2b04      	cmp	r3, #4
 80001d2:	d105      	bne.n	80001e0 <MCAL_SPI_Init+0x70>
		Temp_CR1 |= SPI_Config->SPI_Mode;
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	881a      	ldrh	r2, [r3, #0]
 80001d8:	89fb      	ldrh	r3, [r7, #14]
 80001da:	4313      	orrs	r3, r2
 80001dc:	81fb      	strh	r3, [r7, #14]
 80001de:	e004      	b.n	80001ea <MCAL_SPI_Init+0x7a>
	else
		Temp_CR1 &= SPI_Config->SPI_Mode;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	881a      	ldrh	r2, [r3, #0]
 80001e4:	89fb      	ldrh	r3, [r7, #14]
 80001e6:	4013      	ands	r3, r2
 80001e8:	81fb      	strh	r3, [r7, #14]

	//select SPI Frame Format(LSB First/MSB First)
	Temp_CR1 |= SPI_Config->Frame_Format;
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	885a      	ldrh	r2, [r3, #2]
 80001ee:	89fb      	ldrh	r3, [r7, #14]
 80001f0:	4313      	orrs	r3, r2
 80001f2:	81fb      	strh	r3, [r7, #14]
	//Select Data Frame Size(8bit/16bit)
	Temp_CR1 |= SPI_Config->Frame_Size;
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	889a      	ldrh	r2, [r3, #4]
 80001f8:	89fb      	ldrh	r3, [r7, #14]
 80001fa:	4313      	orrs	r3, r2
 80001fc:	81fb      	strh	r3, [r7, #14]
	//Select SPI Communication Mode
	Temp_CR1 |= SPI_Config->Communication_Mode;
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	88da      	ldrh	r2, [r3, #6]
 8000202:	89fb      	ldrh	r3, [r7, #14]
 8000204:	4313      	orrs	r3, r2
 8000206:	81fb      	strh	r3, [r7, #14]
	//Select Clock Polarity
	Temp_CR1 |= SPI_Config->Clock_Polarity;
 8000208:	683b      	ldr	r3, [r7, #0]
 800020a:	891a      	ldrh	r2, [r3, #8]
 800020c:	89fb      	ldrh	r3, [r7, #14]
 800020e:	4313      	orrs	r3, r2
 8000210:	81fb      	strh	r3, [r7, #14]
	//Select Clock Phase
	Temp_CR1 |= SPI_Config->Clock_Phase;
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	895a      	ldrh	r2, [r3, #10]
 8000216:	89fb      	ldrh	r3, [r7, #14]
 8000218:	4313      	orrs	r3, r2
 800021a:	81fb      	strh	r3, [r7, #14]

	//Select NSS
	if(SPI_Config->NSS_Management==NSS_Management_SW_SSI_SET||SPI_Config->NSS_Management==NSS_Management_SW_SSI_RESET)
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	899b      	ldrh	r3, [r3, #12]
 8000220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000224:	d004      	beq.n	8000230 <MCAL_SPI_Init+0xc0>
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	899b      	ldrh	r3, [r3, #12]
 800022a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800022e:	d105      	bne.n	800023c <MCAL_SPI_Init+0xcc>
		Temp_CR1 |= SPI_Config->NSS_Management;
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	899a      	ldrh	r2, [r3, #12]
 8000234:	89fb      	ldrh	r3, [r7, #14]
 8000236:	4313      	orrs	r3, r2
 8000238:	81fb      	strh	r3, [r7, #14]
 800023a:	e00e      	b.n	800025a <MCAL_SPI_Init+0xea>
	else if (SPI_Config->NSS_Management==NSS_Management_MASTER_HW_SS_OUT)
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	899b      	ldrh	r3, [r3, #12]
 8000240:	2b04      	cmp	r3, #4
 8000242:	d105      	bne.n	8000250 <MCAL_SPI_Init+0xe0>
		Temp_CR2 |= SPI_Config->NSS_Management;
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	899a      	ldrh	r2, [r3, #12]
 8000248:	89bb      	ldrh	r3, [r7, #12]
 800024a:	4313      	orrs	r3, r2
 800024c:	81bb      	strh	r3, [r7, #12]
 800024e:	e004      	b.n	800025a <MCAL_SPI_Init+0xea>
	else
		Temp_CR2 &= SPI_Config->NSS_Management;
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	899a      	ldrh	r2, [r3, #12]
 8000254:	89bb      	ldrh	r3, [r7, #12]
 8000256:	4013      	ands	r3, r2
 8000258:	81bb      	strh	r3, [r7, #12]

	//configure SPI communication clock baud rate(for MASTER)
	if (SPI_Config-> SPI_Mode== SPI_Mode_MASTER)
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	2b04      	cmp	r3, #4
 8000260:	d104      	bne.n	800026c <MCAL_SPI_Init+0xfc>
		Temp_CR1 |= SPI_Config->BaudRate_Prescalar;
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	89da      	ldrh	r2, [r3, #14]
 8000266:	89fb      	ldrh	r3, [r7, #14]
 8000268:	4313      	orrs	r3, r2
 800026a:	81fb      	strh	r3, [r7, #14]


	//enable NVIC for SPI IRQ
	if(SPI_Config-> IRQ_Enable != SPI_IRQ_ENABLE_NONE)
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	8a1b      	ldrh	r3, [r3, #16]
 8000270:	f64f 721f 	movw	r2, #65311	; 0xff1f
 8000274:	4293      	cmp	r3, r2
 8000276:	d01c      	beq.n	80002b2 <MCAL_SPI_Init+0x142>
	{

		Temp_CR2 |= SPI_Config-> IRQ_Enable;
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	8a1a      	ldrh	r2, [r3, #16]
 800027c:	89bb      	ldrh	r3, [r7, #12]
 800027e:	4313      	orrs	r3, r2
 8000280:	81bb      	strh	r3, [r7, #12]

		if (SPIx == SPI1)
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MCAL_SPI_Init+0x164>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	687a      	ldr	r2, [r7, #4]
 8000288:	429a      	cmp	r2, r3
 800028a:	d106      	bne.n	800029a <MCAL_SPI_Init+0x12a>
			NVIC_IRQ35_SPI1_ENABLE();
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MCAL_SPI_Init+0x174>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a14      	ldr	r2, [pc, #80]	; (80002e4 <MCAL_SPI_Init+0x174>)
 8000292:	f043 0308 	orr.w	r3, r3, #8
 8000296:	6013      	str	r3, [r2, #0]
 8000298:	e010      	b.n	80002bc <MCAL_SPI_Init+0x14c>
		else if (SPIx == SPI2)
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MCAL_SPI_Init+0x170>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d10b      	bne.n	80002bc <MCAL_SPI_Init+0x14c>
			NVIC_IRQ36_SPI2_ENABLE();
 80002a4:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <MCAL_SPI_Init+0x174>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0e      	ldr	r2, [pc, #56]	; (80002e4 <MCAL_SPI_Init+0x174>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6013      	str	r3, [r2, #0]
 80002b0:	e004      	b.n	80002bc <MCAL_SPI_Init+0x14c>


	}else
		Temp_CR2 &= SPI_Config-> IRQ_Enable;
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	8a1a      	ldrh	r2, [r3, #16]
 80002b6:	89bb      	ldrh	r3, [r7, #12]
 80002b8:	4013      	ands	r3, r2
 80002ba:	81bb      	strh	r3, [r7, #12]

	SPIx-> SPI_CR1 = Temp_CR1;
 80002bc:	89fa      	ldrh	r2, [r7, #14]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	601a      	str	r2, [r3, #0]
	SPIx-> SPI_CR2 = Temp_CR2;
 80002c2:	89ba      	ldrh	r2, [r7, #12]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	605a      	str	r2, [r3, #4]
}
 80002c8:	bf00      	nop
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000018 	.word	0x20000018
 80002d8:	20000008 	.word	0x20000008
 80002dc:	2000003c 	.word	0x2000003c
 80002e0:	2000001c 	.word	0x2000001c
 80002e4:	e000e104 	.word	0xe000e104

080002e8 <MCAL_SPI_TX_RX>:
/**================================================================
 * @Fn 				-	MCAL_SPI_TX_RX
 * @brief 			-	Transmit and Receive Data
 */
void MCAL_SPI_TX_RX(SPI_TypeDef * SPIx, uint16_t *pTxBuffer, enum Polling_Mechanism Polling_EN)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	60f8      	str	r0, [r7, #12]
 80002f0:	60b9      	str	r1, [r7, #8]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71fb      	strb	r3, [r7, #7]
	//Bit 1 TXE: Transmit data register empty

	if (Polling_EN == Polling_Enable)
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d106      	bne.n	800030a <MCAL_SPI_TX_RX+0x22>
		//wait until TXE flag is set
		while(!(SPIx->SPI_SR & 1 << 1));
 80002fc:	bf00      	nop
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f003 0302 	and.w	r3, r3, #2
 8000306:	2b00      	cmp	r3, #0
 8000308:	d0f9      	beq.n	80002fe <MCAL_SPI_TX_RX+0x16>

	// Send Data to SPI Data register
	SPIx-> SPI_DR = (*pTxBuffer);
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	881b      	ldrh	r3, [r3, #0]
 800030e:	461a      	mov	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	60da      	str	r2, [r3, #12]

	//wait until RXNE flag is set : Received data is ready to be read.
	if (Polling_EN == Polling_Enable)
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	2b01      	cmp	r3, #1
 8000318:	d106      	bne.n	8000328 <MCAL_SPI_TX_RX+0x40>
		while(!(SPIx->SPI_SR & 1 ));
 800031a:	bf00      	nop
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	f003 0301 	and.w	r3, r3, #1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0f9      	beq.n	800031c <MCAL_SPI_TX_RX+0x34>

	//receive data
	*(pTxBuffer) = SPIx-> SPI_DR ;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	b29a      	uxth	r2, r3
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	801a      	strh	r2, [r3, #0]


}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr

0800033c <MCAL_SPI_GPIO_Set_Pins>:

void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef *SPIx){
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_PinConfig;

	if(SPIx == SPI1)
 8000344:	4ba0      	ldr	r3, [pc, #640]	; (80005c8 <MCAL_SPI_GPIO_Set_Pins+0x28c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	429a      	cmp	r2, r3
 800034c:	f040 8095 	bne.w	800047a <MCAL_SPI_GPIO_Set_Pins+0x13e>
	{

		//=========MASTER========//
		if(Global_SPI_Config[SPI1_INDEX]->SPI_Mode == SPI_Mode_MASTER){
 8000350:	4b9e      	ldr	r3, [pc, #632]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	881b      	ldrh	r3, [r3, #0]
 8000356:	2b04      	cmp	r3, #4
 8000358:	d14f      	bne.n	80003fa <MCAL_SPI_GPIO_Set_Pins+0xbe>

			//	SPIx_SCK -> PA5
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN5;
 800035a:	2320      	movs	r3, #32
 800035c:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 800035e:	2306      	movs	r3, #6
 8000360:	73bb      	strb	r3, [r7, #14]
			SPI_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000362:	2301      	movs	r3, #1
 8000364:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 8000366:	4b9a      	ldr	r3, [pc, #616]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	f107 020c 	add.w	r2, r7, #12
 800036e:	4611      	mov	r1, r2
 8000370:	4618      	mov	r0, r3
 8000372:	f000 fa49 	bl	8000808 <MCAL_GPIO_init>
			//	SPIx_MISO -> PA6
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN6;
 8000376:	2340      	movs	r3, #64	; 0x40
 8000378:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 800037a:	2301      	movs	r3, #1
 800037c:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 800037e:	4b94      	ldr	r3, [pc, #592]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	f107 020c 	add.w	r2, r7, #12
 8000386:	4611      	mov	r1, r2
 8000388:	4618      	mov	r0, r3
 800038a:	f000 fa3d 	bl	8000808 <MCAL_GPIO_init>
			//SPIx_MOSI -> PA7
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN7;
 800038e:	2380      	movs	r3, #128	; 0x80
 8000390:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000392:	2306      	movs	r3, #6
 8000394:	73bb      	strb	r3, [r7, #14]
			SPI_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000396:	2301      	movs	r3, #1
 8000398:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 800039a:	4b8d      	ldr	r3, [pc, #564]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f107 020c 	add.w	r2, r7, #12
 80003a2:	4611      	mov	r1, r2
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 fa2f 	bl	8000808 <MCAL_GPIO_init>
			//SPIx_NSS -> PA4
			if(Global_SPI_Config[SPI1_INDEX]->NSS_Management == NSS_Management_MASTER_HW_SS_IN){
 80003aa:	4b88      	ldr	r3, [pc, #544]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	899b      	ldrh	r3, [r3, #12]
 80003b0:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d10c      	bne.n	80003d2 <MCAL_SPI_GPIO_Set_Pins+0x96>

				SPI_PinConfig.GPIO_PINNumber = GPIO_PIN4;
 80003b8:	2310      	movs	r3, #16
 80003ba:	81bb      	strh	r3, [r7, #12]
				SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 80003bc:	2301      	movs	r3, #1
 80003be:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 80003c0:	4b83      	ldr	r3, [pc, #524]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f107 020c 	add.w	r2, r7, #12
 80003c8:	4611      	mov	r1, r2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fa1c 	bl	8000808 <MCAL_GPIO_init>
 80003d0:	e053      	b.n	800047a <MCAL_SPI_GPIO_Set_Pins+0x13e>
			}
			else if (Global_SPI_Config[SPI1_INDEX]->NSS_Management == NSS_Management_MASTER_HW_SS_OUT){
 80003d2:	4b7e      	ldr	r3, [pc, #504]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	899b      	ldrh	r3, [r3, #12]
 80003d8:	2b04      	cmp	r3, #4
 80003da:	d14e      	bne.n	800047a <MCAL_SPI_GPIO_Set_Pins+0x13e>
				//	SPI1_RTS PA12
				SPI_PinConfig.GPIO_PINNumber = GPIO_PIN4;
 80003dc:	2310      	movs	r3, #16
 80003de:	81bb      	strh	r3, [r7, #12]
				SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 80003e0:	2306      	movs	r3, #6
 80003e2:	73bb      	strb	r3, [r7, #14]
				SPI_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 80003e4:	2301      	movs	r3, #1
 80003e6:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 80003e8:	4b79      	ldr	r3, [pc, #484]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f107 020c 	add.w	r2, r7, #12
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fa08 	bl	8000808 <MCAL_GPIO_init>
 80003f8:	e03f      	b.n	800047a <MCAL_SPI_GPIO_Set_Pins+0x13e>
			}
		}
		//=========SLAVE========//
		else if(Global_SPI_Config[SPI1_INDEX]->SPI_Mode == SPI_Mode_SLAVE){
 80003fa:	4b74      	ldr	r3, [pc, #464]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000404:	4293      	cmp	r3, r2
 8000406:	d138      	bne.n	800047a <MCAL_SPI_GPIO_Set_Pins+0x13e>
			//	SPIx_SCK -> PA5
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN5;
 8000408:	2320      	movs	r3, #32
 800040a:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 800040c:	2301      	movs	r3, #1
 800040e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 8000410:	4b6f      	ldr	r3, [pc, #444]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f107 020c 	add.w	r2, r7, #12
 8000418:	4611      	mov	r1, r2
 800041a:	4618      	mov	r0, r3
 800041c:	f000 f9f4 	bl	8000808 <MCAL_GPIO_init>
			//	SPIx_MISO -> PA6
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN6;
 8000420:	2340      	movs	r3, #64	; 0x40
 8000422:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000424:	2306      	movs	r3, #6
 8000426:	73bb      	strb	r3, [r7, #14]
			SPI_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000428:	2301      	movs	r3, #1
 800042a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 800042c:	4b68      	ldr	r3, [pc, #416]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f107 020c 	add.w	r2, r7, #12
 8000434:	4611      	mov	r1, r2
 8000436:	4618      	mov	r0, r3
 8000438:	f000 f9e6 	bl	8000808 <MCAL_GPIO_init>
			//SPIx_MOSI -> PA7
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN7;
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000440:	2301      	movs	r3, #1
 8000442:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 8000444:	4b62      	ldr	r3, [pc, #392]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f107 020c 	add.w	r2, r7, #12
 800044c:	4611      	mov	r1, r2
 800044e:	4618      	mov	r0, r3
 8000450:	f000 f9da 	bl	8000808 <MCAL_GPIO_init>
			//SPIx_NSS -> PA4
			if(Global_SPI_Config[SPI1_INDEX]->NSS_Management == NSS_Management_SLAVE_HW){
 8000454:	4b5d      	ldr	r3, [pc, #372]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	899b      	ldrh	r3, [r3, #12]
 800045a:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800045e:	4293      	cmp	r3, r2
 8000460:	d10b      	bne.n	800047a <MCAL_SPI_GPIO_Set_Pins+0x13e>

				SPI_PinConfig.GPIO_PINNumber = GPIO_PIN4;
 8000462:	2310      	movs	r3, #16
 8000464:	81bb      	strh	r3, [r7, #12]
				SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000466:	2301      	movs	r3, #1
 8000468:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 800046a:	4b59      	ldr	r3, [pc, #356]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f107 020c 	add.w	r2, r7, #12
 8000472:	4611      	mov	r1, r2
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f9c7 	bl	8000808 <MCAL_GPIO_init>
			}

		}
	}
	if(SPIx == SPI2)
 800047a:	4b56      	ldr	r3, [pc, #344]	; (80005d4 <MCAL_SPI_GPIO_Set_Pins+0x298>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	429a      	cmp	r2, r3
 8000482:	f040 809c 	bne.w	80005be <MCAL_SPI_GPIO_Set_Pins+0x282>
	{

		//=========MASTER========//
		if(Global_SPI_Config[SPI2_INDEX]->SPI_Mode == SPI_Mode_MASTER){
 8000486:	4b51      	ldr	r3, [pc, #324]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 8000488:	685b      	ldr	r3, [r3, #4]
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	2b04      	cmp	r3, #4
 800048e:	d154      	bne.n	800053a <MCAL_SPI_GPIO_Set_Pins+0x1fe>

			//	SPIx_SCK -> PA13
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN13;
 8000490:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000494:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000496:	2306      	movs	r3, #6
 8000498:	73bb      	strb	r3, [r7, #14]
			SPI_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 800049a:	2301      	movs	r3, #1
 800049c:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 800049e:	4b4c      	ldr	r3, [pc, #304]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f107 020c 	add.w	r2, r7, #12
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 f9ad 	bl	8000808 <MCAL_GPIO_init>
			//	SPIx_MISO -> PA14
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN14;
 80004ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80004b2:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 80004b4:	2301      	movs	r3, #1
 80004b6:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 80004b8:	4b45      	ldr	r3, [pc, #276]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	f107 020c 	add.w	r2, r7, #12
 80004c0:	4611      	mov	r1, r2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f9a0 	bl	8000808 <MCAL_GPIO_init>
			//SPIx_MOSI -> PA15
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN15;
 80004c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004cc:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 80004ce:	2306      	movs	r3, #6
 80004d0:	73bb      	strb	r3, [r7, #14]
			SPI_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 80004d2:	2301      	movs	r3, #1
 80004d4:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 80004d6:	4b3e      	ldr	r3, [pc, #248]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	4611      	mov	r1, r2
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 f991 	bl	8000808 <MCAL_GPIO_init>
			//SPIx_NSS -> PA2
			if(Global_SPI_Config[SPI2_INDEX]->NSS_Management == NSS_Management_MASTER_HW_SS_IN){
 80004e6:	4b39      	ldr	r3, [pc, #228]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	899b      	ldrh	r3, [r3, #12]
 80004ec:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d10d      	bne.n	8000510 <MCAL_SPI_GPIO_Set_Pins+0x1d4>

				SPI_PinConfig.GPIO_PINNumber = GPIO_PIN12;
 80004f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004f8:	81bb      	strh	r3, [r7, #12]
				SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 80004fa:	2301      	movs	r3, #1
 80004fc:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 80004fe:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	f107 020c 	add.w	r2, r7, #12
 8000506:	4611      	mov	r1, r2
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f97d 	bl	8000808 <MCAL_GPIO_init>
				MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
			}

		}
	}
}
 800050e:	e056      	b.n	80005be <MCAL_SPI_GPIO_Set_Pins+0x282>
			else if (Global_SPI_Config[SPI2_INDEX]->NSS_Management == NSS_Management_MASTER_HW_SS_OUT){
 8000510:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	899b      	ldrh	r3, [r3, #12]
 8000516:	2b04      	cmp	r3, #4
 8000518:	d151      	bne.n	80005be <MCAL_SPI_GPIO_Set_Pins+0x282>
				SPI_PinConfig.GPIO_PINNumber = GPIO_PIN12;
 800051a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800051e:	81bb      	strh	r3, [r7, #12]
				SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000520:	2306      	movs	r3, #6
 8000522:	73bb      	strb	r3, [r7, #14]
				SPI_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
				MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 8000528:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f107 020c 	add.w	r2, r7, #12
 8000530:	4611      	mov	r1, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f968 	bl	8000808 <MCAL_GPIO_init>
}
 8000538:	e041      	b.n	80005be <MCAL_SPI_GPIO_Set_Pins+0x282>
		else if(Global_SPI_Config[SPI2_INDEX]->SPI_Mode == SPI_Mode_SLAVE){
 800053a:	4b24      	ldr	r3, [pc, #144]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8000544:	4293      	cmp	r3, r2
 8000546:	d13a      	bne.n	80005be <MCAL_SPI_GPIO_Set_Pins+0x282>
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN13;
 8000548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800054c:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 800054e:	2301      	movs	r3, #1
 8000550:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	4611      	mov	r1, r2
 800055c:	4618      	mov	r0, r3
 800055e:	f000 f953 	bl	8000808 <MCAL_GPIO_init>
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN14;
 8000562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000566:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000568:	2306      	movs	r3, #6
 800056a:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 800056c:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f107 020c 	add.w	r2, r7, #12
 8000574:	4611      	mov	r1, r2
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f946 	bl	8000808 <MCAL_GPIO_init>
			SPI_PinConfig.GPIO_PINNumber = GPIO_PIN15;
 800057c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000580:	81bb      	strh	r3, [r7, #12]
			SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000582:	2301      	movs	r3, #1
 8000584:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 8000586:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f107 020c 	add.w	r2, r7, #12
 800058e:	4611      	mov	r1, r2
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f939 	bl	8000808 <MCAL_GPIO_init>
			if(Global_SPI_Config[SPI2_INDEX]->NSS_Management == NSS_Management_MASTER_HW_SS_IN){
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MCAL_SPI_GPIO_Set_Pins+0x290>)
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	899b      	ldrh	r3, [r3, #12]
 800059c:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d10c      	bne.n	80005be <MCAL_SPI_GPIO_Set_Pins+0x282>
				SPI_PinConfig.GPIO_PINNumber = GPIO_PIN12;
 80005a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a8:	81bb      	strh	r3, [r7, #12]
				SPI_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 80005aa:	2301      	movs	r3, #1
 80005ac:	73bb      	strb	r3, [r7, #14]
				MCAL_GPIO_init (GPIOA,&SPI_PinConfig);
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <MCAL_SPI_GPIO_Set_Pins+0x294>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f107 020c 	add.w	r2, r7, #12
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f925 	bl	8000808 <MCAL_GPIO_init>
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000018 	.word	0x20000018
 80005cc:	2000003c 	.word	0x2000003c
 80005d0:	20000000 	.word	0x20000000
 80005d4:	2000001c 	.word	0x2000001c

080005d8 <SPI1_IRQHandler>:

//ISR
void SPI1_IRQHandler (void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	struct SPI_IRQ_Src irq_src;
	irq_src.SPI_TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <SPI1_IRQHandler+0x58>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	085b      	lsrs	r3, r3, #1
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	793b      	ldrb	r3, [r7, #4]
 80005ee:	f362 0300 	bfi	r3, r2, #0, #1
 80005f2:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <SPI1_IRQHandler+0x58>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	689b      	ldr	r3, [r3, #8]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	793b      	ldrb	r3, [r7, #4]
 8000602:	f362 0341 	bfi	r3, r2, #1, #1
 8000606:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <SPI1_IRQHandler+0x58>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	091b      	lsrs	r3, r3, #4
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	b2da      	uxtb	r2, r3
 8000616:	793b      	ldrb	r3, [r7, #4]
 8000618:	f362 0382 	bfi	r3, r2, #2, #1
 800061c:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SPI1_IRQHandler+0x5c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	7938      	ldrb	r0, [r7, #4]
 8000626:	4798      	blx	r3
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000018 	.word	0x20000018
 8000634:	2000003c 	.word	0x2000003c

08000638 <SPI2_IRQHandler>:

void SPI2_IRQHandler()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	struct SPI_IRQ_Src irq_src;
	irq_src.SPI_TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <SPI2_IRQHandler+0x58>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	085b      	lsrs	r3, r3, #1
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	b2da      	uxtb	r2, r3
 800064c:	793b      	ldrb	r3, [r7, #4]
 800064e:	f362 0300 	bfi	r3, r2, #0, #1
 8000652:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <SPI2_IRQHandler+0x58>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	689b      	ldr	r3, [r3, #8]
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	793b      	ldrb	r3, [r7, #4]
 8000662:	f362 0341 	bfi	r3, r2, #1, #1
 8000666:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <SPI2_IRQHandler+0x58>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	091b      	lsrs	r3, r3, #4
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	b2da      	uxtb	r2, r3
 8000676:	793b      	ldrb	r3, [r7, #4]
 8000678:	f362 0382 	bfi	r3, r2, #2, #1
 800067c:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <SPI2_IRQHandler+0x5c>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	7938      	ldrb	r0, [r7, #4]
 8000686:	4798      	blx	r3
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	2000001c 	.word	0x2000001c
 8000694:	2000003c 	.word	0x2000003c

08000698 <Get_CRLH_Position>:

#include "STM32F103X6_GPIO_Driver.h"

//assisted functions
uint8_t Get_CRLH_Position(uint16_t PINNumber)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
	switch (PINNumber)
 80006a2:	88fb      	ldrh	r3, [r7, #6]
 80006a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006a8:	f000 80a5 	beq.w	80007f6 <Get_CRLH_Position+0x15e>
 80006ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80006b0:	f300 80a3 	bgt.w	80007fa <Get_CRLH_Position+0x162>
 80006b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006b8:	f000 809b 	beq.w	80007f2 <Get_CRLH_Position+0x15a>
 80006bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006c0:	f300 809b 	bgt.w	80007fa <Get_CRLH_Position+0x162>
 80006c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c8:	f000 8091 	beq.w	80007ee <Get_CRLH_Position+0x156>
 80006cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d0:	f300 8093 	bgt.w	80007fa <Get_CRLH_Position+0x162>
 80006d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006d8:	f000 8087 	beq.w	80007ea <Get_CRLH_Position+0x152>
 80006dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006e0:	f300 808b 	bgt.w	80007fa <Get_CRLH_Position+0x162>
 80006e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006e8:	d07d      	beq.n	80007e6 <Get_CRLH_Position+0x14e>
 80006ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80006ee:	f300 8084 	bgt.w	80007fa <Get_CRLH_Position+0x162>
 80006f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006f6:	d074      	beq.n	80007e2 <Get_CRLH_Position+0x14a>
 80006f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006fc:	dc7d      	bgt.n	80007fa <Get_CRLH_Position+0x162>
 80006fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000702:	d06c      	beq.n	80007de <Get_CRLH_Position+0x146>
 8000704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000708:	dc77      	bgt.n	80007fa <Get_CRLH_Position+0x162>
 800070a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800070e:	d064      	beq.n	80007da <Get_CRLH_Position+0x142>
 8000710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000714:	dc71      	bgt.n	80007fa <Get_CRLH_Position+0x162>
 8000716:	2b80      	cmp	r3, #128	; 0x80
 8000718:	d05d      	beq.n	80007d6 <Get_CRLH_Position+0x13e>
 800071a:	2b80      	cmp	r3, #128	; 0x80
 800071c:	dc6d      	bgt.n	80007fa <Get_CRLH_Position+0x162>
 800071e:	2b20      	cmp	r3, #32
 8000720:	dc48      	bgt.n	80007b4 <Get_CRLH_Position+0x11c>
 8000722:	2b00      	cmp	r3, #0
 8000724:	dd69      	ble.n	80007fa <Get_CRLH_Position+0x162>
 8000726:	3b01      	subs	r3, #1
 8000728:	2b1f      	cmp	r3, #31
 800072a:	d866      	bhi.n	80007fa <Get_CRLH_Position+0x162>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <Get_CRLH_Position+0x9c>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	080007bb 	.word	0x080007bb
 8000738:	080007bf 	.word	0x080007bf
 800073c:	080007fb 	.word	0x080007fb
 8000740:	080007c3 	.word	0x080007c3
 8000744:	080007fb 	.word	0x080007fb
 8000748:	080007fb 	.word	0x080007fb
 800074c:	080007fb 	.word	0x080007fb
 8000750:	080007c7 	.word	0x080007c7
 8000754:	080007fb 	.word	0x080007fb
 8000758:	080007fb 	.word	0x080007fb
 800075c:	080007fb 	.word	0x080007fb
 8000760:	080007fb 	.word	0x080007fb
 8000764:	080007fb 	.word	0x080007fb
 8000768:	080007fb 	.word	0x080007fb
 800076c:	080007fb 	.word	0x080007fb
 8000770:	080007cb 	.word	0x080007cb
 8000774:	080007fb 	.word	0x080007fb
 8000778:	080007fb 	.word	0x080007fb
 800077c:	080007fb 	.word	0x080007fb
 8000780:	080007fb 	.word	0x080007fb
 8000784:	080007fb 	.word	0x080007fb
 8000788:	080007fb 	.word	0x080007fb
 800078c:	080007fb 	.word	0x080007fb
 8000790:	080007fb 	.word	0x080007fb
 8000794:	080007fb 	.word	0x080007fb
 8000798:	080007fb 	.word	0x080007fb
 800079c:	080007fb 	.word	0x080007fb
 80007a0:	080007fb 	.word	0x080007fb
 80007a4:	080007fb 	.word	0x080007fb
 80007a8:	080007fb 	.word	0x080007fb
 80007ac:	080007fb 	.word	0x080007fb
 80007b0:	080007cf 	.word	0x080007cf
 80007b4:	2b40      	cmp	r3, #64	; 0x40
 80007b6:	d00c      	beq.n	80007d2 <Get_CRLH_Position+0x13a>
 80007b8:	e01f      	b.n	80007fa <Get_CRLH_Position+0x162>
	{
	//CRL
	case GPIO_PIN0:
		return 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	e01e      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN1:
		return 4;
 80007be:	2304      	movs	r3, #4
 80007c0:	e01c      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN2:
		return 8;
 80007c2:	2308      	movs	r3, #8
 80007c4:	e01a      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN3:
		return 12;
 80007c6:	230c      	movs	r3, #12
 80007c8:	e018      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN4:
		return 16;
 80007ca:	2310      	movs	r3, #16
 80007cc:	e016      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN5:
		return 20;
 80007ce:	2314      	movs	r3, #20
 80007d0:	e014      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN6:
		return 24;
 80007d2:	2318      	movs	r3, #24
 80007d4:	e012      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN7:
		return 28;
 80007d6:	231c      	movs	r3, #28
 80007d8:	e010      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;

	//CRH
	case GPIO_PIN8:
		return 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	e00e      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN9:
		return 4;
 80007de:	2304      	movs	r3, #4
 80007e0:	e00c      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN10:
		return 8;
 80007e2:	2308      	movs	r3, #8
 80007e4:	e00a      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN11:
		return 12;
 80007e6:	230c      	movs	r3, #12
 80007e8:	e008      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN12:
		return 16;
 80007ea:	2310      	movs	r3, #16
 80007ec:	e006      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN13:
		return 20;
 80007ee:	2314      	movs	r3, #20
 80007f0:	e004      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN14:
		return 24;
 80007f2:	2318      	movs	r3, #24
 80007f4:	e002      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN15:
		return 28;
 80007f6:	231c      	movs	r3, #28
 80007f8:	e000      	b.n	80007fc <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop

08000808 <MCAL_GPIO_init>:
 * 				 the configuration info for specified GPIO
* @retval -
* Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig){
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]

	volatile uint32_t *Config_Reg = NULL;
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
	uint8_t PIN = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) configure pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  configure pins 8 -> 15
	Config_Reg = (PINConfig->GPIO_PINNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	2bff      	cmp	r3, #255	; 0xff
 8000820:	d801      	bhi.n	8000826 <MCAL_GPIO_init+0x1e>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	e001      	b.n	800082a <MCAL_GPIO_init+0x22>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3304      	adds	r3, #4
 800082a:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] & MODE[1:0]
	(*Config_Reg) &= ~(0x0F << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff31 	bl	8000698 <Get_CRLH_Position>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	230f      	movs	r3, #15
 800083c:	4093      	lsls	r3, r2
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	401a      	ands	r2, r3
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	601a      	str	r2, [r3, #0]
	// GPIO PIN mode is output
	if ((PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP))
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	789b      	ldrb	r3, [r3, #2]
 800084e:	2b07      	cmp	r3, #7
 8000850:	d00b      	beq.n	800086a <MCAL_GPIO_init+0x62>
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	2b06      	cmp	r3, #6
 8000858:	d007      	beq.n	800086a <MCAL_GPIO_init+0x62>
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	789b      	ldrb	r3, [r3, #2]
 800085e:	2b05      	cmp	r3, #5
 8000860:	d003      	beq.n	800086a <MCAL_GPIO_init+0x62>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	2b04      	cmp	r3, #4
 8000868:	d10e      	bne.n	8000888 <MCAL_GPIO_init+0x80>
	{
		PIN = (((PINConfig -> GPIO_Mode - 4 )<< 2 ) | (PINConfig -> GPIO_Speed )) & 0x0F;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	3b04      	subs	r3, #4
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	b25a      	sxtb	r2, r3
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	78db      	ldrb	r3, [r3, #3]
 8000878:	b25b      	sxtb	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b25b      	sxtb	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	f003 030f 	and.w	r3, r3, #15
 8000884:	73fb      	strb	r3, [r7, #15]
 8000886:	e02a      	b.n	80008de <MCAL_GPIO_init+0xd6>
	}

	else {
		//GPIO PIN Mode is input / Analog
		if ((PINConfig->GPIO_Mode == GPIO_Mode_IN_Float) ||  (PINConfig->GPIO_Mode == GPIO_Mode_Analog))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	789b      	ldrb	r3, [r3, #2]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d003      	beq.n	8000898 <MCAL_GPIO_init+0x90>
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	789b      	ldrb	r3, [r3, #2]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d107      	bne.n	80008a8 <MCAL_GPIO_init+0xa0>
			{
				PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	789b      	ldrb	r3, [r3, #2]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f003 030f 	and.w	r3, r3, #15
 80008a4:	73fb      	strb	r3, [r7, #15]
 80008a6:	e01a      	b.n	80008de <MCAL_GPIO_init+0xd6>
			}
		else{
			PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	73fb      	strb	r3, [r7, #15]

			if (PINConfig -> GPIO_Mode == GPIO_Mode_IN_PU ){
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d107      	bne.n	80008ce <MCAL_GPIO_init+0xc6>
				//ODR = 1 INPUT Pull Up
				GPIOx -> ODR |= PINConfig -> GPIO_PINNumber;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	8812      	ldrh	r2, [r2, #0]
 80008c6:	431a      	orrs	r2, r3
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	e007      	b.n	80008de <MCAL_GPIO_init+0xd6>
			}
			else{
				//ODR = 0 INPUT Pull Down
				GPIOx -> ODR &= ~(PINConfig -> GPIO_PINNumber);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	683a      	ldr	r2, [r7, #0]
 80008d4:	8812      	ldrh	r2, [r2, #0]
 80008d6:	43d2      	mvns	r2, r2
 80008d8:	401a      	ands	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on CRL or CRH
	(*Config_Reg) |= (PIN << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 80008de:	7bfc      	ldrb	r4, [r7, #15]
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fed7 	bl	8000698 <Get_CRLH_Position>
 80008ea:	4603      	mov	r3, r0
 80008ec:	fa04 f203 	lsl.w	r2, r4, r3
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	431a      	orrs	r2, r3
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	601a      	str	r2, [r3, #0]
}
 80008fa:	bf00      	nop
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}

08000902 <MCAL_GPIO_SetPIN>:
 * @param [in] 	-PinNumber : set pin number to read
 * @param [in] 	-mode, speed : set the direction and speed mode of the pin
 * @retval	 	-none
 * Note			-none
 */
void MCAL_GPIO_SetPIN (GPIO_TypeDef* GPIOx ,uint16_t PIN_Number,uint8_t mode,uint8_t speed ){
 8000902:	b590      	push	{r4, r7, lr}
 8000904:	b085      	sub	sp, #20
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	4608      	mov	r0, r1
 800090c:	4611      	mov	r1, r2
 800090e:	461a      	mov	r2, r3
 8000910:	4603      	mov	r3, r0
 8000912:	807b      	strh	r3, [r7, #2]
 8000914:	460b      	mov	r3, r1
 8000916:	707b      	strb	r3, [r7, #1]
 8000918:	4613      	mov	r3, r2
 800091a:	703b      	strb	r3, [r7, #0]

	volatile uint32_t *Config_Reg = NULL;
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
	uint8_t PIN = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) configure pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  configure pins 8 -> 15
	Config_Reg = (PIN_Number < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	2bff      	cmp	r3, #255	; 0xff
 8000928:	d801      	bhi.n	800092e <MCAL_GPIO_SetPIN+0x2c>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	e001      	b.n	8000932 <MCAL_GPIO_SetPIN+0x30>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	3304      	adds	r3, #4
 8000932:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] & MODE[1:0]
	(*Config_Reg) &= ~(0x0F << Get_CRLH_Position(PIN_Number));
 8000934:	887b      	ldrh	r3, [r7, #2]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff feae 	bl	8000698 <Get_CRLH_Position>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	230f      	movs	r3, #15
 8000942:	4093      	lsls	r3, r2
 8000944:	43da      	mvns	r2, r3
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	401a      	ands	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	601a      	str	r2, [r3, #0]
	// GPIO PIN mode is output
	if ((mode == GPIO_Mode_AF_OUT_OD) || (mode == GPIO_Mode_AF_OUT_PP) || (mode == GPIO_Mode_OUT_OD) || (mode == GPIO_Mode_OUT_PP))
 8000950:	787b      	ldrb	r3, [r7, #1]
 8000952:	2b07      	cmp	r3, #7
 8000954:	d008      	beq.n	8000968 <MCAL_GPIO_SetPIN+0x66>
 8000956:	787b      	ldrb	r3, [r7, #1]
 8000958:	2b06      	cmp	r3, #6
 800095a:	d005      	beq.n	8000968 <MCAL_GPIO_SetPIN+0x66>
 800095c:	787b      	ldrb	r3, [r7, #1]
 800095e:	2b05      	cmp	r3, #5
 8000960:	d002      	beq.n	8000968 <MCAL_GPIO_SetPIN+0x66>
 8000962:	787b      	ldrb	r3, [r7, #1]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d10c      	bne.n	8000982 <MCAL_GPIO_SetPIN+0x80>
	{
		PIN = (((mode - 4 )<< 2 ) | (speed )) & 0x0F;
 8000968:	787b      	ldrb	r3, [r7, #1]
 800096a:	3b04      	subs	r3, #4
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	b25a      	sxtb	r2, r3
 8000970:	f997 3000 	ldrsb.w	r3, [r7]
 8000974:	4313      	orrs	r3, r2
 8000976:	b25b      	sxtb	r3, r3
 8000978:	b2db      	uxtb	r3, r3
 800097a:	f003 030f 	and.w	r3, r3, #15
 800097e:	73fb      	strb	r3, [r7, #15]
 8000980:	e023      	b.n	80009ca <MCAL_GPIO_SetPIN+0xc8>
	}

	else {
		//GPIO PIN Mode is input / Analog
		if ((mode == GPIO_Mode_IN_Float) ||  (mode == GPIO_Mode_Analog))
 8000982:	787b      	ldrb	r3, [r7, #1]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d002      	beq.n	800098e <MCAL_GPIO_SetPIN+0x8c>
 8000988:	787b      	ldrb	r3, [r7, #1]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d106      	bne.n	800099c <MCAL_GPIO_SetPIN+0x9a>
			{
				PIN = ((mode << 2 ) &0x0F) ;
 800098e:	787b      	ldrb	r3, [r7, #1]
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 030f 	and.w	r3, r3, #15
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e016      	b.n	80009ca <MCAL_GPIO_SetPIN+0xc8>
			}
		else{
			PIN = ((mode << 2 ) &0x0F) ;
 800099c:	787b      	ldrb	r3, [r7, #1]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	f003 030f 	and.w	r3, r3, #15
 80009a6:	73fb      	strb	r3, [r7, #15]

			if (mode == GPIO_Mode_IN_PU ){
 80009a8:	787b      	ldrb	r3, [r7, #1]
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d106      	bne.n	80009bc <MCAL_GPIO_SetPIN+0xba>
				//ODR = 1 INPUT Pull Up
				GPIOx -> ODR |=PIN_Number;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	e006      	b.n	80009ca <MCAL_GPIO_SetPIN+0xc8>
			}
			else{
				//ODR = 0 INPUT Pull Down
				GPIOx -> ODR &= ~(PIN_Number);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	887a      	ldrh	r2, [r7, #2]
 80009c2:	43d2      	mvns	r2, r2
 80009c4:	401a      	ands	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on CRL or CRH
	(*Config_Reg) |= (PIN << Get_CRLH_Position(PIN_Number));
 80009ca:	7bfc      	ldrb	r4, [r7, #15]
 80009cc:	887b      	ldrh	r3, [r7, #2]
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe62 	bl	8000698 <Get_CRLH_Position>
 80009d4:	4603      	mov	r3, r0
 80009d6:	fa04 f203 	lsl.w	r2, r4, r3
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	431a      	orrs	r2, r3
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	601a      	str	r2, [r3, #0]

}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <MCAL_GPIO_WritePIN>:
 * @param [in]	-PinNumber : Specific Pin number to be Write on according to @ref GPIO_PINS_Define
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_GPIO_WritePIN (GPIO_TypeDef* GPIOx ,uint16_t PIN_Number,uint8_t value ){
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
 80009f8:	4613      	mov	r3, r2
 80009fa:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_SET )
 80009fc:	787b      	ldrb	r3, [r7, #1]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d003      	beq.n	8000a0a <MCAL_GPIO_WritePIN+0x1e>
		{
		//Port bit set/reset register (GPIOx_BSRR)
		//BRy: Port x Reset bit y (y= 0 ... 15)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx -> BRR = (uint32_t) PIN_Number ;
 8000a02:	887a      	ldrh	r2, [r7, #2]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	615a      	str	r2, [r3, #20]
		// Port bit set/reset register (GPIOx_BSRR)
		// BSy: Port x Reset bit y (y= 0 ... 15)
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
		GPIOx -> BSRR = (uint32_t) PIN_Number ;
}
 8000a08:	e002      	b.n	8000a10 <MCAL_GPIO_WritePIN+0x24>
		GPIOx -> BSRR = (uint32_t) PIN_Number ;
 8000a0a:	887a      	ldrh	r2, [r7, #2]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	611a      	str	r2, [r3, #16]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bc80      	pop	{r7}
 8000a18:	4770      	bx	lr
	...

08000a1c <MCAL_RCC_GetSYS_CLCKFreq>:

/**================================================================
* @Fn- 		MCAL_RCC_GetSYS_CLCKFreq
* @brief 	-drive the system clock (SYSCLK)
*/
uint32_t MCAL_RCC_GetSYS_CLCKFreq(void){
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
//Set and cleared by hardware to indicate which clock source is used as system clock.
//00: HSI oscillator used as system clock
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: Not applicable
	switch (RCC->CFGR >>2 & 0b11)
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	089b      	lsrs	r3, r3, #2
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d00a      	beq.n	8000a46 <MCAL_RCC_GetSYS_CLCKFreq+0x2a>
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d80a      	bhi.n	8000a4a <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d002      	beq.n	8000a3e <MCAL_RCC_GetSYS_CLCKFreq+0x22>
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d002      	beq.n	8000a42 <MCAL_RCC_GetSYS_CLCKFreq+0x26>
 8000a3c:	e005      	b.n	8000a4a <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
	{
	case 0:
		return HSI_RC_Clk;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 8000a40:	e003      	b.n	8000a4a <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
		break;
	case 1:
		return HSE_Clock;
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <MCAL_RCC_GetSYS_CLCKFreq+0x40>)
 8000a44:	e001      	b.n	8000a4a <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
		break;
	case 2:
		return 16000000;
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <MCAL_RCC_GetSYS_CLCKFreq+0x40>)
 8000a48:	e7ff      	b.n	8000a4a <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
		break;
	}

}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	20000008 	.word	0x20000008
 8000a58:	007a1200 	.word	0x007a1200
 8000a5c:	00f42400 	.word	0x00f42400

08000a60 <MCAL_RCC_GetHCLCKFreq>:

/**================================================================
 * @Fn			-MCAL_RCC_GetHCLCKFreq
 * @brief 		-Get HCLK source
 */
uint32_t MCAL_RCC_GetHCLCKFreq(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetSYS_CLCKFreq()>> AHBPrescTable [(RCC->CFGR >>4)& 0xF]);
 8000a64:	f7ff ffda 	bl	8000a1c <MCAL_RCC_GetSYS_CLCKFreq>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MCAL_RCC_GetHCLCKFreq+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	091b      	lsrs	r3, r3, #4
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	4904      	ldr	r1, [pc, #16]	; (8000a88 <MCAL_RCC_GetHCLCKFreq+0x28>)
 8000a78:	5ccb      	ldrb	r3, [r1, r3]
 8000a7a:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008
 8000a88:	08001274 	.word	0x08001274

08000a8c <MCAL_RCC_GetPCLCK1Freq>:
/**================================================================
 * @Fn			-MCAL_RCC_GetPCLCK1Freq
 * @brief 		-compute PCLK1 frequency
 */
uint32_t MCAL_RCC_GetPCLCK1Freq(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLCKFreq()>> APBPrescTable[(RCC->CFGR >>8)& 0b111]);
 8000a90:	f7ff ffe6 	bl	8000a60 <MCAL_RCC_GetHCLCKFreq>
 8000a94:	4602      	mov	r2, r0
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MCAL_RCC_GetPCLCK1Freq+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	4904      	ldr	r1, [pc, #16]	; (8000ab4 <MCAL_RCC_GetPCLCK1Freq+0x28>)
 8000aa4:	5ccb      	ldrb	r3, [r1, r3]
 8000aa6:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	0800126c 	.word	0x0800126c

08000ab8 <MCAL_RCC_GetPCLCK2Freq>:
/**================================================================
 * @Fn			-MCAL_RCC_GetPCLCK2Freq
 * @brief 		-compute PCLK2 frequency
 */
uint32_t MCAL_RCC_GetPCLCK2Freq(void){
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLCKFreq()>> APBPrescTable [(RCC->CFGR >>11)& 0b111]);
 8000abc:	f7ff ffd0 	bl	8000a60 <MCAL_RCC_GetHCLCKFreq>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MCAL_RCC_GetPCLCK2Freq+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	0adb      	lsrs	r3, r3, #11
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <MCAL_RCC_GetPCLCK2Freq+0x28>)
 8000ad0:	5ccb      	ldrb	r3, [r1, r3]
 8000ad2:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	0800126c 	.word	0x0800126c

08000ae4 <Get_USART_Index>:
USART_Config_t* Global_USART_Config[3] = {NULL, NULL, NULL};
//void (*GP_IRQ_CallBack)(void);

//===============APIs===================//
//*********Global Functions*********//
uint8_t Get_USART_Index(USART_TypeDef* USARTx){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

	if(USARTx == USART1)
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <Get_USART_Index+0x3c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d101      	bne.n	8000afa <Get_USART_Index+0x16>
		return USART1_INDEX;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e00d      	b.n	8000b16 <Get_USART_Index+0x32>
	else if(USARTx == USART2)
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <Get_USART_Index+0x40>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d101      	bne.n	8000b08 <Get_USART_Index+0x24>
		return USART2_INDEX;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e006      	b.n	8000b16 <Get_USART_Index+0x32>
	else if(USARTx == USART3)
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <Get_USART_Index+0x44>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d101      	bne.n	8000b16 <Get_USART_Index+0x32>
		return USART3_INDEX;
 8000b12:	2302      	movs	r3, #2
 8000b14:	e7ff      	b.n	8000b16 <Get_USART_Index+0x32>

}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	2000000c 	.word	0x2000000c
 8000b24:	20000010 	.word	0x20000010
 8000b28:	20000014 	.word	0x20000014

08000b2c <MCAL_USART_init>:
* @retval -
* Note			-STM32F103C6 MCU has USART A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
*/

void  MCAL_USART_init (USART_TypeDef* USARTx ,USART_Config_t* USART_Config){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]

	uint32_t Pclk, BRReg;
	//enable USART clock
	if (USARTx == USART1){
 8000b36:	4b4b      	ldr	r3, [pc, #300]	; (8000c64 <MCAL_USART_init+0x138>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d10b      	bne.n	8000b58 <MCAL_USART_init+0x2c>
		RCC_USART1_CLOCK_EN();
 8000b40:	4b49      	ldr	r3, [pc, #292]	; (8000c68 <MCAL_USART_init+0x13c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	699a      	ldr	r2, [r3, #24]
 8000b46:	4b48      	ldr	r3, [pc, #288]	; (8000c68 <MCAL_USART_init+0x13c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b4e:	619a      	str	r2, [r3, #24]
		Global_USART_Config[USART1_INDEX] = USART_Config;
 8000b50:	4a46      	ldr	r2, [pc, #280]	; (8000c6c <MCAL_USART_init+0x140>)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	e020      	b.n	8000b9a <MCAL_USART_init+0x6e>
	}
	else if (USARTx == USART2){
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <MCAL_USART_init+0x144>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d10b      	bne.n	8000b7a <MCAL_USART_init+0x4e>
		RCC_USART2_CLOCK_EN();
 8000b62:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <MCAL_USART_init+0x13c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	69da      	ldr	r2, [r3, #28]
 8000b68:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <MCAL_USART_init+0x13c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b70:	61da      	str	r2, [r3, #28]
		Global_USART_Config[USART2_INDEX] = USART_Config;
 8000b72:	4a3e      	ldr	r2, [pc, #248]	; (8000c6c <MCAL_USART_init+0x140>)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	6053      	str	r3, [r2, #4]
 8000b78:	e00f      	b.n	8000b9a <MCAL_USART_init+0x6e>
	}
	else if (USARTx == USART3){
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <MCAL_USART_init+0x148>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d10a      	bne.n	8000b9a <MCAL_USART_init+0x6e>
		RCC_USART3_CLOCK_EN();
 8000b84:	4b38      	ldr	r3, [pc, #224]	; (8000c68 <MCAL_USART_init+0x13c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	69da      	ldr	r2, [r3, #28]
 8000b8a:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <MCAL_USART_init+0x13c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b92:	61da      	str	r2, [r3, #28]
		Global_USART_Config[USART3_INDEX] = USART_Config;
 8000b94:	4a35      	ldr	r2, [pc, #212]	; (8000c6c <MCAL_USART_init+0x140>)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	6093      	str	r3, [r2, #8]
	}
	//enable USART Module
	//Bit 13 UE: USART enable
	//When this bit is cleared the USART prescalers and outputs are stopped
	USARTx -> CR1 |= 1<<13 ;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60da      	str	r2, [r3, #12]
	//enable USART send and receive
	//Bit 3 TE: Transmitter enable
	//Bit 2 RE: Receiver enable
	USARTx->CR1 |= USART_Config->USART_Mode;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	68db      	ldr	r3, [r3, #12]
 8000baa:	683a      	ldr	r2, [r7, #0]
 8000bac:	7812      	ldrb	r2, [r2, #0]
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
	//select number of Stop Bits
	USARTx->CR1 |= USART_Config->StopBits;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	7a92      	ldrb	r2, [r2, #10]
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60da      	str	r2, [r3, #12]
	//enable or disable HW flow control modes
	USARTx->CR1 |= USART_Config->HWFlowCTRL;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	68db      	ldr	r3, [r3, #12]
 8000bc6:	683a      	ldr	r2, [r7, #0]
 8000bc8:	7ad2      	ldrb	r2, [r2, #11]
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	60da      	str	r2, [r3, #12]

	//configure USART communication baud rate
	if (USARTx == USART1)
 8000bd0:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MCAL_USART_init+0x138>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d103      	bne.n	8000be2 <MCAL_USART_init+0xb6>
		Pclk = MCAL_RCC_GetPCLCK2Freq();
 8000bda:	f7ff ff6d 	bl	8000ab8 <MCAL_RCC_GetPCLCK2Freq>
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	e002      	b.n	8000be8 <MCAL_USART_init+0xbc>
	else
		Pclk = MCAL_RCC_GetPCLCK1Freq();
 8000be2:	f7ff ff53 	bl	8000a8c <MCAL_RCC_GetPCLCK1Freq>
 8000be6:	60f8      	str	r0, [r7, #12]
	BRReg = USART_BRR_Register(Pclk,USART_Config->BaudRate);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	011b      	lsls	r3, r3, #4
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf4:	011b      	lsls	r3, r3, #4
 8000bf6:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRReg;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	609a      	str	r2, [r3, #8]

	//enable NVIC for USART IRQ
	if(USART_Config -> IRQ_Enable != USART_IRQ_Enable_NONE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	7b1b      	ldrb	r3, [r3, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d029      	beq.n	8000c5a <MCAL_USART_init+0x12e>
	{

		USARTx->CR1 |= USART_Config->IRQ_Enable;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	68db      	ldr	r3, [r3, #12]
 8000c0a:	683a      	ldr	r2, [r7, #0]
 8000c0c:	7b12      	ldrb	r2, [r2, #12]
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]

		if (USARTx == USART1)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MCAL_USART_init+0x138>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d106      	bne.n	8000c2c <MCAL_USART_init+0x100>
			NVIC_IRQ37_USART1_ENABLE();
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MCAL_USART_init+0x14c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a15      	ldr	r2, [pc, #84]	; (8000c78 <MCAL_USART_init+0x14c>)
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	6013      	str	r3, [r2, #0]
		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_ENABLE();

	}

}
 8000c2a:	e016      	b.n	8000c5a <MCAL_USART_init+0x12e>
		else if (USARTx == USART2)
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MCAL_USART_init+0x144>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d106      	bne.n	8000c44 <MCAL_USART_init+0x118>
			NVIC_IRQ38_USART2_ENABLE();
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MCAL_USART_init+0x14c>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a0f      	ldr	r2, [pc, #60]	; (8000c78 <MCAL_USART_init+0x14c>)
 8000c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c40:	6013      	str	r3, [r2, #0]
}
 8000c42:	e00a      	b.n	8000c5a <MCAL_USART_init+0x12e>
		else if (USARTx == USART3)
 8000c44:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MCAL_USART_init+0x148>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d105      	bne.n	8000c5a <MCAL_USART_init+0x12e>
			NVIC_IRQ39_USART3_ENABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <MCAL_USART_init+0x14c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a09      	ldr	r2, [pc, #36]	; (8000c78 <MCAL_USART_init+0x14c>)
 8000c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c58:	6013      	str	r3, [r2, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000044 	.word	0x20000044
 8000c70:	20000010 	.word	0x20000010
 8000c74:	20000014 	.word	0x20000014
 8000c78:	e000e104 	.word	0xe000e104

08000c7c <MCAL_USART_SendData>:
	}

}

void  MCAL_USART_SendData (USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_Mechanism PollingEn)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	4613      	mov	r3, r2
 8000c88:	71fb      	strb	r3, [r7, #7]
	uint8_t USART_Index = Get_USART_Index(USARTx);
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff ff2a 	bl	8000ae4 <Get_USART_Index>
 8000c90:	4603      	mov	r3, r0
 8000c92:	75fb      	strb	r3, [r7, #23]
	//Bit 7 TXE: Transmit data register empty
	//wait until TXE flag is set
	if (PollingEn == Polling_Enable)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d106      	bne.n	8000ca8 <MCAL_USART_SendData+0x2c>
		while(!(USARTx->SR & 1 << 7));
 8000c9a:	bf00      	nop
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f9      	beq.n	8000c9c <MCAL_USART_SendData+0x20>
	{
		USARTx-> DR = (*pTxBuffer&(uint16_t) 0x01FF);
	}else
	{
		// USART_Payload_Length_8B
		USARTx-> DR = (*pTxBuffer&(uint8_t) 0xFF);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	605a      	str	r2, [r3, #4]
	}
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MCAL_USART_ReceiveData>:

void  MCAL_USART_ReceiveData (USART_TypeDef *USARTx, uint16_t *pTxBuffer,enum Polling_Mechanism PollingEn)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t USART_Index = Get_USART_Index(USARTx);
 8000cca:	68f8      	ldr	r0, [r7, #12]
 8000ccc:	f7ff ff0a 	bl	8000ae4 <Get_USART_Index>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	75fb      	strb	r3, [r7, #23]
	//Bit 5 RXE:  Read data register not empty
	//wait until RXNE flag is set : Received data is ready to be read.
	if (PollingEn == Polling_Enable)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d106      	bne.n	8000ce8 <MCAL_USART_ReceiveData+0x2c>
		while(!(USARTx->SR & 1 << 5));
 8000cda:	bf00      	nop
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d0f9      	beq.n	8000cdc <MCAL_USART_ReceiveData+0x20>
		}

	}else
	{
		//this is 8bit data
		if (Global_USART_Config[USART_Index]->Parity == USART_NONE_Parity )
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <MCAL_USART_ReceiveData+0x64>)
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	7a5b      	ldrb	r3, [r3, #9]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d107      	bne.n	8000d06 <MCAL_USART_ReceiveData+0x4a>
		{
			*((uint16_t*)pTxBuffer) = (USARTx-> DR & (uint8_t)0xFF);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	b29a      	uxth	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	801a      	strh	r2, [r3, #0]
		{
			//parity is used, 7 bits are only the data bits
			*((uint16_t*)pTxBuffer) = (USARTx-> DR & (uint8_t)0x7F);
		}
	}
}
 8000d04:	e007      	b.n	8000d16 <MCAL_USART_ReceiveData+0x5a>
			*((uint16_t*)pTxBuffer) = (USARTx-> DR & (uint8_t)0x7F);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	801a      	strh	r2, [r3, #0]
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000044 	.word	0x20000044

08000d24 <MCAL_USART_GPIO_SetPins>:

void MCAL_USART_GPIO_SetPins (USART_TypeDef *USARTx){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t UART_PinConfig;
	if(USARTx == USART1)
 8000d2c:	4b45      	ldr	r3, [pc, #276]	; (8000e44 <MCAL_USART_GPIO_SetPins+0x120>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	429a      	cmp	r2, r3
 8000d34:	d128      	bne.n	8000d88 <MCAL_USART_GPIO_SetPins+0x64>
	{
		//	USART1_TX  PA9
		UART_PinConfig.GPIO_PINNumber = GPIO_PIN9;
 8000d36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d3a:	81bb      	strh	r3, [r7, #12]
		UART_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	73bb      	strb	r3, [r7, #14]
		UART_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init (GPIOA,&UART_PinConfig);
 8000d44:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <MCAL_USART_GPIO_SetPins+0x124>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f107 020c 	add.w	r2, r7, #12
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fd5a 	bl	8000808 <MCAL_GPIO_init>
		//	USART1_RX  PA10
		UART_PinConfig.GPIO_PINNumber = GPIO_PIN10;
 8000d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d58:	81bb      	strh	r3, [r7, #12]
		UART_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init (GPIOA,&UART_PinConfig);
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	; (8000e48 <MCAL_USART_GPIO_SetPins+0x124>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f107 020c 	add.w	r2, r7, #12
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fd4d 	bl	8000808 <MCAL_GPIO_init>

		if(Global_USART_Config[USART1_INDEX]->HWFlowCTRL == USART_HWFlowCTRL_CTS ||
					Global_USART_Config[USART1_INDEX]->HWFlowCTRL == USART_HWFlowCTRL_CTS_RTS){
			//	USART1_CTS PA11
			UART_PinConfig.GPIO_PINNumber = GPIO_PIN11;
 8000d6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d72:	81bb      	strh	r3, [r7, #12]
			UART_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&UART_PinConfig);
 8000d78:	4b33      	ldr	r3, [pc, #204]	; (8000e48 <MCAL_USART_GPIO_SetPins+0x124>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fd40 	bl	8000808 <MCAL_GPIO_init>
			UART_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
			UART_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
			MCAL_GPIO_init (GPIOA,&UART_PinConfig);
		}
	}
	if(USARTx == USART2)
 8000d88:	4b30      	ldr	r3, [pc, #192]	; (8000e4c <MCAL_USART_GPIO_SetPins+0x128>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d125      	bne.n	8000dde <MCAL_USART_GPIO_SetPins+0xba>
	{
		//	USART2_TX  PA2
		UART_PinConfig.GPIO_PINNumber = GPIO_PIN2;
 8000d92:	2304      	movs	r3, #4
 8000d94:	81bb      	strh	r3, [r7, #12]
		UART_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000d96:	2306      	movs	r3, #6
 8000d98:	73bb      	strb	r3, [r7, #14]
		UART_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init (GPIOA,&UART_PinConfig);
 8000d9e:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <MCAL_USART_GPIO_SetPins+0x124>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f107 020c 	add.w	r2, r7, #12
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fd2d 	bl	8000808 <MCAL_GPIO_init>
		//	USART1_RX  PA3
		UART_PinConfig.GPIO_PINNumber = GPIO_PIN3;
 8000dae:	2308      	movs	r3, #8
 8000db0:	81bb      	strh	r3, [r7, #12]
		UART_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init (GPIOA,&UART_PinConfig);
 8000db6:	4b24      	ldr	r3, [pc, #144]	; (8000e48 <MCAL_USART_GPIO_SetPins+0x124>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f107 020c 	add.w	r2, r7, #12
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fd21 	bl	8000808 <MCAL_GPIO_init>
		if(Global_USART_Config[USART2_INDEX]->HWFlowCTRL == USART_HWFlowCTRL_CTS ||
			Global_USART_Config[USART2_INDEX]->HWFlowCTRL == USART_HWFlowCTRL_CTS_RTS){
			//	USART2_CTS PA0
			UART_PinConfig.GPIO_PINNumber = GPIO_PIN0;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	81bb      	strh	r3, [r7, #12]
			UART_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOA,&UART_PinConfig);
 8000dce:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MCAL_USART_GPIO_SetPins+0x124>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f107 020c 	add.w	r2, r7, #12
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fd15 	bl	8000808 <MCAL_GPIO_init>
			UART_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
			UART_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
			MCAL_GPIO_init (GPIOA,&UART_PinConfig);
		}
	}
	if(USARTx == USART3)
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MCAL_USART_GPIO_SetPins+0x12c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d128      	bne.n	8000e3a <MCAL_USART_GPIO_SetPins+0x116>
	{
		//	USART3_TX  PB10
		UART_PinConfig.GPIO_PINNumber = GPIO_PIN10;
 8000de8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dec:	81bb      	strh	r3, [r7, #12]
		UART_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
 8000dee:	2306      	movs	r3, #6
 8000df0:	73bb      	strb	r3, [r7, #14]
		UART_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init (GPIOB,&UART_PinConfig);
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MCAL_USART_GPIO_SetPins+0x130>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f107 020c 	add.w	r2, r7, #12
 8000dfe:	4611      	mov	r1, r2
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fd01 	bl	8000808 <MCAL_GPIO_init>
		//	USART3_RX  PA11
		UART_PinConfig.GPIO_PINNumber = GPIO_PIN11;
 8000e06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e0a:	81bb      	strh	r3, [r7, #12]
		UART_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_init (GPIOB,&UART_PinConfig);
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MCAL_USART_GPIO_SetPins+0x130>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fcf4 	bl	8000808 <MCAL_GPIO_init>
		if(Global_USART_Config[USART3_INDEX]->HWFlowCTRL == USART_HWFlowCTRL_CTS ||
					Global_USART_Config[USART3_INDEX]->HWFlowCTRL == USART_HWFlowCTRL_CTS_RTS){
			//	USART3_CTS PA13
			UART_PinConfig.GPIO_PINNumber = GPIO_PIN13;
 8000e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e24:	81bb      	strh	r3, [r7, #12]
			UART_PinConfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000e26:	2301      	movs	r3, #1
 8000e28:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_init (GPIOB,&UART_PinConfig);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MCAL_USART_GPIO_SetPins+0x130>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f107 020c 	add.w	r2, r7, #12
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fce7 	bl	8000808 <MCAL_GPIO_init>
			UART_PinConfig.GPIO_Mode = GPIO_Mode_AF_OUT_PP;
			UART_PinConfig.GPIO_Speed = GPIO_Speed_10MHZ;
			MCAL_GPIO_init (GPIOB,&UART_PinConfig);
		}
	}
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000000c 	.word	0x2000000c
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000010 	.word	0x20000010
 8000e50:	20000014 	.word	0x20000014
 8000e54:	20000004 	.word	0x20000004

08000e58 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler (void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART1->SR & 1<<7)
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <USART1_IRQHandler+0x90>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <USART1_IRQHandler+0x1a>
		flag = USART_IRQ_TXE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	e030      	b.n	8000ed4 <USART1_IRQHandler+0x7c>
	//Transmission complete
	else if (USART1->SR & 1<<6){
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <USART1_IRQHandler+0x90>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d007      	beq.n	8000e90 <USART1_IRQHandler+0x38>
		flag = USART_IRQ_TC;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
		USART1->SR = ~(1<<6);
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <USART1_IRQHandler+0x90>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	e021      	b.n	8000ed4 <USART1_IRQHandler+0x7c>
	}
	//received data ready to be read
	else if (USART1->SR & 1<<5){
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <USART1_IRQHandler+0x90>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0320 	and.w	r3, r3, #32
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d007      	beq.n	8000eae <USART1_IRQHandler+0x56>
		flag = USART_IRQ_RXNE;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	71fb      	strb	r3, [r7, #7]
		USART1->SR = ~(1<<5);
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <USART1_IRQHandler+0x90>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f06f 0220 	mvn.w	r2, #32
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	e012      	b.n	8000ed4 <USART1_IRQHandler+0x7c>
	}
	//overrun error detected
	else if (USART1->SR & 1<<3){
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <USART1_IRQHandler+0x90>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d002      	beq.n	8000ec2 <USART1_IRQHandler+0x6a>
		flag = USART_IRQ_ORE;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	e008      	b.n	8000ed4 <USART1_IRQHandler+0x7c>
	}
	//Parity error
	else if (USART1->SR & 1<<0){
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <USART1_IRQHandler+0x90>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <USART1_IRQHandler+0x7c>
		flag = USART_IRQ_PE;
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	71fb      	strb	r3, [r7, #7]
	}

	Global_USART_Config[USART1_INDEX]->P_IRQ_CallBack(flag);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <USART1_IRQHandler+0x94>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	691b      	ldr	r3, [r3, #16]
 8000eda:	79fa      	ldrb	r2, [r7, #7]
 8000edc:	4610      	mov	r0, r2
 8000ede:	4798      	blx	r3

}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	2000000c 	.word	0x2000000c
 8000eec:	20000044 	.word	0x20000044

08000ef0 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART2->SR & 1<<7)
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <USART2_IRQHandler+0x90>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d002      	beq.n	8000f0a <USART2_IRQHandler+0x1a>
		flag = USART_IRQ_TXE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	71fb      	strb	r3, [r7, #7]
 8000f08:	e030      	b.n	8000f6c <USART2_IRQHandler+0x7c>
	//Transmission complete
	else if (USART2->SR & 1<<6){
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <USART2_IRQHandler+0x90>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <USART2_IRQHandler+0x38>
		flag = USART_IRQ_TC;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	71fb      	strb	r3, [r7, #7]
		USART2 -> SR = ~(1<<6);
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <USART2_IRQHandler+0x90>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e021      	b.n	8000f6c <USART2_IRQHandler+0x7c>
	}
	//received data ready to be read
	else if (USART2->SR & 1<<5){
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <USART2_IRQHandler+0x90>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 0320 	and.w	r3, r3, #32
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <USART2_IRQHandler+0x56>
		flag = USART_IRQ_RXNE;
 8000f36:	2302      	movs	r3, #2
 8000f38:	71fb      	strb	r3, [r7, #7]
		USART2 -> SR = ~(1<<5);
 8000f3a:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <USART2_IRQHandler+0x90>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f06f 0220 	mvn.w	r2, #32
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	e012      	b.n	8000f6c <USART2_IRQHandler+0x7c>
	}
	//overrun error detected
	else if (USART2->SR & 1<<3){
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <USART2_IRQHandler+0x90>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <USART2_IRQHandler+0x6a>
		flag = USART_IRQ_ORE;
 8000f54:	2303      	movs	r3, #3
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	e008      	b.n	8000f6c <USART2_IRQHandler+0x7c>
	}
	//Parity error
	else if (USART2->SR & 1<<0){
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <USART2_IRQHandler+0x90>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <USART2_IRQHandler+0x7c>
		flag = USART_IRQ_PE;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	71fb      	strb	r3, [r7, #7]
	}
	Global_USART_Config[USART2_INDEX]->P_IRQ_CallBack(flag);
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <USART2_IRQHandler+0x94>)
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	79fa      	ldrb	r2, [r7, #7]
 8000f74:	4610      	mov	r0, r2
 8000f76:	4798      	blx	r3

}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000010 	.word	0x20000010
 8000f84:	20000044 	.word	0x20000044

08000f88 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART3->SR &1<<7)
 8000f8e:	4b22      	ldr	r3, [pc, #136]	; (8001018 <USART3_IRQHandler+0x90>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <USART3_IRQHandler+0x1a>
		flag = USART_IRQ_TXE;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	e030      	b.n	8001004 <USART3_IRQHandler+0x7c>
	//Transmission complete
	else if (USART3->SR & 1<<6){
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <USART3_IRQHandler+0x90>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d007      	beq.n	8000fc0 <USART3_IRQHandler+0x38>
		flag = USART_IRQ_TC;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	71fb      	strb	r3, [r7, #7]
		USART3 -> SR = ~(1<<6);
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <USART3_IRQHandler+0x90>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	e021      	b.n	8001004 <USART3_IRQHandler+0x7c>
	}
	//received data ready to be read
	else if (USART3->SR & 1<<5){
 8000fc0:	4b15      	ldr	r3, [pc, #84]	; (8001018 <USART3_IRQHandler+0x90>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0320 	and.w	r3, r3, #32
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <USART3_IRQHandler+0x56>
		flag = USART_IRQ_RXNE;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	71fb      	strb	r3, [r7, #7]
		USART3 -> SR = ~(1<<5);
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <USART3_IRQHandler+0x90>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f06f 0220 	mvn.w	r2, #32
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	e012      	b.n	8001004 <USART3_IRQHandler+0x7c>
	}
	//overrun error detected
	else if (USART3->SR & 1<<3){
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <USART3_IRQHandler+0x90>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <USART3_IRQHandler+0x6a>
		flag = USART_IRQ_ORE;
 8000fec:	2303      	movs	r3, #3
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	e008      	b.n	8001004 <USART3_IRQHandler+0x7c>
	}
	//Parity error
	else if (USART3->SR & 1<<0){
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <USART3_IRQHandler+0x90>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <USART3_IRQHandler+0x7c>
		flag = USART_IRQ_PE;
 8001000:	2304      	movs	r3, #4
 8001002:	71fb      	strb	r3, [r7, #7]
	}

	Global_USART_Config[USART3_INDEX]->P_IRQ_CallBack(flag);
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <USART3_IRQHandler+0x94>)
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	79fa      	ldrb	r2, [r7, #7]
 800100c:	4610      	mov	r0, r2
 800100e:	4798      	blx	r3

}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20000014 	.word	0x20000014
 800101c:	20000044 	.word	0x20000044

08001020 <clock_init>:
	}
}


void clock_init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
	//enable clock for GPIOA
	RCC_GPIOA_CLOCK_EN();
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <clock_init+0x3c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	699a      	ldr	r2, [r3, #24]
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <clock_init+0x3c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0204 	orr.w	r2, r2, #4
 8001032:	619a      	str	r2, [r3, #24]
	//enable clock for GPIOB
	RCC_GPIOB_CLOCK_EN();
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <clock_init+0x3c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	699a      	ldr	r2, [r3, #24]
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <clock_init+0x3c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0208 	orr.w	r2, r2, #8
 8001042:	619a      	str	r2, [r3, #24]
	//enable clock for Alternative IO
	RCC_AFIO_CLOCK_EN();
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <clock_init+0x3c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	699a      	ldr	r2, [r3, #24]
 800104a:	4b04      	ldr	r3, [pc, #16]	; (800105c <clock_init+0x3c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	619a      	str	r2, [r3, #24]

}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000008 	.word	0x20000008

08001060 <USART_IRQ_CallBack>:
 * 		CallBack Functions
 * =====================================
 */

void USART_IRQ_CallBack (void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

	MCAL_USART_ReceiveData(USART1, &ch, Polling_Disable);
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <USART_IRQ_CallBack+0x50>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2200      	movs	r2, #0
 800106a:	4912      	ldr	r1, [pc, #72]	; (80010b4 <USART_IRQ_CallBack+0x54>)
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fe25 	bl	8000cbc <MCAL_USART_ReceiveData>
	MCAL_USART_SendData(USART1, &ch, Polling_Enable);
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <USART_IRQ_CallBack+0x50>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2201      	movs	r2, #1
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <USART_IRQ_CallBack+0x54>)
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fdfe 	bl	8000c7c <MCAL_USART_SendData>

	//send Data to SPI Ports
	MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN4,GPIO_PIN_RESET);		//NSS LOW
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <USART_IRQ_CallBack+0x58>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	2110      	movs	r1, #16
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fcaf 	bl	80009ec <MCAL_GPIO_WritePIN>
	MCAL_SPI_TX_RX(SPI1, &ch, Polling_Enable);
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <USART_IRQ_CallBack+0x5c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2201      	movs	r2, #1
 8001094:	4907      	ldr	r1, [pc, #28]	; (80010b4 <USART_IRQ_CallBack+0x54>)
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff f926 	bl	80002e8 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN4,GPIO_PIN_SET);		//NSS HIGH
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <USART_IRQ_CallBack+0x58>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	2110      	movs	r1, #16
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fca1 	bl	80009ec <MCAL_GPIO_WritePIN>

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000050 	.word	0x20000050
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000018 	.word	0x20000018

080010c0 <UART_Config_Init>:
 * =====================================
 * 		Configuration Functions
 * =====================================
 */

void UART_Config_Init(){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0


	uartCFG.USART_Mode = USART_MODE_TX_RX;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <UART_Config_Init+0x50>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	701a      	strb	r2, [r3, #0]

	uartCFG.BaudRate = USART_BaudRate_115200;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <UART_Config_Init+0x50>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]

	uartCFG.Payload_Length = USART_Payload_Length_8B ;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <UART_Config_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	721a      	strb	r2, [r3, #8]

	uartCFG.Parity = USART_NONE_Parity;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <UART_Config_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	725a      	strb	r2, [r3, #9]

	uartCFG.StopBits = USART_1_StopBit;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <UART_Config_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	729a      	strb	r2, [r3, #10]

	uartCFG.HWFlowCTRL = USART_HWFlowCTRL_NONE;
 80010e4:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <UART_Config_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	72da      	strb	r2, [r3, #11]

	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNE;
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <UART_Config_Init+0x50>)
 80010ec:	2220      	movs	r2, #32
 80010ee:	731a      	strb	r2, [r3, #12]

	uartCFG.P_IRQ_CallBack = USART_IRQ_CallBack;
 80010f0:	4b07      	ldr	r3, [pc, #28]	; (8001110 <UART_Config_Init+0x50>)
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <UART_Config_Init+0x54>)
 80010f4:	611a      	str	r2, [r3, #16]

	MCAL_USART_init(USART1, &uartCFG);
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <UART_Config_Init+0x58>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4905      	ldr	r1, [pc, #20]	; (8001110 <UART_Config_Init+0x50>)
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fd15 	bl	8000b2c <MCAL_USART_init>
	MCAL_USART_GPIO_SetPins(USART1);
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <UART_Config_Init+0x58>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fe0c 	bl	8000d24 <MCAL_USART_GPIO_SetPins>

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000054 	.word	0x20000054
 8001114:	08001061 	.word	0x08001061
 8001118:	2000000c 	.word	0x2000000c

0800111c <SPI_Config_Init>:

void SPI_Config_Init(){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0

	SPI_CFG.SPI_Mode = SPI_Mode_MASTER;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <SPI_Config_Init+0x7c>)
 8001122:	2204      	movs	r2, #4
 8001124:	801a      	strh	r2, [r3, #0]

	SPI_CFG.Frame_Format = Frame_Format_MSB_FIRST;
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <SPI_Config_Init+0x7c>)
 8001128:	2200      	movs	r2, #0
 800112a:	805a      	strh	r2, [r3, #2]

	SPI_CFG.Frame_Size = Frame_Size_8BIT ;
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <SPI_Config_Init+0x7c>)
 800112e:	2200      	movs	r2, #0
 8001130:	809a      	strh	r2, [r3, #4]

	SPI_CFG.Communication_Mode = Data_Mode_UNIDI_Full_Duplex;
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <SPI_Config_Init+0x7c>)
 8001134:	2200      	movs	r2, #0
 8001136:	80da      	strh	r2, [r3, #6]

	SPI_CFG.Clock_Polarity = Clock_Polarity_Idle_HIGH;
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <SPI_Config_Init+0x7c>)
 800113a:	2202      	movs	r2, #2
 800113c:	811a      	strh	r2, [r3, #8]

	SPI_CFG.Clock_Phase = Clock_Phase_Second_Capture;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <SPI_Config_Init+0x7c>)
 8001140:	2201      	movs	r2, #1
 8001142:	815a      	strh	r2, [r3, #10]

	SPI_CFG.NSS_Management = NSS_Management_SW_SSI_SET;
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <SPI_Config_Init+0x7c>)
 8001146:	f44f 7240 	mov.w	r2, #768	; 0x300
 800114a:	819a      	strh	r2, [r3, #12]

	SPI_CFG.BaudRate_Prescalar = BaudRate_Prescalar_PLCK_Divide_BY_8;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <SPI_Config_Init+0x7c>)
 800114e:	2210      	movs	r2, #16
 8001150:	81da      	strh	r2, [r3, #14]

	SPI_CFG.IRQ_Enable = SPI_IRQ_ENABLE_NONE;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <SPI_Config_Init+0x7c>)
 8001154:	f64f 721f 	movw	r2, #65311	; 0xff1f
 8001158:	821a      	strh	r2, [r3, #16]

	SPI_CFG.P_IRQ_CallBack = NULL ;
 800115a:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <SPI_Config_Init+0x7c>)
 800115c:	2200      	movs	r2, #0
 800115e:	615a      	str	r2, [r3, #20]


	MCAL_SPI_Init(SPI1, &SPI_CFG);
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <SPI_Config_Init+0x80>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	490c      	ldr	r1, [pc, #48]	; (8001198 <SPI_Config_Init+0x7c>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f802 	bl	8000170 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800116c:	4b0b      	ldr	r3, [pc, #44]	; (800119c <SPI_Config_Init+0x80>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f8e3 	bl	800033c <MCAL_SPI_GPIO_Set_Pins>
	//Configure GPIOA Pin 4 with NSS of SPI1
	MCAL_GPIO_SetPIN(GPIOA, GPIO_PIN4, GPIO_Mode_OUT_PP, GPIO_Speed_10MHZ);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <SPI_Config_Init+0x84>)
 8001178:	6818      	ldr	r0, [r3, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2204      	movs	r2, #4
 800117e:	2110      	movs	r1, #16
 8001180:	f7ff fbbf 	bl	8000902 <MCAL_GPIO_SetPIN>
	MCAL_GPIO_WritePIN(GPIOA, GPIO_PIN4, GPIO_PIN_SET);		//NSS HIGH
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SPI_Config_Init+0x84>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2201      	movs	r2, #1
 800118a:	2110      	movs	r1, #16
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fc2d 	bl	80009ec <MCAL_GPIO_WritePIN>

}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000068 	.word	0x20000068
 800119c:	20000018 	.word	0x20000018
 80011a0:	20000000 	.word	0x20000000

080011a4 <main>:



int main(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	clock_init();
 80011a8:	f7ff ff3a 	bl	8001020 <clock_init>

	UART_Config_Init();
 80011ac:	f7ff ff88 	bl	80010c0 <UART_Config_Init>


	SPI_Config_Init();
 80011b0:	f7ff ffb4 	bl	800111c <SPI_Config_Init>




    /* Loop forever */
	for(;;);
 80011b4:	e7fe      	b.n	80011b4 <main+0x10>
	...

080011b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011e6:	f000 f811 	bl	800120c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ea:	f7ff ffdb 	bl	80011a4 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   r0, =_estack
 80011f0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80011fc:	0800128c 	.word	0x0800128c
  ldr r2, =_sbss
 8001200:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001204:	20000080 	.word	0x20000080

08001208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_2_IRQHandler>
	...

0800120c <__libc_init_array>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	2600      	movs	r6, #0
 8001210:	4d0c      	ldr	r5, [pc, #48]	; (8001244 <__libc_init_array+0x38>)
 8001212:	4c0d      	ldr	r4, [pc, #52]	; (8001248 <__libc_init_array+0x3c>)
 8001214:	1b64      	subs	r4, r4, r5
 8001216:	10a4      	asrs	r4, r4, #2
 8001218:	42a6      	cmp	r6, r4
 800121a:	d109      	bne.n	8001230 <__libc_init_array+0x24>
 800121c:	f000 f81a 	bl	8001254 <_init>
 8001220:	2600      	movs	r6, #0
 8001222:	4d0a      	ldr	r5, [pc, #40]	; (800124c <__libc_init_array+0x40>)
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <__libc_init_array+0x44>)
 8001226:	1b64      	subs	r4, r4, r5
 8001228:	10a4      	asrs	r4, r4, #2
 800122a:	42a6      	cmp	r6, r4
 800122c:	d105      	bne.n	800123a <__libc_init_array+0x2e>
 800122e:	bd70      	pop	{r4, r5, r6, pc}
 8001230:	f855 3b04 	ldr.w	r3, [r5], #4
 8001234:	4798      	blx	r3
 8001236:	3601      	adds	r6, #1
 8001238:	e7ee      	b.n	8001218 <__libc_init_array+0xc>
 800123a:	f855 3b04 	ldr.w	r3, [r5], #4
 800123e:	4798      	blx	r3
 8001240:	3601      	adds	r6, #1
 8001242:	e7f2      	b.n	800122a <__libc_init_array+0x1e>
 8001244:	08001284 	.word	0x08001284
 8001248:	08001284 	.word	0x08001284
 800124c:	08001284 	.word	0x08001284
 8001250:	08001288 	.word	0x08001288

08001254 <_init>:
 8001254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001256:	bf00      	nop
 8001258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800125a:	bc08      	pop	{r3}
 800125c:	469e      	mov	lr, r3
 800125e:	4770      	bx	lr

08001260 <_fini>:
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	bf00      	nop
 8001264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001266:	bc08      	pop	{r3}
 8001268:	469e      	mov	lr, r3
 800126a:	4770      	bx	lr
