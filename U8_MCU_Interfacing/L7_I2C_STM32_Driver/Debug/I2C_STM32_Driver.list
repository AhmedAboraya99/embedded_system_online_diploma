
I2C_STM32_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000110c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800123c  0800123c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800125c  0800125c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800125c  0800125c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800125c  0800125c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800125c  0800125c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001260  08001260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001264  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000024  08001288  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08001288  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002141  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000411  00000000  00000000  0002218e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000105e  00000000  00000000  0002259f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00023600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c0  00000000  00000000  000237d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001fcb  00000000  00000000  00023998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ae0  00000000  00000000  00025963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a130  00000000  00000000  00027443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00031573  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007b4  00000000  00000000  000315c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08001224 	.word	0x08001224

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08001224 	.word	0x08001224

08000170 <Get_CRLH_Position>:

#include "STM32F103_GPIO_Driver.h"

//assisted functions
uint8_t Get_CRLH_Position(uint16_t PINNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (PINNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000180:	f000 80a5 	beq.w	80002ce <Get_CRLH_Position+0x15e>
 8000184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000188:	f300 80a3 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 800018c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000190:	f000 809b 	beq.w	80002ca <Get_CRLH_Position+0x15a>
 8000194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000198:	f300 809b 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 800019c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001a0:	f000 8091 	beq.w	80002c6 <Get_CRLH_Position+0x156>
 80001a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001a8:	f300 8093 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001b0:	f000 8087 	beq.w	80002c2 <Get_CRLH_Position+0x152>
 80001b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001b8:	f300 808b 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001c0:	d07d      	beq.n	80002be <Get_CRLH_Position+0x14e>
 80001c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001c6:	f300 8084 	bgt.w	80002d2 <Get_CRLH_Position+0x162>
 80001ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001ce:	d074      	beq.n	80002ba <Get_CRLH_Position+0x14a>
 80001d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001d4:	dc7d      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001da:	d06c      	beq.n	80002b6 <Get_CRLH_Position+0x146>
 80001dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001e0:	dc77      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001e6:	d064      	beq.n	80002b2 <Get_CRLH_Position+0x142>
 80001e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001ec:	dc71      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001ee:	2b80      	cmp	r3, #128	; 0x80
 80001f0:	d05d      	beq.n	80002ae <Get_CRLH_Position+0x13e>
 80001f2:	2b80      	cmp	r3, #128	; 0x80
 80001f4:	dc6d      	bgt.n	80002d2 <Get_CRLH_Position+0x162>
 80001f6:	2b20      	cmp	r3, #32
 80001f8:	dc48      	bgt.n	800028c <Get_CRLH_Position+0x11c>
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	dd69      	ble.n	80002d2 <Get_CRLH_Position+0x162>
 80001fe:	3b01      	subs	r3, #1
 8000200:	2b1f      	cmp	r3, #31
 8000202:	d866      	bhi.n	80002d2 <Get_CRLH_Position+0x162>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <Get_CRLH_Position+0x9c>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	08000293 	.word	0x08000293
 8000210:	08000297 	.word	0x08000297
 8000214:	080002d3 	.word	0x080002d3
 8000218:	0800029b 	.word	0x0800029b
 800021c:	080002d3 	.word	0x080002d3
 8000220:	080002d3 	.word	0x080002d3
 8000224:	080002d3 	.word	0x080002d3
 8000228:	0800029f 	.word	0x0800029f
 800022c:	080002d3 	.word	0x080002d3
 8000230:	080002d3 	.word	0x080002d3
 8000234:	080002d3 	.word	0x080002d3
 8000238:	080002d3 	.word	0x080002d3
 800023c:	080002d3 	.word	0x080002d3
 8000240:	080002d3 	.word	0x080002d3
 8000244:	080002d3 	.word	0x080002d3
 8000248:	080002a3 	.word	0x080002a3
 800024c:	080002d3 	.word	0x080002d3
 8000250:	080002d3 	.word	0x080002d3
 8000254:	080002d3 	.word	0x080002d3
 8000258:	080002d3 	.word	0x080002d3
 800025c:	080002d3 	.word	0x080002d3
 8000260:	080002d3 	.word	0x080002d3
 8000264:	080002d3 	.word	0x080002d3
 8000268:	080002d3 	.word	0x080002d3
 800026c:	080002d3 	.word	0x080002d3
 8000270:	080002d3 	.word	0x080002d3
 8000274:	080002d3 	.word	0x080002d3
 8000278:	080002d3 	.word	0x080002d3
 800027c:	080002d3 	.word	0x080002d3
 8000280:	080002d3 	.word	0x080002d3
 8000284:	080002d3 	.word	0x080002d3
 8000288:	080002a7 	.word	0x080002a7
 800028c:	2b40      	cmp	r3, #64	; 0x40
 800028e:	d00c      	beq.n	80002aa <Get_CRLH_Position+0x13a>
 8000290:	e01f      	b.n	80002d2 <Get_CRLH_Position+0x162>
	{
	//CRL
	case GPIO_PIN0:
		return 0;
 8000292:	2300      	movs	r3, #0
 8000294:	e01e      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN1:
		return 4;
 8000296:	2304      	movs	r3, #4
 8000298:	e01c      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN2:
		return 8;
 800029a:	2308      	movs	r3, #8
 800029c:	e01a      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN3:
		return 12;
 800029e:	230c      	movs	r3, #12
 80002a0:	e018      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN4:
		return 16;
 80002a2:	2310      	movs	r3, #16
 80002a4:	e016      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN5:
		return 20;
 80002a6:	2314      	movs	r3, #20
 80002a8:	e014      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN6:
		return 24;
 80002aa:	2318      	movs	r3, #24
 80002ac:	e012      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN7:
		return 28;
 80002ae:	231c      	movs	r3, #28
 80002b0:	e010      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;

	//CRH
	case GPIO_PIN8:
		return 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	e00e      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN9:
		return 4;
 80002b6:	2304      	movs	r3, #4
 80002b8:	e00c      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN10:
		return 8;
 80002ba:	2308      	movs	r3, #8
 80002bc:	e00a      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN11:
		return 12;
 80002be:	230c      	movs	r3, #12
 80002c0:	e008      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN12:
		return 16;
 80002c2:	2310      	movs	r3, #16
 80002c4:	e006      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN13:
		return 20;
 80002c6:	2314      	movs	r3, #20
 80002c8:	e004      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN14:
		return 24;
 80002ca:	2318      	movs	r3, #24
 80002cc:	e002      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN15:
		return 28;
 80002ce:	231c      	movs	r3, #28
 80002d0:	e000      	b.n	80002d4 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80002d2:	2300      	movs	r3, #0
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	bc80      	pop	{r7}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <MCAL_GPIO_init>:
 * 				 the configuration info for specified GPIO
* @retval -
* Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig){
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]

	volatile uint32_t *Config_Reg = NULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
	uint8_t PIN = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) configure pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  configure pins 8 -> 15
	Config_Reg = (PINConfig->GPIO_PINNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	2bff      	cmp	r3, #255	; 0xff
 80002f8:	d801      	bhi.n	80002fe <MCAL_GPIO_init+0x1e>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	e001      	b.n	8000302 <MCAL_GPIO_init+0x22>
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3304      	adds	r3, #4
 8000302:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] & MODE[1:0]
	(*Config_Reg) &= ~(0x0F << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	881b      	ldrh	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f7ff ff31 	bl	8000170 <Get_CRLH_Position>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	230f      	movs	r3, #15
 8000314:	4093      	lsls	r3, r2
 8000316:	43da      	mvns	r2, r3
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	401a      	ands	r2, r3
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	601a      	str	r2, [r3, #0]
	// GPIO PIN mode is output
	if ((PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP))
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	2b07      	cmp	r3, #7
 8000328:	d00b      	beq.n	8000342 <MCAL_GPIO_init+0x62>
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	789b      	ldrb	r3, [r3, #2]
 800032e:	2b06      	cmp	r3, #6
 8000330:	d007      	beq.n	8000342 <MCAL_GPIO_init+0x62>
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	789b      	ldrb	r3, [r3, #2]
 8000336:	2b05      	cmp	r3, #5
 8000338:	d003      	beq.n	8000342 <MCAL_GPIO_init+0x62>
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	789b      	ldrb	r3, [r3, #2]
 800033e:	2b04      	cmp	r3, #4
 8000340:	d10e      	bne.n	8000360 <MCAL_GPIO_init+0x80>
	{
		PIN = (((PINConfig -> GPIO_Mode - 4 )<< 2 ) | (PINConfig -> GPIO_Speed )) & 0x0F;
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	789b      	ldrb	r3, [r3, #2]
 8000346:	3b04      	subs	r3, #4
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	b25a      	sxtb	r2, r3
 800034c:	683b      	ldr	r3, [r7, #0]
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	b25b      	sxtb	r3, r3
 8000352:	4313      	orrs	r3, r2
 8000354:	b25b      	sxtb	r3, r3
 8000356:	b2db      	uxtb	r3, r3
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	73fb      	strb	r3, [r7, #15]
 800035e:	e02a      	b.n	80003b6 <MCAL_GPIO_init+0xd6>
	}

	else {
		//GPIO PIN Mode is input / Analog
		if ((PINConfig->GPIO_Mode == GPIO_Mode_IN_Float) ||  (PINConfig->GPIO_Mode == GPIO_Mode_Analog))
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	789b      	ldrb	r3, [r3, #2]
 8000364:	2b01      	cmp	r3, #1
 8000366:	d003      	beq.n	8000370 <MCAL_GPIO_init+0x90>
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	789b      	ldrb	r3, [r3, #2]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d107      	bne.n	8000380 <MCAL_GPIO_init+0xa0>
			{
				PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	789b      	ldrb	r3, [r3, #2]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	b2db      	uxtb	r3, r3
 8000378:	f003 030f 	and.w	r3, r3, #15
 800037c:	73fb      	strb	r3, [r7, #15]
 800037e:	e01a      	b.n	80003b6 <MCAL_GPIO_init+0xd6>
			}
		else{
			PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	789b      	ldrb	r3, [r3, #2]
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f003 030f 	and.w	r3, r3, #15
 800038c:	73fb      	strb	r3, [r7, #15]

			if (PINConfig -> GPIO_Mode == GPIO_Mode_IN_PU ){
 800038e:	683b      	ldr	r3, [r7, #0]
 8000390:	789b      	ldrb	r3, [r3, #2]
 8000392:	2b02      	cmp	r3, #2
 8000394:	d107      	bne.n	80003a6 <MCAL_GPIO_init+0xc6>
				//ODR = 1 INPUT Pull Up
				GPIOx -> ODR |= PINConfig -> GPIO_PINNumber;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	68db      	ldr	r3, [r3, #12]
 800039a:	683a      	ldr	r2, [r7, #0]
 800039c:	8812      	ldrh	r2, [r2, #0]
 800039e:	431a      	orrs	r2, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	60da      	str	r2, [r3, #12]
 80003a4:	e007      	b.n	80003b6 <MCAL_GPIO_init+0xd6>
			}
			else{
				//ODR = 0 INPUT Pull Down
				GPIOx -> ODR &= ~(PINConfig -> GPIO_PINNumber);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	683a      	ldr	r2, [r7, #0]
 80003ac:	8812      	ldrh	r2, [r2, #0]
 80003ae:	43d2      	mvns	r2, r2
 80003b0:	401a      	ands	r2, r3
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on CRL or CRH
	(*Config_Reg) |= (PIN << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 80003b6:	7bfc      	ldrb	r4, [r7, #15]
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	881b      	ldrh	r3, [r3, #0]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff fed7 	bl	8000170 <Get_CRLH_Position>
 80003c2:	4603      	mov	r3, r0
 80003c4:	fa04 f203 	lsl.w	r2, r4, r3
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	431a      	orrs	r2, r3
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	601a      	str	r2, [r3, #0]
}
 80003d2:	bf00      	nop
 80003d4:	3714      	adds	r7, #20
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd90      	pop	{r4, r7, pc}
	...

080003dc <SPI1_IRQHandler>:
	}
}

//ISR
void SPI1_IRQHandler (void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b082      	sub	sp, #8
 80003e0:	af00      	add	r7, sp, #0
	struct SPI_IRQ_Src irq_src;
	irq_src.SPI_TXE = ((SPI1->SPI_SR & (1<<1)) >> 1);
 80003e2:	4b14      	ldr	r3, [pc, #80]	; (8000434 <SPI1_IRQHandler+0x58>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	085b      	lsrs	r3, r3, #1
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	793b      	ldrb	r3, [r7, #4]
 80003f2:	f362 0300 	bfi	r3, r2, #0, #1
 80003f6:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI1->SPI_SR & (1<<0)) >> 0);
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <SPI1_IRQHandler+0x58>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	b2da      	uxtb	r2, r3
 8000404:	793b      	ldrb	r3, [r7, #4]
 8000406:	f362 0341 	bfi	r3, r2, #1, #1
 800040a:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERRI = ((SPI1->SPI_SR & (1<<4)) >> 4);
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <SPI1_IRQHandler+0x58>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	091b      	lsrs	r3, r3, #4
 8000414:	f003 0301 	and.w	r3, r3, #1
 8000418:	b2da      	uxtb	r2, r3
 800041a:	793b      	ldrb	r3, [r7, #4]
 800041c:	f362 0382 	bfi	r3, r2, #2, #1
 8000420:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI1_INDEX]->P_IRQ_CallBack(irq_src);
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SPI1_IRQHandler+0x5c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	695b      	ldr	r3, [r3, #20]
 8000428:	7938      	ldrb	r0, [r7, #4]
 800042a:	4798      	blx	r3
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000014 	.word	0x20000014
 8000438:	20000040 	.word	0x20000040

0800043c <SPI2_IRQHandler>:

void SPI2_IRQHandler()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
	struct SPI_IRQ_Src irq_src;
	irq_src.SPI_TXE = ((SPI2->SPI_SR & (1<<1)) >> 1);
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <SPI2_IRQHandler+0x58>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	085b      	lsrs	r3, r3, #1
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	b2da      	uxtb	r2, r3
 8000450:	793b      	ldrb	r3, [r7, #4]
 8000452:	f362 0300 	bfi	r3, r2, #0, #1
 8000456:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_RXNE = ((SPI2->SPI_SR & (1<<0)) >> 0);
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <SPI2_IRQHandler+0x58>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	689b      	ldr	r3, [r3, #8]
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	b2da      	uxtb	r2, r3
 8000464:	793b      	ldrb	r3, [r7, #4]
 8000466:	f362 0341 	bfi	r3, r2, #1, #1
 800046a:	713b      	strb	r3, [r7, #4]
	irq_src.SPI_ERRI = ((SPI2->SPI_SR & (1<<4)) >> 4);
 800046c:	4b09      	ldr	r3, [pc, #36]	; (8000494 <SPI2_IRQHandler+0x58>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	091b      	lsrs	r3, r3, #4
 8000474:	f003 0301 	and.w	r3, r3, #1
 8000478:	b2da      	uxtb	r2, r3
 800047a:	793b      	ldrb	r3, [r7, #4]
 800047c:	f362 0382 	bfi	r3, r2, #2, #1
 8000480:	713b      	strb	r3, [r7, #4]
	Global_SPI_Config[SPI2_INDEX]->P_IRQ_CallBack(irq_src);
 8000482:	4b05      	ldr	r3, [pc, #20]	; (8000498 <SPI2_IRQHandler+0x5c>)
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	7938      	ldrb	r0, [r7, #4]
 800048a:	4798      	blx	r3
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	20000018 	.word	0x20000018
 8000498:	20000040 	.word	0x20000040

0800049c <MCAL_RCC_GetSYS_CLCKFreq>:

/**================================================================
* @Fn- 		MCAL_RCC_GetSYS_CLCKFreq
* @brief 	-drive the system clock (SYSCLK)
*/
uint32_t MCAL_RCC_GetSYS_CLCKFreq(void){
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
//Set and cleared by hardware to indicate which clock source is used as system clock.
//00: HSI oscillator used as system clock
//01: HSE oscillator used as system clock
//10: PLL used as system clock
//11: Not applicable
	switch (RCC->CFGR >>2 & 0b11)
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <MCAL_RCC_GetSYS_CLCKFreq+0x38>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	089b      	lsrs	r3, r3, #2
 80004a8:	f003 0303 	and.w	r3, r3, #3
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d00a      	beq.n	80004c6 <MCAL_RCC_GetSYS_CLCKFreq+0x2a>
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d80a      	bhi.n	80004ca <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d002      	beq.n	80004be <MCAL_RCC_GetSYS_CLCKFreq+0x22>
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d002      	beq.n	80004c2 <MCAL_RCC_GetSYS_CLCKFreq+0x26>
 80004bc:	e005      	b.n	80004ca <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
	{
	case 0:
		return HSI_RC_Clk;
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MCAL_RCC_GetSYS_CLCKFreq+0x3c>)
 80004c0:	e003      	b.n	80004ca <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
		break;
	case 1:
		return HSE_Clock;
 80004c2:	4b06      	ldr	r3, [pc, #24]	; (80004dc <MCAL_RCC_GetSYS_CLCKFreq+0x40>)
 80004c4:	e001      	b.n	80004ca <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
		break;
	case 2:
		return 16000000;
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <MCAL_RCC_GetSYS_CLCKFreq+0x40>)
 80004c8:	e7ff      	b.n	80004ca <MCAL_RCC_GetSYS_CLCKFreq+0x2e>
		break;
	}

}
 80004ca:	4618      	mov	r0, r3
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000004 	.word	0x20000004
 80004d8:	007a1200 	.word	0x007a1200
 80004dc:	00f42400 	.word	0x00f42400

080004e0 <MCAL_RCC_GetHCLCKFreq>:

/**================================================================
 * @Fn			-MCAL_RCC_GetHCLCKFreq
 * @brief 		-Get HCLK source
 */
uint32_t MCAL_RCC_GetHCLCKFreq(void){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetSYS_CLCKFreq()>> AHBPrescTable [(RCC->CFGR >>4)& 0xF]);
 80004e4:	f7ff ffda 	bl	800049c <MCAL_RCC_GetSYS_CLCKFreq>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b06      	ldr	r3, [pc, #24]	; (8000504 <MCAL_RCC_GetHCLCKFreq+0x24>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	091b      	lsrs	r3, r3, #4
 80004f2:	f003 030f 	and.w	r3, r3, #15
 80004f6:	4904      	ldr	r1, [pc, #16]	; (8000508 <MCAL_RCC_GetHCLCKFreq+0x28>)
 80004f8:	5ccb      	ldrb	r3, [r1, r3]
 80004fa:	fa22 f303 	lsr.w	r3, r2, r3
}
 80004fe:	4618      	mov	r0, r3
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000004 	.word	0x20000004
 8000508:	0800124c 	.word	0x0800124c

0800050c <MCAL_RCC_GetPCLCK1Freq>:

/**================================================================
 * @Fn			-MCAL_RCC_GetPCLCK1Freq
 * @brief 		-compute PCLK1 frequency
 */
uint32_t MCAL_RCC_GetPCLCK1Freq(void){
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	return (MCAL_RCC_GetHCLCKFreq()>> APBPrescTable[(RCC->CFGR >>8)& 0b111]);
 8000510:	f7ff ffe6 	bl	80004e0 <MCAL_RCC_GetHCLCKFreq>
 8000514:	4602      	mov	r2, r0
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MCAL_RCC_GetPCLCK1Freq+0x24>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	0a1b      	lsrs	r3, r3, #8
 800051e:	f003 0307 	and.w	r3, r3, #7
 8000522:	4904      	ldr	r1, [pc, #16]	; (8000534 <MCAL_RCC_GetPCLCK1Freq+0x28>)
 8000524:	5ccb      	ldrb	r3, [r1, r3]
 8000526:	fa22 f303 	lsr.w	r3, r2, r3
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000004 	.word	0x20000004
 8000534:	08001244 	.word	0x08001244

08000538 <USART1_IRQHandler>:
	}
}

//ISR
void USART1_IRQHandler (void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART1->SR & 1<<7)
 800053e:	4b22      	ldr	r3, [pc, #136]	; (80005c8 <USART1_IRQHandler+0x90>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <USART1_IRQHandler+0x1a>
		flag = USART_IRQ_TXE;
 800054c:	2300      	movs	r3, #0
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	e030      	b.n	80005b4 <USART1_IRQHandler+0x7c>
	//Transmission complete
	else if (USART1->SR & 1<<6){
 8000552:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <USART1_IRQHandler+0x90>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800055c:	2b00      	cmp	r3, #0
 800055e:	d007      	beq.n	8000570 <USART1_IRQHandler+0x38>
		flag = USART_IRQ_TC;
 8000560:	2301      	movs	r3, #1
 8000562:	71fb      	strb	r3, [r7, #7]
		USART1->SR = ~(1<<6);
 8000564:	4b18      	ldr	r3, [pc, #96]	; (80005c8 <USART1_IRQHandler+0x90>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	e021      	b.n	80005b4 <USART1_IRQHandler+0x7c>
	}
	//received data ready to be read
	else if (USART1->SR & 1<<5){
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <USART1_IRQHandler+0x90>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	f003 0320 	and.w	r3, r3, #32
 800057a:	2b00      	cmp	r3, #0
 800057c:	d007      	beq.n	800058e <USART1_IRQHandler+0x56>
		flag = USART_IRQ_RXNE;
 800057e:	2302      	movs	r3, #2
 8000580:	71fb      	strb	r3, [r7, #7]
		USART1->SR = ~(1<<5);
 8000582:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <USART1_IRQHandler+0x90>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f06f 0220 	mvn.w	r2, #32
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	e012      	b.n	80005b4 <USART1_IRQHandler+0x7c>
	}
	//overrun error detected
	else if (USART1->SR & 1<<3){
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <USART1_IRQHandler+0x90>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0308 	and.w	r3, r3, #8
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <USART1_IRQHandler+0x6a>
		flag = USART_IRQ_ORE;
 800059c:	2303      	movs	r3, #3
 800059e:	71fb      	strb	r3, [r7, #7]
 80005a0:	e008      	b.n	80005b4 <USART1_IRQHandler+0x7c>
	}
	//Parity error
	else if (USART1->SR & 1<<0){
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <USART1_IRQHandler+0x90>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <USART1_IRQHandler+0x7c>
		flag = USART_IRQ_PE;
 80005b0:	2304      	movs	r3, #4
 80005b2:	71fb      	strb	r3, [r7, #7]
	}

	Global_USART_Config[USART1_INDEX]->P_IRQ_CallBack(flag);
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <USART1_IRQHandler+0x94>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	79fa      	ldrb	r2, [r7, #7]
 80005bc:	4610      	mov	r0, r2
 80005be:	4798      	blx	r3

}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000008 	.word	0x20000008
 80005cc:	20000048 	.word	0x20000048

080005d0 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART2->SR & 1<<7)
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <USART2_IRQHandler+0x90>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <USART2_IRQHandler+0x1a>
		flag = USART_IRQ_TXE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	71fb      	strb	r3, [r7, #7]
 80005e8:	e030      	b.n	800064c <USART2_IRQHandler+0x7c>
	//Transmission complete
	else if (USART2->SR & 1<<6){
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <USART2_IRQHandler+0x90>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d007      	beq.n	8000608 <USART2_IRQHandler+0x38>
		flag = USART_IRQ_TC;
 80005f8:	2301      	movs	r3, #1
 80005fa:	71fb      	strb	r3, [r7, #7]
		USART2 -> SR = ~(1<<6);
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <USART2_IRQHandler+0x90>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	e021      	b.n	800064c <USART2_IRQHandler+0x7c>
	}
	//received data ready to be read
	else if (USART2->SR & 1<<5){
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <USART2_IRQHandler+0x90>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f003 0320 	and.w	r3, r3, #32
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <USART2_IRQHandler+0x56>
		flag = USART_IRQ_RXNE;
 8000616:	2302      	movs	r3, #2
 8000618:	71fb      	strb	r3, [r7, #7]
		USART2 -> SR = ~(1<<5);
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <USART2_IRQHandler+0x90>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f06f 0220 	mvn.w	r2, #32
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	e012      	b.n	800064c <USART2_IRQHandler+0x7c>
	}
	//overrun error detected
	else if (USART2->SR & 1<<3){
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <USART2_IRQHandler+0x90>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f003 0308 	and.w	r3, r3, #8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <USART2_IRQHandler+0x6a>
		flag = USART_IRQ_ORE;
 8000634:	2303      	movs	r3, #3
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	e008      	b.n	800064c <USART2_IRQHandler+0x7c>
	}
	//Parity error
	else if (USART2->SR & 1<<0){
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <USART2_IRQHandler+0x90>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f003 0301 	and.w	r3, r3, #1
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <USART2_IRQHandler+0x7c>
		flag = USART_IRQ_PE;
 8000648:	2304      	movs	r3, #4
 800064a:	71fb      	strb	r3, [r7, #7]
	}
	Global_USART_Config[USART2_INDEX]->P_IRQ_CallBack(flag);
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <USART2_IRQHandler+0x94>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	691b      	ldr	r3, [r3, #16]
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	4610      	mov	r0, r2
 8000656:	4798      	blx	r3

}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	2000000c 	.word	0x2000000c
 8000664:	20000048 	.word	0x20000048

08000668 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	enum USART_IRQ_Event flag;
	//transmit data register empty
	if (USART3->SR &1<<7)
 800066e:	4b22      	ldr	r3, [pc, #136]	; (80006f8 <USART3_IRQHandler+0x90>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <USART3_IRQHandler+0x1a>
		flag = USART_IRQ_TXE;
 800067c:	2300      	movs	r3, #0
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	e030      	b.n	80006e4 <USART3_IRQHandler+0x7c>
	//Transmission complete
	else if (USART3->SR & 1<<6){
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <USART3_IRQHandler+0x90>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800068c:	2b00      	cmp	r3, #0
 800068e:	d007      	beq.n	80006a0 <USART3_IRQHandler+0x38>
		flag = USART_IRQ_TC;
 8000690:	2301      	movs	r3, #1
 8000692:	71fb      	strb	r3, [r7, #7]
		USART3 -> SR = ~(1<<6);
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <USART3_IRQHandler+0x90>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	e021      	b.n	80006e4 <USART3_IRQHandler+0x7c>
	}
	//received data ready to be read
	else if (USART3->SR & 1<<5){
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <USART3_IRQHandler+0x90>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f003 0320 	and.w	r3, r3, #32
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d007      	beq.n	80006be <USART3_IRQHandler+0x56>
		flag = USART_IRQ_RXNE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	71fb      	strb	r3, [r7, #7]
		USART3 -> SR = ~(1<<5);
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <USART3_IRQHandler+0x90>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f06f 0220 	mvn.w	r2, #32
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	e012      	b.n	80006e4 <USART3_IRQHandler+0x7c>
	}
	//overrun error detected
	else if (USART3->SR & 1<<3){
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <USART3_IRQHandler+0x90>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f003 0308 	and.w	r3, r3, #8
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <USART3_IRQHandler+0x6a>
		flag = USART_IRQ_ORE;
 80006cc:	2303      	movs	r3, #3
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	e008      	b.n	80006e4 <USART3_IRQHandler+0x7c>
	}
	//Parity error
	else if (USART3->SR & 1<<0){
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <USART3_IRQHandler+0x90>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <USART3_IRQHandler+0x7c>
		flag = USART_IRQ_PE;
 80006e0:	2304      	movs	r3, #4
 80006e2:	71fb      	strb	r3, [r7, #7]
	}

	Global_USART_Config[USART3_INDEX]->P_IRQ_CallBack(flag);
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <USART3_IRQHandler+0x94>)
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	691b      	ldr	r3, [r3, #16]
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	4610      	mov	r0, r2
 80006ee:	4798      	blx	r3

}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000010 	.word	0x20000010
 80006fc:	20000048 	.word	0x20000048

08000700 <Get_I2C_Index>:
//-----------------------------
//User type definitions (structures)
//-----------------------------

//*********Global Functions*********//
uint8_t Get_I2C_Index(I2C_TypeDef* I2Cx){
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]

	uint8_t I2C_Index = I2Cx == I2C1?  I2C1_INDEX : I2C2_INDEX ;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <Get_I2C_Index+0x28>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	429a      	cmp	r2, r3
 8000710:	bf14      	ite	ne
 8000712:	2301      	movne	r3, #1
 8000714:	2300      	moveq	r3, #0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	73fb      	strb	r3, [r7, #15]
	return I2C_Index;
 800071a:	7bfb      	ldrb	r3, [r7, #15]

}
 800071c:	4618      	mov	r0, r3
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	2000001c 	.word	0x2000001c

0800072c <I2C_Generate_Start>:
* @param [in] 		- State: Enable or disable Start generation
* @retval 			- none
* Note				- none
*/
void I2C_Generate_Start(I2C_TypeDef *I2Cx,I2C_Start_t Start, Functional_State_t State)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
 8000738:	4613      	mov	r3, r2
 800073a:	70bb      	strb	r3, [r7, #2]
	/* Check the type of start (Start or Repeated Start) */
	if(Start != Repeated_Start)
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d007      	beq.n	8000752 <I2C_Generate_Start+0x26>
	{
		/* Check if the bus is idle */
		while(I2C_BUSY(I2Cx));
 8000742:	bf00      	nop
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d1f8      	bne.n	8000744 <I2C_Generate_Start+0x18>
		1: Repeated start generation
		In Slave mode:
		0: No Start generation
		1: Start generation when the bus is free
	 */
	if(State != DISABLE)
 8000752:	78bb      	ldrb	r3, [r7, #2]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d005      	beq.n	8000764 <I2C_Generate_Start+0x38>
	{
		/* Generate a START condition */
		Set_Bitfield(I2Cx->I2C_CR1.bits.START);
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	8813      	ldrh	r3, [r2, #0]
 800075c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000760:	8013      	strh	r3, [r2, #0]
	else
	{
		/* Disable the START condition generation */
		Reset_Bitfield(I2Cx->I2C_CR1.bits.START);
	}
}
 8000762:	e004      	b.n	800076e <I2C_Generate_Start+0x42>
		Reset_Bitfield(I2Cx->I2C_CR1.bits.START);
 8000764:	687a      	ldr	r2, [r7, #4]
 8000766:	8813      	ldrh	r3, [r2, #0]
 8000768:	f36f 2308 	bfc	r3, #8, #1
 800076c:	8013      	strh	r3, [r2, #0]
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <I2C_Generate_Stop>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-none
*/
void I2C_Generate_Stop(I2C_TypeDef* I2Cx )
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	Set_Bitfield(I2Cx->I2C_CR1.bits.STOP);
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	8813      	ldrh	r3, [r2, #0]
 8000784:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000788:	8013      	strh	r3, [r2, #0]
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <I2C_Send_Address>:
* @param [in] 		- Direction: Direction of communication ( Transmitter or Receiver )
* @retval 			- none
* Note				- none
*/
void I2C_Send_Address(I2C_TypeDef *I2Cx, uint16_t Slave_Address, I2C_Direction_t Direction)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	807b      	strh	r3, [r7, #2]
 80007a0:	4613      	mov	r3, r2
 80007a2:	707b      	strb	r3, [r7, #1]

	/*  SB=1, cleared by reading SR1 register followed by writing the DR register */
	while(!EV5(I2Cx));
 80007a4:	bf00      	nop
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0f8      	beq.n	80007a6 <I2C_Send_Address+0x12>
	/* for 10-bit address mode  */
	if(I2Cx->I2C_OAR1.bits.ADDMODE){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d010      	beq.n	80007e4 <I2C_Send_Address+0x50>
		/* send The 10-bit Address Header with 2 MSB of Slave Address */
		Write_Port(I2Cx->I2C_DR.reg, ((Slave_Address & 0x300)>>8)|(0b11110<<2)) ;
 80007c2:	887b      	ldrh	r3, [r7, #2]
 80007c4:	121b      	asrs	r3, r3, #8
 80007c6:	f003 0303 	and.w	r3, r3, #3
 80007ca:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	611a      	str	r2, [r3, #16]
		while(!EV9(I2Cx));
 80007d4:	bf00      	nop
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d0f8      	beq.n	80007d6 <I2C_Send_Address+0x42>
	}

	if(Direction == Receiver)
 80007e4:	787b      	ldrb	r3, [r7, #1]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d124      	bne.n	8000834 <I2C_Send_Address+0xa0>
	{
		/* Set the address bit 0 for read */
		Write_Port(I2Cx->I2C_DR.reg, (Slave_Address << 1) | (0x01));
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	611a      	str	r2, [r3, #16]
		/* for 10-bit address mode  */
		if(I2Cx->I2C_OAR1.bits.ADDMODE){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	689b      	ldr	r3, [r3, #8]
 80007fc:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d01e      	beq.n	8000844 <I2C_Send_Address+0xb0>

				while(!EV6(I2Cx));
 8000806:	bf00      	nop
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d0f8      	beq.n	8000808 <I2C_Send_Address+0x74>
				I2C_Generate_Start(I2Cx, Repeated_Start, ENABLE);
 8000816:	2201      	movs	r2, #1
 8000818:	2101      	movs	r1, #1
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff86 	bl	800072c <I2C_Generate_Start>
				/* send The 10-bit Address Header with 2 MSB of Slave Address */
				Write_Port(I2Cx->I2C_DR.reg, ((Slave_Address & 0x300)>>8)|(0b11110<<2)) ;
 8000820:	887b      	ldrh	r3, [r7, #2]
 8000822:	121b      	asrs	r3, r3, #8
 8000824:	f003 0303 	and.w	r3, r3, #3
 8000828:	f043 0378 	orr.w	r3, r3, #120	; 0x78
 800082c:	461a      	mov	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	611a      	str	r2, [r3, #16]
		/* Reset the address bit 0 for write */
		Write_Port(I2Cx->I2C_DR.reg, Slave_Address << 1);
	}


}
 8000832:	e007      	b.n	8000844 <I2C_Send_Address+0xb0>
	else if(Direction == Transmitter)
 8000834:	787b      	ldrb	r3, [r7, #1]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d104      	bne.n	8000844 <I2C_Send_Address+0xb0>
		Write_Port(I2Cx->I2C_DR.reg, Slave_Address << 1);
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	461a      	mov	r2, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	611a      	str	r2, [r3, #16]
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MCAL_I2C_Init>:
*  @param [in]	-I2C_Config : Pointer to I2C_Config_t which contains
 * 				 the configuration info for specified I2C
* @retval -
* Note			- None
*/
void MCAL_I2C_Init(I2C_TypeDef* I2Cx, I2C_Config_t* I2C_Config){
 800084c:	b5b0      	push	{r4, r5, r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	/* Safety for registers before the entire configuration be applied */
	uint16_t Temp_CR1 = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	82fb      	strh	r3, [r7, #22]
	uint16_t Temp_CR2 = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	82bb      	strh	r3, [r7, #20]
	uint16_t Temp_Reg = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	827b      	strh	r3, [r7, #18]
	uint32_t pclk1 = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
	uint16_t Temp_FreqReg = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	823b      	strh	r3, [r7, #16]
	//enable I2C clock
	if (I2Cx == I2C1)
 800086a:	4b97      	ldr	r3, [pc, #604]	; (8000ac8 <MCAL_I2C_Init+0x27c>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	429a      	cmp	r2, r3
 8000872:	d112      	bne.n	800089a <MCAL_I2C_Init+0x4e>
	{
		RCC_I2C1_CLOCK_EN();
 8000874:	4b95      	ldr	r3, [pc, #596]	; (8000acc <MCAL_I2C_Init+0x280>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	69da      	ldr	r2, [r3, #28]
 800087a:	4b94      	ldr	r3, [pc, #592]	; (8000acc <MCAL_I2C_Init+0x280>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000882:	61da      	str	r2, [r3, #28]
		Global_I2C_Config[I2C1_INDEX] = *I2C_Config;
 8000884:	4a92      	ldr	r2, [pc, #584]	; (8000ad0 <MCAL_I2C_Init+0x284>)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	4614      	mov	r4, r2
 800088a:	461d      	mov	r5, r3
 800088c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000894:	682b      	ldr	r3, [r5, #0]
 8000896:	6023      	str	r3, [r4, #0]
 8000898:	e017      	b.n	80008ca <MCAL_I2C_Init+0x7e>
	}
	else if (I2Cx == I2C2){
 800089a:	4b8e      	ldr	r3, [pc, #568]	; (8000ad4 <MCAL_I2C_Init+0x288>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d112      	bne.n	80008ca <MCAL_I2C_Init+0x7e>

		RCC_I2C2_CLOCK_EN();
 80008a4:	4b89      	ldr	r3, [pc, #548]	; (8000acc <MCAL_I2C_Init+0x280>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b88      	ldr	r3, [pc, #544]	; (8000acc <MCAL_I2C_Init+0x280>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80008b2:	61da      	str	r2, [r3, #28]
		Global_I2C_Config[I2C2_INDEX] = *I2C_Config;
 80008b4:	4b86      	ldr	r3, [pc, #536]	; (8000ad0 <MCAL_I2C_Init+0x284>)
 80008b6:	683a      	ldr	r2, [r7, #0]
 80008b8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80008bc:	4615      	mov	r5, r2
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	682b      	ldr	r3, [r5, #0]
 80008c8:	6023      	str	r3, [r4, #0]
	}
	//Set Bus Mode
	if(I2C_Config->Bus_Mode == SMBus_Mode)
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	f993 3000 	ldrsb.w	r3, [r3]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d104      	bne.n	80008de <MCAL_I2C_Init+0x92>
		Set_Config(Temp_CR1, SMBus_Mode);
 80008d4:	8afb      	ldrh	r3, [r7, #22]
 80008d6:	f043 0302 	orr.w	r3, r3, #2
 80008da:	82fb      	strh	r3, [r7, #22]
 80008dc:	e003      	b.n	80008e6 <MCAL_I2C_Init+0x9a>
	else
		Reset_Config(Temp_CR1, I2C_Mode);
 80008de:	8afb      	ldrh	r3, [r7, #22]
 80008e0:	f023 0302 	bic.w	r3, r3, #2
 80008e4:	82fb      	strh	r3, [r7, #22]


	// set Bits 5:0 FREQ[5:0]: Peripheral clock frequency
	pclk1 = MCAL_RCC_GetPCLCK1Freq();
 80008e6:	f7ff fe11 	bl	800050c <MCAL_RCC_GetPCLCK1Freq>
 80008ea:	60f8      	str	r0, [r7, #12]
	Temp_FreqReg = (uint16_t)(pclk1 / 1000000);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	4a7a      	ldr	r2, [pc, #488]	; (8000ad8 <MCAL_I2C_Init+0x28c>)
 80008f0:	fba2 2303 	umull	r2, r3, r2, r3
 80008f4:	0c9b      	lsrs	r3, r3, #18
 80008f6:	823b      	strh	r3, [r7, #16]
	Set_Config(Temp_CR2, Temp_FreqReg);
 80008f8:	8aba      	ldrh	r2, [r7, #20]
 80008fa:	8a3b      	ldrh	r3, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	82bb      	strh	r3, [r7, #20]

	Temp_FreqReg = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	823b      	strh	r3, [r7, #16]
	//Set CCR
	/* CCR register must be configured only when the I2C is disabled (PE = 0). */
	Reset_Bitfield(I2Cx->I2C_CR1.bits.PE);
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	8813      	ldrh	r3, [r2, #0]
 8000908:	f36f 0300 	bfc	r3, #0, #1
 800090c:	8013      	strh	r3, [r2, #0]
	/* fSCL = 1/(Thigh + Tlow) */
	if ( I2C_Config->I2C_ClockSpeed.I2C_SpeedMode == Standard_Speed_Mode){
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8000916:	4293      	cmp	r3, r2
 8000918:	d10f      	bne.n	800093a <MCAL_I2C_Init+0xee>
		Reset_Config(Temp_Reg, Standard_Speed_Mode);
 800091a:	8a7b      	ldrh	r3, [r7, #18]
 800091c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000920:	827b      	strh	r3, [r7, #18]
		// CCR = Fpclk1 / (2 * I2C_ClockFreq )
		Temp_FreqReg = pclk1/(2*I2C_Config->I2C_ClockSpeed.I2C_ClockFreq);
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	fbb2 f3f3 	udiv	r3, r2, r3
 800092e:	823b      	strh	r3, [r7, #16]
		Set_Config(Temp_Reg, Temp_FreqReg);
 8000930:	8a7a      	ldrh	r2, [r7, #18]
 8000932:	8a3b      	ldrh	r3, [r7, #16]
 8000934:	4313      	orrs	r3, r2
 8000936:	827b      	strh	r3, [r7, #18]
 8000938:	e029      	b.n	800098e <MCAL_I2C_Init+0x142>
	}else{ //Fast Mode
		Set_Config(Temp_Reg, Fast_Speed_Mode);
 800093a:	8a7b      	ldrh	r3, [r7, #18]
 800093c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000944:	827b      	strh	r3, [r7, #18]
		if(I2C_Config->I2C_DutyCycle == I2C_DutyRatio_2){
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800094c:	f46f 4280 	mvn.w	r2, #16384	; 0x4000
 8000950:	4293      	cmp	r3, r2
 8000952:	d10d      	bne.n	8000970 <MCAL_I2C_Init+0x124>
			Temp_FreqReg = pclk1/(3*I2C_Config->I2C_ClockSpeed.I2C_ClockFreq);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	4613      	mov	r3, r2
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	4413      	add	r3, r2
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	fbb2 f3f3 	udiv	r3, r2, r3
 8000964:	823b      	strh	r3, [r7, #16]
			Set_Config(Temp_Reg, Temp_FreqReg);
 8000966:	8a7a      	ldrh	r2, [r7, #18]
 8000968:	8a3b      	ldrh	r3, [r7, #16]
 800096a:	4313      	orrs	r3, r2
 800096c:	827b      	strh	r3, [r7, #18]
 800096e:	e00e      	b.n	800098e <MCAL_I2C_Init+0x142>
		}else{			//I2C_DutyRatio_16_9
			Temp_FreqReg = pclk1/(25*I2C_Config->I2C_ClockSpeed.I2C_ClockFreq);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	009a      	lsls	r2, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	fbb2 f3f3 	udiv	r3, r2, r3
 8000984:	823b      	strh	r3, [r7, #16]
			Set_Config(Temp_Reg, Temp_FreqReg);
 8000986:	8a7a      	ldrh	r2, [r7, #18]
 8000988:	8a3b      	ldrh	r3, [r7, #16]
 800098a:	4313      	orrs	r3, r2
 800098c:	827b      	strh	r3, [r7, #18]
		}
	}
	Set_Config(I2Cx->I2C_CCR.reg, Temp_Reg);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	69da      	ldr	r2, [r3, #28]
 8000992:	8a7b      	ldrh	r3, [r7, #18]
 8000994:	431a      	orrs	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	61da      	str	r2, [r3, #28]
	Temp_Reg = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	827b      	strh	r3, [r7, #18]


	//set Bits 5:0 TRISE[5:0]: Maximum rise time in Fm/Sm mode (Master mode)
	/* These bits must be programmed with the maximum SCL rise freq
	 * given in the I2C bus specification, incremented by 1 */
	Write_Port(I2Cx->I2C_TRISE.reg, Temp_FreqReg+1);
 800099e:	8a3b      	ldrh	r3, [r7, #16]
 80009a0:	3301      	adds	r3, #1
 80009a2:	461a      	mov	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	621a      	str	r2, [r3, #32]

	// set I2C ACK
	if(I2C_Config->I2C_ACK_Control == I2C_ACK_Enable){
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80009ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009b2:	d104      	bne.n	80009be <MCAL_I2C_Init+0x172>
		Set_Config(Temp_CR1, I2C_ACK_Enable);
 80009b4:	8afb      	ldrh	r3, [r7, #22]
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ba:	82fb      	strh	r3, [r7, #22]
 80009bc:	e003      	b.n	80009c6 <MCAL_I2C_Init+0x17a>
	}else{
		Reset_Config(Temp_CR1, I2C_ACK_Disable);
 80009be:	8afb      	ldrh	r3, [r7, #22]
 80009c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009c4:	82fb      	strh	r3, [r7, #22]
	}

	// set I2C ENCG General call address enable
	if(I2C_Config->G_CallAddress_Detection == G_CallAddress_Enable){
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80009cc:	2b40      	cmp	r3, #64	; 0x40
 80009ce:	d104      	bne.n	80009da <MCAL_I2C_Init+0x18e>
		Set_Config(Temp_CR1, G_CallAddress_Enable);
 80009d0:	8afb      	ldrh	r3, [r7, #22]
 80009d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d6:	82fb      	strh	r3, [r7, #22]
 80009d8:	e003      	b.n	80009e2 <MCAL_I2C_Init+0x196>
	}else{
		Reset_Config(Temp_CR1, G_CallAddress_Disable);
 80009da:	8afb      	ldrh	r3, [r7, #22]
 80009dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80009e0:	82fb      	strh	r3, [r7, #22]
	}
	//Set Address
	if(I2C_Config->I2C_DeviceAddress.Dual_Add_Ack == Dual_Adress_Enable){
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d11a      	bne.n	8000a22 <MCAL_I2C_Init+0x1d6>
		Set_Bitfield(I2Cx->I2C_OAR2.bits.ENDUAL);
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	8993      	ldrh	r3, [r2, #12]
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	8193      	strh	r3, [r2, #12]
		Set_Config(I2Cx->I2C_OAR2.reg,I2C_Config->I2C_DeviceAddress.Dual_Interface_Address<<1);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	8b12      	ldrh	r2, [r2, #24]
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	431a      	orrs	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60da      	str	r2, [r3, #12]

		Reset_Config(Temp_Reg, Addressing_Mode_7bit);
 8000a06:	8a7b      	ldrh	r3, [r7, #18]
 8000a08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a0c:	827b      	strh	r3, [r7, #18]
		Set_Config(Temp_Reg, I2C_Config->I2C_DeviceAddress.Own_Interface_Address<<1);
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	8adb      	ldrh	r3, [r3, #22]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	b21b      	sxth	r3, r3
 8000a1e:	827b      	strh	r3, [r7, #18]
 8000a20:	e027      	b.n	8000a72 <MCAL_I2C_Init+0x226>
	}else{
		Reset_Bitfield(I2Cx->I2C_OAR2.bits.ENDUAL);
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	8993      	ldrh	r3, [r2, #12]
 8000a26:	f36f 0300 	bfc	r3, #0, #1
 8000a2a:	8193      	strh	r3, [r2, #12]
		if(I2C_Config->I2C_Addressing_Mode == Addressing_Mode_7bit){
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	f46f 4200 	mvn.w	r2, #32768	; 0x8000
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d10d      	bne.n	8000a54 <MCAL_I2C_Init+0x208>
			Reset_Config(Temp_Reg, Addressing_Mode_7bit);
 8000a38:	8a7b      	ldrh	r3, [r7, #18]
 8000a3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a3e:	827b      	strh	r3, [r7, #18]
			Set_Config(Temp_Reg, I2C_Config->I2C_DeviceAddress.Own_Interface_Address<<1);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	8adb      	ldrh	r3, [r3, #22]
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	827b      	strh	r3, [r7, #18]
 8000a52:	e00e      	b.n	8000a72 <MCAL_I2C_Init+0x226>
		}else{
			Set_Config(Temp_Reg, Addressing_Mode_10bit);
 8000a54:	8a7b      	ldrh	r3, [r7, #18]
 8000a56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000a5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000a5e:	827b      	strh	r3, [r7, #18]
			Set_Config(Temp_Reg, I2C_Config->I2C_DeviceAddress.Own_Interface_Address<<1);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	8adb      	ldrh	r3, [r3, #22]
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	b21a      	sxth	r2, r3
 8000a68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	827b      	strh	r3, [r7, #18]
		}
	}
	Set_Config(I2Cx->I2C_OAR1.reg, Temp_Reg);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689a      	ldr	r2, [r3, #8]
 8000a76:	8a7b      	ldrh	r3, [r7, #18]
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
	Temp_Reg = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	827b      	strh	r3, [r7, #18]
	//check interrupt mode (slave mode)
	if(I2C_Config->P_IRQ_CallBack != NULL){		//this enables Slave IRQ
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	6a1b      	ldr	r3, [r3, #32]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 808e 	beq.w	8000ba8 <MCAL_I2C_Init+0x35c>
		//Set interrupt event
		if( I2C_Config->IRQ_Enable == I2C_IRQ_EV_EN)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000a92:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000a96:	d125      	bne.n	8000ae4 <MCAL_I2C_Init+0x298>
		{
			Set_Config(Temp_CR2, I2C_IRQ_EV_EN);
 8000a98:	8abb      	ldrh	r3, [r7, #20]
 8000a9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000a9e:	82bb      	strh	r3, [r7, #20]
			if(I2Cx == I2C1)
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MCAL_I2C_Init+0x27c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d106      	bne.n	8000ab8 <MCAL_I2C_Init+0x26c>
			{
				NVIC_IRQ31_I2C1_EV_ENABLE();
 8000aaa:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MCAL_I2C_Init+0x290>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <MCAL_I2C_Init+0x290>)
 8000ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e077      	b.n	8000ba8 <MCAL_I2C_Init+0x35c>
			}

			else
			{
				NVIC_IRQ33_I2C2_EV_ENABLE();
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MCAL_I2C_Init+0x294>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <MCAL_I2C_Init+0x294>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	e070      	b.n	8000ba8 <MCAL_I2C_Init+0x35c>
 8000ac6:	bf00      	nop
 8000ac8:	2000001c 	.word	0x2000001c
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000054 	.word	0x20000054
 8000ad4:	20000020 	.word	0x20000020
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000e104 	.word	0xe000e104
			}

		}else if ( I2C_Config->IRQ_Enable == I2C_IRQ_ER_EN){
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000aea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000aee:	d116      	bne.n	8000b1e <MCAL_I2C_Init+0x2d2>
			Set_Config(Temp_CR2, I2C_IRQ_ER_EN);
 8000af0:	8abb      	ldrh	r3, [r7, #20]
 8000af2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000af6:	82bb      	strh	r3, [r7, #20]
			if(I2Cx == I2C1)
 8000af8:	4b39      	ldr	r3, [pc, #228]	; (8000be0 <MCAL_I2C_Init+0x394>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d106      	bne.n	8000b10 <MCAL_I2C_Init+0x2c4>
			{
				NVIC_IRQ32_I2C1_ER_ENABLE();
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a37      	ldr	r2, [pc, #220]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e04b      	b.n	8000ba8 <MCAL_I2C_Init+0x35c>
			}

			else
			{
				NVIC_IRQ34_I2C2_ER_ENABLE();
 8000b10:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a33      	ldr	r2, [pc, #204]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e044      	b.n	8000ba8 <MCAL_I2C_Init+0x35c>
			}
		}else if ( I2C_Config->IRQ_Enable == I2C_IRQ_ER_EV_EN){
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000b28:	d122      	bne.n	8000b70 <MCAL_I2C_Init+0x324>
					Set_Config(Temp_CR2, I2C_IRQ_ER_EV_EN);
 8000b2a:	8abb      	ldrh	r3, [r7, #20]
 8000b2c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000b30:	82bb      	strh	r3, [r7, #20]
					if(I2Cx == I2C1)
 8000b32:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <MCAL_I2C_Init+0x394>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d10c      	bne.n	8000b56 <MCAL_I2C_Init+0x30a>
					{
						NVIC_IRQ31_I2C1_EV_ENABLE();
 8000b3c:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <MCAL_I2C_Init+0x39c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <MCAL_I2C_Init+0x39c>)
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	6013      	str	r3, [r2, #0]
						NVIC_IRQ32_I2C1_ER_ENABLE();
 8000b48:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a25      	ldr	r2, [pc, #148]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b4e:	f043 0301 	orr.w	r3, r3, #1
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	e028      	b.n	8000ba8 <MCAL_I2C_Init+0x35c>
					}

					else
					{
						NVIC_IRQ33_I2C2_EV_ENABLE();
 8000b56:	4b23      	ldr	r3, [pc, #140]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a22      	ldr	r2, [pc, #136]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6013      	str	r3, [r2, #0]
						NVIC_IRQ34_I2C2_ER_ENABLE();
 8000b62:	4b20      	ldr	r3, [pc, #128]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <MCAL_I2C_Init+0x398>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e01b      	b.n	8000ba8 <MCAL_I2C_Init+0x35c>
					}
		}else{ //I2C_IRQ_Disable
			Reset_Config(Temp_CR2, I2C_IRQ_Disable);
 8000b70:	8abb      	ldrh	r3, [r7, #20]
 8000b72:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b76:	82bb      	strh	r3, [r7, #20]
			NVIC_IRQ31_I2C1_EV_DISABLE();
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MCAL_I2C_Init+0x3a0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MCAL_I2C_Init+0x3a0>)
 8000b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b82:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_DISABLE();
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <MCAL_I2C_Init+0x3a4>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a19      	ldr	r2, [pc, #100]	; (8000bf0 <MCAL_I2C_Init+0x3a4>)
 8000b8a:	f043 0301 	orr.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]
			NVIC_IRQ33_I2C2_EV_DISABLE();
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MCAL_I2C_Init+0x3a4>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <MCAL_I2C_Init+0x3a4>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_DISABLE();
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MCAL_I2C_Init+0x3a4>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a13      	ldr	r2, [pc, #76]	; (8000bf0 <MCAL_I2C_Init+0x3a4>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	6013      	str	r3, [r2, #0]

		}
	}
	// Reset I2C Status Registers
	Reset_Port(I2Cx->I2C_SR1.reg);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
	Reset_Port(I2Cx->I2C_SR2.reg);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]


	Set_Config(I2Cx->I2C_CR1.reg, Temp_CR1);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	8afb      	ldrh	r3, [r7, #22]
 8000bba:	431a      	orrs	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	601a      	str	r2, [r3, #0]
	Set_Config(I2Cx->I2C_CR2.reg, Temp_CR2);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	8abb      	ldrh	r3, [r7, #20]
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	605a      	str	r2, [r3, #4]

	// Enable I2Cx Peripheral
	Set_Bitfield(I2Cx->I2C_CR1.bits.PE);
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	8813      	ldrh	r3, [r2, #0]
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	8013      	strh	r3, [r2, #0]

}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000001c 	.word	0x2000001c
 8000be4:	e000e104 	.word	0xe000e104
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000e180 	.word	0xe000e180
 8000bf0:	e000e184 	.word	0xe000e184

08000bf4 <MCAL_I2C_GPIO_Set_Pins>:
 * @param [in] 	-I2Cx : where x can be (1 or 2) to select I2C peripheral
 * @retval	 	-none
 * Note			-none
 */

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef* I2Cx){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t I2C_PinCfg;
	if(I2Cx == I2C1)
 8000bfc:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MCAL_I2C_GPIO_Set_Pins+0x90>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	d11c      	bne.n	8000c40 <MCAL_I2C_GPIO_Set_Pins+0x4c>
	{
		//SCL :  PB6
		//SDA :  PB7
		I2C_PinCfg.GPIO_PINNumber =GPIO_PIN6;
 8000c06:	2340      	movs	r3, #64	; 0x40
 8000c08:	81bb      	strh	r3, [r7, #12]
		I2C_PinCfg.GPIO_Mode = GPIO_Mode_AF_OUT_OD;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	73bb      	strb	r3, [r7, #14]
		I2C_PinCfg.GPIO_Speed= GPIO_Speed_10MHZ;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &I2C_PinCfg);
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MCAL_I2C_GPIO_Set_Pins+0x94>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f107 020c 	add.w	r2, r7, #12
 8000c1a:	4611      	mov	r1, r2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fb5f 	bl	80002e0 <MCAL_GPIO_init>

		I2C_PinCfg.GPIO_PINNumber =GPIO_PIN7;
 8000c22:	2380      	movs	r3, #128	; 0x80
 8000c24:	81bb      	strh	r3, [r7, #12]
		I2C_PinCfg.GPIO_Mode = GPIO_Mode_AF_OUT_OD;
 8000c26:	2307      	movs	r3, #7
 8000c28:	73bb      	strb	r3, [r7, #14]
		I2C_PinCfg.GPIO_Speed= GPIO_Speed_10MHZ;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &I2C_PinCfg);
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MCAL_I2C_GPIO_Set_Pins+0x94>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f107 020c 	add.w	r2, r7, #12
 8000c36:	4611      	mov	r1, r2
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fb51 	bl	80002e0 <MCAL_GPIO_init>
		I2C_PinCfg.GPIO_PINNumber =GPIO_PIN11;
		I2C_PinCfg.GPIO_Mode = GPIO_Mode_AF_OUT_OD;
		I2C_PinCfg.GPIO_Speed= GPIO_Speed_10MHZ;
		MCAL_GPIO_init(GPIOB, &I2C_PinCfg);
	}
}
 8000c3e:	e01d      	b.n	8000c7c <MCAL_I2C_GPIO_Set_Pins+0x88>
		I2C_PinCfg.GPIO_PINNumber =GPIO_PIN10;
 8000c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c44:	81bb      	strh	r3, [r7, #12]
		I2C_PinCfg.GPIO_Mode = GPIO_Mode_AF_OUT_OD;
 8000c46:	2307      	movs	r3, #7
 8000c48:	73bb      	strb	r3, [r7, #14]
		I2C_PinCfg.GPIO_Speed= GPIO_Speed_10MHZ;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &I2C_PinCfg);
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MCAL_I2C_GPIO_Set_Pins+0x94>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f107 020c 	add.w	r2, r7, #12
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fb41 	bl	80002e0 <MCAL_GPIO_init>
		I2C_PinCfg.GPIO_PINNumber =GPIO_PIN11;
 8000c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c62:	81bb      	strh	r3, [r7, #12]
		I2C_PinCfg.GPIO_Mode = GPIO_Mode_AF_OUT_OD;
 8000c64:	2307      	movs	r3, #7
 8000c66:	73bb      	strb	r3, [r7, #14]
		I2C_PinCfg.GPIO_Speed= GPIO_Speed_10MHZ;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_init(GPIOB, &I2C_PinCfg);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MCAL_I2C_GPIO_Set_Pins+0x94>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f107 020c 	add.w	r2, r7, #12
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb32 	bl	80002e0 <MCAL_GPIO_init>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000001c 	.word	0x2000001c
 8000c88:	20000000 	.word	0x20000000

08000c8c <MCAL_I2C_Master_TX>:
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */

void MCAL_I2C_Master_TX(I2C_TypeDef* I2Cx, uint16_t SlaveAddress, uint8_t* pTxData, uint8_t DataLength, I2C_Start_t Start, I2C_Stop_t Stop){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	461a      	mov	r2, r3
 8000c98:	460b      	mov	r3, r1
 8000c9a:	817b      	strh	r3, [r7, #10]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	727b      	strb	r3, [r7, #9]
	uint8_t i ;
	/* Set the START bit in the I2C_CR1 register to generate a Start condition */
	I2C_Generate_Start(I2Cx, Start, ENABLE);
 8000ca0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff fd3f 	bl	800072c <I2C_Generate_Start>
	/* SB=1, cleared by reading SR register followed by writing D2 register */
	while(!EV5(I2Cx));
 8000cae:	bf00      	nop
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	695b      	ldr	r3, [r3, #20]
 8000cb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f8      	beq.n	8000cb0 <MCAL_I2C_Master_TX+0x24>
	I2C_Send_Address(I2Cx, SlaveAddress, Transmitter);
 8000cbe:	897b      	ldrh	r3, [r7, #10]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f7ff fd65 	bl	8000794 <I2C_Send_Address>
	/* ADDR=1, cleared by reading SR1 register followed by reading SR2. */
	while(!EV6(I2Cx));
 8000cca:	bf00      	nop
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f8      	beq.n	8000ccc <MCAL_I2C_Master_TX+0x40>
	/* TxE=1,TRA=1, BUSY=1,MSL=1 : Master Transmitter Event, shift register empty, data register empty, write Data1 in DR. */
	while(!EV8_1(I2Cx));
 8000cda:	bf00      	nop
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	6992      	ldr	r2, [r2, #24]
 8000cf8:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	6992      	ldr	r2, [r2, #24]
 8000d04:	f3c2 0200 	ubfx	r2, r2, #0, #1
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0e5      	beq.n	8000cdc <MCAL_I2C_Master_TX+0x50>
	for (i = 0; i < DataLength; i++)
 8000d10:	2300      	movs	r3, #0
 8000d12:	75fb      	strb	r3, [r7, #23]
 8000d14:	e011      	b.n	8000d3a <MCAL_I2C_Master_TX+0xae>
		{
			/*  Write  the data to be sent on I2C DR register */
			Write_Port(I2Cx->I2C_DR.reg, pTxData[i]);
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	611a      	str	r2, [r3, #16]

			/* EV8: TxE=1, shift register not empty, data register empty, cleared by writing DR register. */
			while(!EV8(I2Cx));
 8000d24:	bf00      	nop
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d0f8      	beq.n	8000d26 <MCAL_I2C_Master_TX+0x9a>
	for (i = 0; i < DataLength; i++)
 8000d34:	7dfb      	ldrb	r3, [r7, #23]
 8000d36:	3301      	adds	r3, #1
 8000d38:	75fb      	strb	r3, [r7, #23]
 8000d3a:	7dfa      	ldrb	r2, [r7, #23]
 8000d3c:	7a7b      	ldrb	r3, [r7, #9]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d3e9      	bcc.n	8000d16 <MCAL_I2C_Master_TX+0x8a>
		}
	/* EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition. */
	while(!EV8_2(I2Cx));
 8000d42:	bf00      	nop
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f1      	beq.n	8000d44 <MCAL_I2C_Master_TX+0xb8>

	if(Stop == With_Stop){
 8000d60:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d102      	bne.n	8000d6e <MCAL_I2C_Master_TX+0xe2>
		/* Set the STOP bit in the I2C_CR1 register to generate a Stop condition */
		I2C_Generate_Stop(I2Cx);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fd05 	bl	8000778 <I2C_Generate_Stop>
	}

}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <MCAL_I2C_Master_RX>:
 * @param [in] 		- Stop : select send stop bit or not
 * @param [in] 		- Start : select send start or repeated start
 * @retval 			- None
 * Note 			- None
 */
void MCAL_I2C_Master_RX(I2C_TypeDef* I2Cx, uint16_t SlaveAddress, uint8_t* pRxData, uint8_t DataLength, I2C_Start_t Start, I2C_Stop_t Stop){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	461a      	mov	r2, r3
 8000d84:	460b      	mov	r3, r1
 8000d86:	817b      	strh	r3, [r7, #10]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	727b      	strb	r3, [r7, #9]
	uint8_t i ;
	uint8_t I2Cx_INDEX = Get_I2C_Index(I2Cx);
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fcb7 	bl	8000700 <Get_I2C_Index>
 8000d92:	4603      	mov	r3, r0
 8000d94:	75bb      	strb	r3, [r7, #22]
	/* Set the START bit in the I2C_CR1 register to generate a Start condition */
	I2C_Generate_Start(I2Cx, Start, ENABLE);
 8000d96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f7ff fcc4 	bl	800072c <I2C_Generate_Start>
	/* SB=1, cleared by reading SR register followed by writing D2 register */
	while(!EV5(I2Cx));
 8000da4:	bf00      	nop
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f8      	beq.n	8000da6 <MCAL_I2C_Master_RX+0x2e>
	I2C_Send_Address(I2Cx, SlaveAddress, Receiver);
 8000db4:	897b      	ldrh	r3, [r7, #10]
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f7ff fcea 	bl	8000794 <I2C_Send_Address>
	/* ADDR=1, cleared by reading SR1 register followed by reading SR2. */
	while(!EV6(I2Cx));
 8000dc0:	bf00      	nop
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d0f8      	beq.n	8000dc2 <MCAL_I2C_Master_RX+0x4a>

	/* Enable Acknowledge return after a byte is received (matched address or data)*/
	Set_Bitfield(I2Cx->I2C_CR1.bits.ACK);
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	8813      	ldrh	r3, [r2, #0]
 8000dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd8:	8013      	strh	r3, [r2, #0]


	for (i = DataLength; i > 1 ; i--)
 8000dda:	7a7b      	ldrb	r3, [r7, #9]
 8000ddc:	75fb      	strb	r3, [r7, #23]
 8000dde:	e012      	b.n	8000e06 <MCAL_I2C_Master_RX+0x8e>
		{
			/*EV7: RxNE=1 cleared by reading DR register*/
			while(!EV7(I2Cx));
 8000de0:	bf00      	nop
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	695b      	ldr	r3, [r3, #20]
 8000de6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f8      	beq.n	8000de2 <MCAL_I2C_Master_RX+0x6a>
			/*  read the data to be sent on I2C DR register */
			*pRxData =  I2Cx->I2C_DR.reg;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	701a      	strb	r2, [r3, #0]
			pRxData++;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
	for (i = DataLength; i > 1 ; i--)
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
 8000e06:	7dfb      	ldrb	r3, [r7, #23]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d8e9      	bhi.n	8000de0 <MCAL_I2C_Master_RX+0x68>


		}
	/*EV7_1: RxNE=1 cleared by reading DR register, program ACK=0 and STOP request */
	/* Disable Acknowledge return after a byte is received (matched address or data)*/
	Reset_Bitfield(I2Cx->I2C_CR1.bits.ACK);
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	8813      	ldrh	r3, [r2, #0]
 8000e10:	f36f 238a 	bfc	r3, #10, #1
 8000e14:	8013      	strh	r3, [r2, #0]
	if(Stop == With_Stop){
 8000e16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d102      	bne.n	8000e24 <MCAL_I2C_Master_RX+0xac>
		/* Set the STOP bit in the I2C_CR1 register to generate a Stop condition */
		I2C_Generate_Stop(I2Cx);
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff fcaa 	bl	8000778 <I2C_Generate_Stop>
	}
	// Return I2C ACK Config to its original
	if(Global_I2C_Config[I2Cx_INDEX].I2C_ACK_Control == I2C_ACK_Enable){
 8000e24:	7dba      	ldrb	r2, [r7, #22]
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <MCAL_I2C_Master_RX+0xe4>)
 8000e28:	4613      	mov	r3, r2
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4413      	add	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	331a      	adds	r3, #26
 8000e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3c:	d105      	bne.n	8000e4a <MCAL_I2C_Master_RX+0xd2>
		Set_Bitfield(I2Cx->I2C_CR1.bits.ACK);
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	8813      	ldrh	r3, [r2, #0]
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e46:	8013      	strh	r3, [r2, #0]
	}else{
		Reset_Bitfield(I2Cx->I2C_CR1.bits.ACK);
	}


}
 8000e48:	e004      	b.n	8000e54 <MCAL_I2C_Master_RX+0xdc>
		Reset_Bitfield(I2Cx->I2C_CR1.bits.ACK);
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	8813      	ldrh	r3, [r2, #0]
 8000e4e:	f36f 238a 	bfc	r3, #10, #1
 8000e52:	8013      	strh	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000054 	.word	0x20000054

08000e60 <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 * =============================================================
 */

void I2C1_EV_IRQHandler()
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
	uint8_t dummyRead;

	struct I2C_IRQ_Src irq_src;
	irq_src.I2C_EV_STOP = (I2C1->I2C_SR1.bits.STOPF);
 8000e66:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	793b      	ldrb	r3, [r7, #4]
 8000e74:	f362 0300 	bfi	r3, r2, #0, #1
 8000e78:	713b      	strb	r3, [r7, #4]
	irq_src.I2C_EV_ADDR_Matched = (I2C1->I2C_SR1.bits.ADDR);
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	793b      	ldrb	r3, [r7, #4]
 8000e88:	f362 0341 	bfi	r3, r2, #1, #1
 8000e8c:	713b      	strb	r3, [r7, #4]
	irq_src.I2C_EV_DATA_REQ = (I2C1->I2C_SR2.bits.TRA);
 8000e8e:	4b29      	ldr	r3, [pc, #164]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	793b      	ldrb	r3, [r7, #4]
 8000e9c:	f362 0382 	bfi	r3, r2, #2, #1
 8000ea0:	713b      	strb	r3, [r7, #4]
	irq_src.I2C_EV_DATA_RCV = ~(I2C1->I2C_SR2.bits.TRA);
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	793b      	ldrb	r3, [r7, #4]
 8000eba:	f362 03c3 	bfi	r3, r2, #3, #1
 8000ebe:	713b      	strb	r3, [r7, #4]
	// Slave mode
	if(!I2C1->I2C_SR2.bits.MSL){
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d129      	bne.n	8000f24 <I2C1_EV_IRQHandler+0xc4>
		// Slave Received address matched
		if(irq_src.I2C_EV_ADDR_Matched){
 8000ed0:	793b      	ldrb	r3, [r7, #4]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d008      	beq.n	8000eee <I2C1_EV_IRQHandler+0x8e>
			dummyRead  = I2C1->I2C_SR1.reg ;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	71fb      	strb	r3, [r7, #7]
			dummyRead  = I2C1->I2C_SR2.reg;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	699b      	ldr	r3, [r3, #24]
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	e01a      	b.n	8000f24 <I2C1_EV_IRQHandler+0xc4>
		}else if(irq_src.I2C_EV_DATA_RCV){
 8000eee:	793b      	ldrb	r3, [r7, #4]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <I2C1_EV_IRQHandler+0xa4>
			dummyRead  = I2C1->I2C_DR.reg ;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e00f      	b.n	8000f24 <I2C1_EV_IRQHandler+0xc4>
		}else if(irq_src.I2C_EV_STOP){
 8000f04:	793b      	ldrb	r3, [r7, #4]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d009      	beq.n	8000f24 <I2C1_EV_IRQHandler+0xc4>
			dummyRead  = I2C1->I2C_SR1.reg ;
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	71fb      	strb	r3, [r7, #7]
			Set_Config(I2C1->I2C_CR1.reg, 0x0000);
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <I2C1_EV_IRQHandler+0xd4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6812      	ldr	r2, [r2, #0]
 8000f22:	601a      	str	r2, [r3, #0]
		}
	}
	Global_I2C_Config[I2C1_INDEX].P_IRQ_CallBack(irq_src);
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <I2C1_EV_IRQHandler+0xd8>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	7938      	ldrb	r0, [r7, #4]
 8000f2a:	4798      	blx	r3
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	2000001c 	.word	0x2000001c
 8000f38:	20000054 	.word	0x20000054

08000f3c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler()
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <I2C_EEPROM_Init>:


#include "I2C_EEPROM.h"

void I2C_EEPROM_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0

	I2C_Config_t I2C_EEPROMCfg;

	/* I2C Controller as Master */
	I2C_EEPROMCfg.G_CallAddress_Detection = G_CallAddress_Enable;
 8000f4e:	2340      	movs	r3, #64	; 0x40
 8000f50:	f887 3020 	strb.w	r3, [r7, #32]
	I2C_EEPROMCfg.Bus_Mode = I2C_Mode;
 8000f54:	23fd      	movs	r3, #253	; 0xfd
 8000f56:	713b      	strb	r3, [r7, #4]
	I2C_EEPROMCfg.Clock_Stretch = Clock_Stretch_Enable;
 8000f58:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 8000f5c:	823b      	strh	r3, [r7, #16]
	I2C_EEPROMCfg.I2C_Addressing_Mode = Addressing_Mode_7bit;
 8000f5e:	f46f 4300 	mvn.w	r3, #32768	; 0x8000
 8000f62:	617b      	str	r3, [r7, #20]
	I2C_EEPROMCfg.I2C_ClockSpeed.I2C_SpeedMode = Standard_Speed_Mode;
 8000f64:	f46f 4300 	mvn.w	r3, #32768	; 0x8000
 8000f68:	60bb      	str	r3, [r7, #8]
	I2C_EEPROMCfg.I2C_ClockSpeed.I2C_ClockFreq = I2C_SM_100KHz;
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	; (8000fa0 <I2C_EEPROM_Init+0x58>)
 8000f6c:	60fb      	str	r3, [r7, #12]
	I2C_EEPROMCfg.I2C_ACK_Control = I2C_ACK_Enable;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f72:	83fb      	strh	r3, [r7, #30]
	I2C_EEPROMCfg.IRQ_Enable = I2C_IRQ_Disable;
 8000f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f78:	847b      	strh	r3, [r7, #34]	; 0x22
	I2C_EEPROMCfg.P_IRQ_CallBack = NULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24

	MCAL_I2C_Init(I2C1, &I2C_EEPROMCfg);
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <I2C_EEPROM_Init+0x5c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	1d3a      	adds	r2, r7, #4
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fc60 	bl	800084c <MCAL_I2C_Init>
	MCAL_I2C_GPIO_Set_Pins(I2C1);
 8000f8c:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <I2C_EEPROM_Init+0x5c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fe2f 	bl	8000bf4 <MCAL_I2C_GPIO_Set_Pins>

}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	; 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	000186a0 	.word	0x000186a0
 8000fa4:	2000001c 	.word	0x2000001c

08000fa8 <I2C_EEPROM_Write_Data>:

void I2C_EEPROM_Write_Data(uint32_t Memory_Address , uint8_t* PTxBuffer , uint8_t DataLength){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b0c8      	sub	sp, #288	; 0x120
 8000fac:	af02      	add	r7, sp, #8
 8000fae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fb2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fb6:	6018      	str	r0, [r3, #0]
 8000fb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fbc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000fc0:	6019      	str	r1, [r3, #0]
 8000fc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fc6:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000fca:	701a      	strb	r2, [r3, #0]
	uint8_t i=0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t Ebuffer[256];

	Ebuffer[0] = (uint8_t)(Memory_Address >> 8);		// Send Higher Byte of memory address
 8000fd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fd6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fe4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000fe8:	701a      	strb	r2, [r3, #0]
	Ebuffer[1] = (uint8_t)(Memory_Address);			// Send Lower Byte of memory address
 8000fea:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000fee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000ffa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000ffe:	705a      	strb	r2, [r3, #1]

	for( i =2 ; i<(DataLength+2) ; i++)
 8001000:	2302      	movs	r3, #2
 8001002:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001006:	e015      	b.n	8001034 <I2C_EEPROM_Write_Data+0x8c>
	{
		Ebuffer[i]= PTxBuffer[i-2];
 8001008:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800100c:	3b02      	subs	r3, #2
 800100e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001012:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001016:	6812      	ldr	r2, [r2, #0]
 8001018:	441a      	add	r2, r3
 800101a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800101e:	7811      	ldrb	r1, [r2, #0]
 8001020:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001024:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001028:	54d1      	strb	r1, [r2, r3]
	for( i =2 ; i<(DataLength+2) ; i++)
 800102a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800102e:	3301      	adds	r3, #1
 8001030:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001034:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001038:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	1c5a      	adds	r2, r3, #1
 8001040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001044:	429a      	cmp	r2, r3
 8001046:	dadf      	bge.n	8001008 <I2C_EEPROM_Write_Data+0x60>
	}

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, Ebuffer, (DataLength+2), Start, With_Stop);
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <I2C_EEPROM_Write_Data+0xd0>)
 800104a:	6818      	ldr	r0, [r3, #0]
 800104c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001050:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	3302      	adds	r3, #2
 8001058:	b2db      	uxtb	r3, r3
 800105a:	f107 0214 	add.w	r2, r7, #20
 800105e:	2101      	movs	r1, #1
 8001060:	9101      	str	r1, [sp, #4]
 8001062:	2100      	movs	r1, #0
 8001064:	9100      	str	r1, [sp, #0]
 8001066:	212a      	movs	r1, #42	; 0x2a
 8001068:	f7ff fe10 	bl	8000c8c <MCAL_I2C_Master_TX>


}
 800106c:	bf00      	nop
 800106e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	2000001c 	.word	0x2000001c

0800107c <I2C_EEPROM_Read_Data>:
void I2C_EEPROM_Read_Data( uint32_t Memory_Address , uint8_t* PRxBuffer , uint8_t DataLength)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af02      	add	r7, sp, #8
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	4613      	mov	r3, r2
 8001088:	71fb      	strb	r3, [r7, #7]
	uint8_t Ebuffer[2];

	Ebuffer[0] = (uint8_t)(Memory_Address >> 8);		// Send Higher Byte of memory address
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	b2db      	uxtb	r3, r3
 8001090:	753b      	strb	r3, [r7, #20]
	Ebuffer[1] = (uint8_t)(Memory_Address);			// Send Lower Byte of memory address
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_Master_TX(I2C1, EEPROM_Slave_Address, Ebuffer, 2, Start, Without_Stop);
 8001098:	4b0d      	ldr	r3, [pc, #52]	; (80010d0 <I2C_EEPROM_Read_Data+0x54>)
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	f107 0214 	add.w	r2, r7, #20
 80010a0:	2300      	movs	r3, #0
 80010a2:	9301      	str	r3, [sp, #4]
 80010a4:	2300      	movs	r3, #0
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2302      	movs	r3, #2
 80010aa:	212a      	movs	r1, #42	; 0x2a
 80010ac:	f7ff fdee 	bl	8000c8c <MCAL_I2C_Master_TX>
	MCAL_I2C_Master_RX(I2C1, EEPROM_Slave_Address, PRxBuffer, DataLength, Repeated_Start, With_Stop);
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <I2C_EEPROM_Read_Data+0x54>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2201      	movs	r2, #1
 80010b8:	9201      	str	r2, [sp, #4]
 80010ba:	2201      	movs	r2, #1
 80010bc:	9200      	str	r2, [sp, #0]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	212a      	movs	r1, #42	; 0x2a
 80010c2:	f7ff fe59 	bl	8000d78 <MCAL_I2C_Master_RX>

}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000001c 	.word	0x2000001c

080010d4 <clock_init>:
	}
}


void clock_init(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

	//enable clock for GPIOB
	RCC_GPIOB_CLOCK_EN();
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <clock_init+0x2c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <clock_init+0x2c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f042 0208 	orr.w	r2, r2, #8
 80010e6:	619a      	str	r2, [r3, #24]
	//enable clock for Alternative IO
	RCC_AFIO_CLOCK_EN();
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <clock_init+0x2c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	699a      	ldr	r2, [r3, #24]
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <clock_init+0x2c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f042 0201 	orr.w	r2, r2, #1
 80010f6:	619a      	str	r2, [r3, #24]

}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000004 	.word	0x20000004

08001104 <main>:
 */



int main(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0

	clock_init();
 800110a:	f7ff ffe3 	bl	80010d4 <clock_init>

	I2C_EEPROM_Init();
 800110e:	f7ff ff1b 	bl	8000f48 <I2C_EEPROM_Init>
	uint8_t W_Data[7] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8001112:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <main+0x80>)
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	e892 0003 	ldmia.w	r2, {r0, r1}
 800111c:	6018      	str	r0, [r3, #0]
 800111e:	3304      	adds	r3, #4
 8001120:	8019      	strh	r1, [r3, #0]
 8001122:	3302      	adds	r3, #2
 8001124:	0c0a      	lsrs	r2, r1, #16
 8001126:	701a      	strb	r2, [r3, #0]
	uint8_t R_Data[7]= {0};
 8001128:	2300      	movs	r3, #0
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2100      	movs	r1, #0
 8001130:	460a      	mov	r2, r1
 8001132:	801a      	strh	r2, [r3, #0]
 8001134:	460a      	mov	r2, r1
 8001136:	709a      	strb	r2, [r3, #2]



	I2C_EEPROM_Write_Data(0xAF, W_Data, 7);
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2207      	movs	r2, #7
 800113e:	4619      	mov	r1, r3
 8001140:	20af      	movs	r0, #175	; 0xaf
 8001142:	f7ff ff31 	bl	8000fa8 <I2C_EEPROM_Write_Data>
	I2C_EEPROM_Read_Data(0xAF, R_Data, 7);
 8001146:	463b      	mov	r3, r7
 8001148:	2207      	movs	r2, #7
 800114a:	4619      	mov	r1, r3
 800114c:	20af      	movs	r0, #175	; 0xaf
 800114e:	f7ff ff95 	bl	800107c <I2C_EEPROM_Read_Data>

	W_Data[0] = 0xA;
 8001152:	230a      	movs	r3, #10
 8001154:	723b      	strb	r3, [r7, #8]
	W_Data[1] = 0xB;
 8001156:	230b      	movs	r3, #11
 8001158:	727b      	strb	r3, [r7, #9]
	W_Data[2] = 0xC;
 800115a:	230c      	movs	r3, #12
 800115c:	72bb      	strb	r3, [r7, #10]
	W_Data[3] = 0xD;
 800115e:	230d      	movs	r3, #13
 8001160:	72fb      	strb	r3, [r7, #11]

	I2C_EEPROM_Write_Data(0xFFF, W_Data, 4);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	2204      	movs	r2, #4
 8001168:	4619      	mov	r1, r3
 800116a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800116e:	f7ff ff1b 	bl	8000fa8 <I2C_EEPROM_Write_Data>
	I2C_EEPROM_Read_Data(0xFFF, W_Data, 4);
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	2204      	movs	r2, #4
 8001178:	4619      	mov	r1, r3
 800117a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800117e:	f7ff ff7d 	bl	800107c <I2C_EEPROM_Read_Data>




    /* Loop forever */
	for(;;);
 8001182:	e7fe      	b.n	8001182 <main+0x7e>
 8001184:	0800123c 	.word	0x0800123c

08001188 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800118a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800118c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001190:	480c      	ldr	r0, [pc, #48]	; (80011c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001192:	490d      	ldr	r1, [pc, #52]	; (80011c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001194:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <LoopForever+0xe>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a8:	4c0a      	ldr	r4, [pc, #40]	; (80011d4 <LoopForever+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011b6:	f000 f811 	bl	80011dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ba:	f7ff ffa3 	bl	8001104 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   r0, =_estack
 80011c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80011cc:	08001264 	.word	0x08001264
  ldr r2, =_sbss
 80011d0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80011d4:	2000009c 	.word	0x2000009c

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <__libc_init_array>:
 80011dc:	b570      	push	{r4, r5, r6, lr}
 80011de:	2600      	movs	r6, #0
 80011e0:	4d0c      	ldr	r5, [pc, #48]	; (8001214 <__libc_init_array+0x38>)
 80011e2:	4c0d      	ldr	r4, [pc, #52]	; (8001218 <__libc_init_array+0x3c>)
 80011e4:	1b64      	subs	r4, r4, r5
 80011e6:	10a4      	asrs	r4, r4, #2
 80011e8:	42a6      	cmp	r6, r4
 80011ea:	d109      	bne.n	8001200 <__libc_init_array+0x24>
 80011ec:	f000 f81a 	bl	8001224 <_init>
 80011f0:	2600      	movs	r6, #0
 80011f2:	4d0a      	ldr	r5, [pc, #40]	; (800121c <__libc_init_array+0x40>)
 80011f4:	4c0a      	ldr	r4, [pc, #40]	; (8001220 <__libc_init_array+0x44>)
 80011f6:	1b64      	subs	r4, r4, r5
 80011f8:	10a4      	asrs	r4, r4, #2
 80011fa:	42a6      	cmp	r6, r4
 80011fc:	d105      	bne.n	800120a <__libc_init_array+0x2e>
 80011fe:	bd70      	pop	{r4, r5, r6, pc}
 8001200:	f855 3b04 	ldr.w	r3, [r5], #4
 8001204:	4798      	blx	r3
 8001206:	3601      	adds	r6, #1
 8001208:	e7ee      	b.n	80011e8 <__libc_init_array+0xc>
 800120a:	f855 3b04 	ldr.w	r3, [r5], #4
 800120e:	4798      	blx	r3
 8001210:	3601      	adds	r6, #1
 8001212:	e7f2      	b.n	80011fa <__libc_init_array+0x1e>
 8001214:	0800125c 	.word	0x0800125c
 8001218:	0800125c 	.word	0x0800125c
 800121c:	0800125c 	.word	0x0800125c
 8001220:	08001260 	.word	0x08001260

08001224 <_init>:
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001226:	bf00      	nop
 8001228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122a:	bc08      	pop	{r3}
 800122c:	469e      	mov	lr, r3
 800122e:	4770      	bx	lr

08001230 <_fini>:
 8001230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001232:	bf00      	nop
 8001234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001236:	bc08      	pop	{r3}
 8001238:	469e      	mov	lr, r3
 800123a:	4770      	bx	lr
