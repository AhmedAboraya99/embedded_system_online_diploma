
GPIO_Driver_STM32F103C6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  08000424  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  08000424  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800042c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  08000438  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000438  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001076  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000310  00000000  00000000  000210ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003e6  00000000  00000000  000213bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000a8  00000000  00000000  000217a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000090  00000000  00000000  00021850  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001997  00000000  00000000  000218e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000820  00000000  00000000  00023277  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000076a8  00000000  00000000  00023a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002b13f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000148  00000000  00000000  0002b1bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800040c 	.word	0x0800040c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	0800040c 	.word	0x0800040c

08000170 <Get_CRLH_Position>:
#include "STM32F103X6_GPIO_Driver.h"

//assisted functions
uint8_t Get_CRLH_Position(uint16_t PINNumber)
{
	switch (PINNumber)
 8000170:	2880      	cmp	r0, #128	; 0x80
 8000172:	d033      	beq.n	80001dc <Get_CRLH_Position+0x6c>
 8000174:	d90e      	bls.n	8000194 <Get_CRLH_Position+0x24>
 8000176:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800017a:	d035      	beq.n	80001e8 <Get_CRLH_Position+0x78>
 800017c:	d81b      	bhi.n	80001b6 <Get_CRLH_Position+0x46>
 800017e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000182:	d02d      	beq.n	80001e0 <Get_CRLH_Position+0x70>
 8000184:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000188:	d02c      	beq.n	80001e4 <Get_CRLH_Position+0x74>
 800018a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800018e:	d10a      	bne.n	80001a6 <Get_CRLH_Position+0x36>
	//CRL
	case GPIO_PIN0:
		return 0;
		break;
	case GPIO_PIN1:
		return 4;
 8000190:	2004      	movs	r0, #4
	case GPIO_PIN15:
		return 28;
		break;
	}
	return 0;
}
 8000192:	4770      	bx	lr
	switch (PINNumber)
 8000194:	2808      	cmp	r0, #8
 8000196:	d019      	beq.n	80001cc <Get_CRLH_Position+0x5c>
 8000198:	d907      	bls.n	80001aa <Get_CRLH_Position+0x3a>
 800019a:	2820      	cmp	r0, #32
 800019c:	d01a      	beq.n	80001d4 <Get_CRLH_Position+0x64>
 800019e:	2840      	cmp	r0, #64	; 0x40
 80001a0:	d01a      	beq.n	80001d8 <Get_CRLH_Position+0x68>
 80001a2:	2810      	cmp	r0, #16
 80001a4:	d014      	beq.n	80001d0 <Get_CRLH_Position+0x60>
		return 0;
 80001a6:	2000      	movs	r0, #0
 80001a8:	4770      	bx	lr
	switch (PINNumber)
 80001aa:	2802      	cmp	r0, #2
 80001ac:	d0f0      	beq.n	8000190 <Get_CRLH_Position+0x20>
 80001ae:	2804      	cmp	r0, #4
 80001b0:	d1f9      	bne.n	80001a6 <Get_CRLH_Position+0x36>
		return 8;
 80001b2:	2008      	movs	r0, #8
 80001b4:	4770      	bx	lr
	switch (PINNumber)
 80001b6:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80001ba:	d017      	beq.n	80001ec <Get_CRLH_Position+0x7c>
 80001bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80001c0:	d016      	beq.n	80001f0 <Get_CRLH_Position+0x80>
 80001c2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80001c6:	d1ee      	bne.n	80001a6 <Get_CRLH_Position+0x36>
		return 20;
 80001c8:	2014      	movs	r0, #20
 80001ca:	4770      	bx	lr
		return 12;
 80001cc:	200c      	movs	r0, #12
 80001ce:	4770      	bx	lr
		return 16;
 80001d0:	2010      	movs	r0, #16
 80001d2:	4770      	bx	lr
		return 20;
 80001d4:	2014      	movs	r0, #20
 80001d6:	4770      	bx	lr
		return 24;
 80001d8:	2018      	movs	r0, #24
 80001da:	4770      	bx	lr
		return 28;
 80001dc:	201c      	movs	r0, #28
 80001de:	4770      	bx	lr
		return 8;
 80001e0:	2008      	movs	r0, #8
 80001e2:	4770      	bx	lr
		return 12;
 80001e4:	200c      	movs	r0, #12
 80001e6:	4770      	bx	lr
		return 16;
 80001e8:	2010      	movs	r0, #16
 80001ea:	4770      	bx	lr
		return 24;
 80001ec:	2018      	movs	r0, #24
 80001ee:	4770      	bx	lr
		return 28;
 80001f0:	201c      	movs	r0, #28
 80001f2:	4770      	bx	lr

080001f4 <MCAL_GPIO_init>:
 * 				 the configuration info for specified GPIO
* @retval -
* Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig){
 80001f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80001f6:	4606      	mov	r6, r0
 80001f8:	460d      	mov	r5, r1
	volatile uint32_t *Config_Reg = NULL;
	uint8_t PIN = 0;

	//Port configuration register low (GPIOx_CRL) configure pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  configure pins 8 -> 15
	Config_Reg = (PINConfig->GPIO_PINNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 80001fa:	8808      	ldrh	r0, [r1, #0]
 80001fc:	28ff      	cmp	r0, #255	; 0xff
 80001fe:	d81b      	bhi.n	8000238 <MCAL_GPIO_init+0x44>
 8000200:	4634      	mov	r4, r6

	//clear CNF[1:0] & MODE[1:0]
	(*Config_Reg) &= ~(0x0F << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 8000202:	f7ff ffb5 	bl	8000170 <Get_CRLH_Position>
 8000206:	230f      	movs	r3, #15
 8000208:	fa03 f000 	lsl.w	r0, r3, r0
 800020c:	6823      	ldr	r3, [r4, #0]
 800020e:	ea23 0000 	bic.w	r0, r3, r0
 8000212:	6020      	str	r0, [r4, #0]
	// GPIO PIN mode is output
	if ((PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP))
 8000214:	78ab      	ldrb	r3, [r5, #2]
 8000216:	1f1a      	subs	r2, r3, #4
 8000218:	b2d2      	uxtb	r2, r2
 800021a:	2a03      	cmp	r2, #3
 800021c:	d90e      	bls.n	800023c <MCAL_GPIO_init+0x48>
		PIN = (((PINConfig -> GPIO_Mode - 4 )<< 2 ) | (PINConfig -> GPIO_Speed )) & 0x0F;
	}

	else {
		//GPIO PIN Mode is input / Analog
		if ((PINConfig->GPIO_Mode == GPIO_Mode_IN_Float) ||  (PINConfig->GPIO_Mode == GPIO_Mode_Analog))
 800021e:	2b01      	cmp	r3, #1
 8000220:	d91c      	bls.n	800025c <MCAL_GPIO_init+0x68>
			{
				PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
			}
		else{
			PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 8000222:	0098      	lsls	r0, r3, #2
 8000224:	f000 070c 	and.w	r7, r0, #12

			if (PINConfig -> GPIO_Mode == GPIO_Mode_IN_PU ){
 8000228:	2b02      	cmp	r3, #2
 800022a:	d01b      	beq.n	8000264 <MCAL_GPIO_init+0x70>
				//ODR = 1 INPUT Pull Up
				GPIOx -> ODR |= PINConfig -> GPIO_PINNumber;
			}
			else{
				//ODR = 0 INPUT Pull Down
				GPIOx -> ODR &= ~(PINConfig -> GPIO_PINNumber);
 800022c:	68f3      	ldr	r3, [r6, #12]
 800022e:	882a      	ldrh	r2, [r5, #0]
 8000230:	ea23 0302 	bic.w	r3, r3, r2
 8000234:	60f3      	str	r3, [r6, #12]
 8000236:	e008      	b.n	800024a <MCAL_GPIO_init+0x56>
	Config_Reg = (PINConfig->GPIO_PINNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 8000238:	1d34      	adds	r4, r6, #4
 800023a:	e7e2      	b.n	8000202 <MCAL_GPIO_init+0xe>
		PIN = (((PINConfig -> GPIO_Mode - 4 )<< 2 ) | (PINConfig -> GPIO_Speed )) & 0x0F;
 800023c:	3b04      	subs	r3, #4
 800023e:	f995 7003 	ldrsb.w	r7, [r5, #3]
 8000242:	ea47 0383 	orr.w	r3, r7, r3, lsl #2
 8000246:	f003 070f 	and.w	r7, r3, #15
			}

		}
	}
	//write on CRL or CRH
	(*Config_Reg) |= (PIN << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 800024a:	8828      	ldrh	r0, [r5, #0]
 800024c:	f7ff ff90 	bl	8000170 <Get_CRLH_Position>
 8000250:	6822      	ldr	r2, [r4, #0]
 8000252:	fa07 f000 	lsl.w	r0, r7, r0
 8000256:	4302      	orrs	r2, r0
 8000258:	6022      	str	r2, [r4, #0]
}
 800025a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	f003 070c 	and.w	r7, r3, #12
 8000262:	e7f2      	b.n	800024a <MCAL_GPIO_init+0x56>
				GPIOx -> ODR |= PINConfig -> GPIO_PINNumber;
 8000264:	68f3      	ldr	r3, [r6, #12]
 8000266:	882a      	ldrh	r2, [r5, #0]
 8000268:	4313      	orrs	r3, r2
 800026a:	60f3      	str	r3, [r6, #12]
 800026c:	e7ed      	b.n	800024a <MCAL_GPIO_init+0x56>

0800026e <MCAL_GPIO_ReadPIN>:
 * Note			-none
 */
uint8_t MCAL_GPIO_ReadPIN (GPIO_TypeDef* GPIOx ,uint16_t PIN_Number)
{
	uint8_t BitStatus;
	if (( GPIOx->IDR & PIN_Number) != (uint32_t)GPIO_PIN_RESET)
 800026e:	6883      	ldr	r3, [r0, #8]
 8000270:	4219      	tst	r1, r3
 8000272:	d101      	bne.n	8000278 <MCAL_GPIO_ReadPIN+0xa>
	{
		BitStatus = GPIO_PIN_SET ;
	}else
	{
		BitStatus = GPIO_PIN_RESET ;
 8000274:	2000      	movs	r0, #0
	}

	return BitStatus ;
}
 8000276:	4770      	bx	lr
		BitStatus = GPIO_PIN_SET ;
 8000278:	2001      	movs	r0, #1
 800027a:	4770      	bx	lr

0800027c <MCAL_GPIO_TogglePIN>:
 * Note 		-None
 */

void MCAL_GPIO_TogglePIN (GPIO_TypeDef* GPIOx ,uint16_t PIN_Number){

	GPIOx->ODR ^= PIN_Number;
 800027c:	68c3      	ldr	r3, [r0, #12]
 800027e:	4059      	eors	r1, r3
 8000280:	60c1      	str	r1, [r0, #12]
}
 8000282:	4770      	bx	lr

08000284 <GPIO_init>:
#include "STM32f103X6_GPIO_Driver.c"

typedef volatile unsigned int vuint32_t;


void GPIO_init(){
 8000284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000288:	b082      	sub	sp, #8

	GPIO_PinConfig_t pinconfig;

	//MODE: init GPIOA pin 1 as input(reset state)
	//CNF: make PORTA pin 1 as floating input
	pinconfig.GPIO_PINNumber = GPIO_PIN1;
 800028a:	2502      	movs	r5, #2
 800028c:	f8ad 5004 	strh.w	r5, [sp, #4]
	pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000290:	2401      	movs	r4, #1
 8000292:	f88d 4006 	strb.w	r4, [sp, #6]
	MCAL_GPIO_init (GPIOA,&pinconfig);
 8000296:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80002f8 <GPIO_init+0x74>
 800029a:	a901      	add	r1, sp, #4
 800029c:	f8d8 0000 	ldr.w	r0, [r8]
 80002a0:	f7ff ffa8 	bl	80001f4 <MCAL_GPIO_init>


	//MODE: init GPIOB pin 1 as output with max speed = 10MHZ
	//CNF: make PORTB pin 1 as push-pull output
	pinconfig.GPIO_PINNumber = GPIO_PIN1;
 80002a4:	f8ad 5004 	strh.w	r5, [sp, #4]
	pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 80002a8:	2604      	movs	r6, #4
 80002aa:	f88d 6006 	strb.w	r6, [sp, #6]
	pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 80002ae:	f88d 4007 	strb.w	r4, [sp, #7]
	MCAL_GPIO_init (GPIOB,&pinconfig);
 80002b2:	4d10      	ldr	r5, [pc, #64]	; (80002f4 <GPIO_init+0x70>)
 80002b4:	eb0d 0106 	add.w	r1, sp, r6
 80002b8:	6828      	ldr	r0, [r5, #0]
 80002ba:	f7ff ff9b 	bl	80001f4 <MCAL_GPIO_init>

	/************************************************************/

	//MODE: init GPIOA pin 13 as input(reset state)
	//CNF: make PORTA pin 13 as floating input
	pinconfig.GPIO_PINNumber = GPIO_PIN13;
 80002be:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 80002c2:	f8ad 7004 	strh.w	r7, [sp, #4]
	pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 80002c6:	f88d 4006 	strb.w	r4, [sp, #6]
	MCAL_GPIO_init (GPIOA,&pinconfig);
 80002ca:	eb0d 0106 	add.w	r1, sp, r6
 80002ce:	f8d8 0000 	ldr.w	r0, [r8]
 80002d2:	f7ff ff8f 	bl	80001f4 <MCAL_GPIO_init>

	//MODE: init GPIOB pin 13 as output with max speed = 10MHZ
	//CNF: make PORTB pin 13 as push-pull output
	pinconfig.GPIO_PINNumber = GPIO_PIN13;
 80002d6:	f8ad 7004 	strh.w	r7, [sp, #4]
	pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 80002da:	f88d 6006 	strb.w	r6, [sp, #6]
	pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 80002de:	f88d 4007 	strb.w	r4, [sp, #7]
	MCAL_GPIO_init (GPIOB,&pinconfig);
 80002e2:	eb0d 0106 	add.w	r1, sp, r6
 80002e6:	6828      	ldr	r0, [r5, #0]
 80002e8:	f7ff ff84 	bl	80001f4 <MCAL_GPIO_init>

}
 80002ec:	b002      	add	sp, #8
 80002ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80002f2:	bf00      	nop
 80002f4:	20000004 	.word	0x20000004
 80002f8:	20000000 	.word	0x20000000

080002fc <clock_init>:


void clock_init(){
	//enable ABP2 clock register
	//enable IO port A clock
	 RCC_GPIOA_CLOCK_EN();
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <clock_init+0x18>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	699a      	ldr	r2, [r3, #24]
 8000302:	f042 0204 	orr.w	r2, r2, #4
 8000306:	619a      	str	r2, [r3, #24]

	//enable IO port B clock
	 RCC_GPIOB_CLOCK_EN();
 8000308:	699a      	ldr	r2, [r3, #24]
 800030a:	f042 0208 	orr.w	r2, r2, #8
 800030e:	619a      	str	r2, [r3, #24]
}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	20000008 	.word	0x20000008

08000318 <main>:
		for(j=0;j<255;j++);
	}
}

int main(void)
{
 8000318:	b508      	push	{r3, lr}
	clock_init();
 800031a:	f7ff ffef 	bl	80002fc <clock_init>
	GPIO_init();
 800031e:	f7ff ffb1 	bl	8000284 <GPIO_init>

    /* Loop forever */
	while(1){
		//mask Port A pin 1 input register
		if(MCAL_GPIO_ReadPIN(GPIOA,GPIO_PIN1)==0)
 8000322:	2102      	movs	r1, #2
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <main+0x50>)
 8000326:	6818      	ldr	r0, [r3, #0]
 8000328:	f7ff ffa1 	bl	800026e <MCAL_GPIO_ReadPIN>
 800032c:	b170      	cbz	r0, 800034c <main+0x34>
		{
			MCAL_GPIO_TogglePIN(GPIOB,GPIO_PIN1); 	//toggle led on pin 1 PortB
			while((MCAL_GPIO_ReadPIN(GPIOA,GPIO_PIN1))==0); //single pressing
		}
		//mask Port A pin 13 input register
		if(MCAL_GPIO_ReadPIN(GPIOA,GPIO_PIN13)==1)
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4b0d      	ldr	r3, [pc, #52]	; (8000368 <main+0x50>)
 8000334:	6818      	ldr	r0, [r3, #0]
 8000336:	f7ff ff9a 	bl	800026e <MCAL_GPIO_ReadPIN>
 800033a:	2801      	cmp	r0, #1
 800033c:	d1f1      	bne.n	8000322 <main+0xa>
		{
			//"multi pressing" toggle led on pin 13 PortB
			MCAL_GPIO_TogglePIN(GPIOB,GPIO_PIN13);
 800033e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000342:	4b0a      	ldr	r3, [pc, #40]	; (800036c <main+0x54>)
 8000344:	6818      	ldr	r0, [r3, #0]
 8000346:	f7ff ff99 	bl	800027c <MCAL_GPIO_TogglePIN>
		if(MCAL_GPIO_ReadPIN(GPIOA,GPIO_PIN1)==0)
 800034a:	e7ea      	b.n	8000322 <main+0xa>
			MCAL_GPIO_TogglePIN(GPIOB,GPIO_PIN1); 	//toggle led on pin 1 PortB
 800034c:	2102      	movs	r1, #2
 800034e:	4b07      	ldr	r3, [pc, #28]	; (800036c <main+0x54>)
 8000350:	6818      	ldr	r0, [r3, #0]
 8000352:	f7ff ff93 	bl	800027c <MCAL_GPIO_TogglePIN>
			while((MCAL_GPIO_ReadPIN(GPIOA,GPIO_PIN1))==0); //single pressing
 8000356:	2102      	movs	r1, #2
 8000358:	4b03      	ldr	r3, [pc, #12]	; (8000368 <main+0x50>)
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	f7ff ff87 	bl	800026e <MCAL_GPIO_ReadPIN>
 8000360:	2800      	cmp	r0, #0
 8000362:	d0f8      	beq.n	8000356 <main+0x3e>
 8000364:	e7e3      	b.n	800032e <main+0x16>
 8000366:	bf00      	nop
 8000368:	20000000 	.word	0x20000000
 800036c:	20000004 	.word	0x20000004

08000370 <Reset_Handler>:
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
 8000372:	4685      	mov	sp, r0
 8000374:	f3af 8000 	nop.w
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <LoopForever+0x6>)
 800037a:	490d      	ldr	r1, [pc, #52]	; (80003b0 <LoopForever+0xa>)
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <LoopForever+0xe>)
 800037e:	2300      	movs	r3, #0
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:
 8000382:	58d4      	ldr	r4, [r2, r3]
 8000384:	50c4      	str	r4, [r0, r3]
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:
 8000388:	18c4      	adds	r4, r0, r3
 800038a:	428c      	cmp	r4, r1
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <LoopForever+0x12>)
 8000390:	4c0a      	ldr	r4, [pc, #40]	; (80003bc <LoopForever+0x16>)
 8000392:	2300      	movs	r3, #0
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:
 8000396:	6013      	str	r3, [r2, #0]
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:
 800039a:	42a2      	cmp	r2, r4
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
 80003a2:	f7ff ffb9 	bl	8000318 <main>

080003a6 <LoopForever>:
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
 80003a8:	20002800 	.word	0x20002800
 80003ac:	20000000 	.word	0x20000000
 80003b0:	2000000c 	.word	0x2000000c
 80003b4:	0800042c 	.word	0x0800042c
 80003b8:	2000000c 	.word	0x2000000c
 80003bc:	20000028 	.word	0x20000028

080003c0 <ADC1_2_IRQHandler>:
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	2500      	movs	r5, #0
 80003c8:	4e0c      	ldr	r6, [pc, #48]	; (80003fc <__libc_init_array+0x38>)
 80003ca:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003cc:	1ba4      	subs	r4, r4, r6
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	f000 f81a 	bl	800040c <_init>
 80003d8:	2500      	movs	r5, #0
 80003da:	4e0a      	ldr	r6, [pc, #40]	; (8000404 <__libc_init_array+0x40>)
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <__libc_init_array+0x44>)
 80003de:	1ba4      	subs	r4, r4, r6
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	42a5      	cmp	r5, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ec:	4798      	blx	r3
 80003ee:	3501      	adds	r5, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003f6:	4798      	blx	r3
 80003f8:	3501      	adds	r5, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
