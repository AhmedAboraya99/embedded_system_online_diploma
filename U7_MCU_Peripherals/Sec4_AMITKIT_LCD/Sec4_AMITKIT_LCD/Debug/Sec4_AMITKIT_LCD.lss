
Sec4_AMITKIT_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000003a2  00000416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012c9  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b9  00000000  00000000  00001855  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008cb  00000000  00000000  0000210e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b1  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007e6  00000000  00000000  0000319d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00003983  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  8a:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	
	MCAL_DIO_WritePIN(LCD_CTRL, EN_SWITCH, DIO_PIN_SET);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	68 e0       	ldi	r22, 0x08	; 8
  96:	86 e3       	ldi	r24, 0x36	; 54
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	83 ed       	ldi	r24, 0xD3	; 211
  a0:	90 e3       	ldi	r25, 0x30	; 48
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_lcd_kick+0x10>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_lcd_kick+0x16>
  a8:	00 00       	nop
	_delay_ms(50);
	MCAL_DIO_WritePIN(LCD_CTRL, EN_SWITCH, DIO_PIN_RESET);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	68 e0       	ldi	r22, 0x08	; 8
  ae:	86 e3       	ldi	r24, 0x36	; 54
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
  b6:	08 95       	ret

000000b8 <LCD_DIO_INIT>:
	 	 as Output Pins
	 */
	/************************************************************/

//make control Pins output & reset them
	MCAL_DIO_SetPin(LCD_CTRL, EN_SWITCH, DIO_Mode_OUT_Low );
  b8:	42 e0       	ldi	r20, 0x02	; 2
  ba:	68 e0       	ldi	r22, 0x08	; 8
  bc:	86 e3       	ldi	r24, 0x36	; 54
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 8a 01 	call	0x314	; 0x314 <MCAL_DIO_SetPin>
	MCAL_DIO_SetPin(LCD_CTRL, RS_SWITCH, DIO_Mode_OUT_Low );
  c4:	42 e0       	ldi	r20, 0x02	; 2
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	86 e3       	ldi	r24, 0x36	; 54
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 8a 01 	call	0x314	; 0x314 <MCAL_DIO_SetPin>
	MCAL_DIO_SetPin(LCD_CTRL, RW_SWITCH, DIO_Mode_OUT_Low );
  d0:	42 e0       	ldi	r20, 0x02	; 2
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	86 e3       	ldi	r24, 0x36	; 54
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 8a 01 	call	0x314	; 0x314 <MCAL_DIO_SetPin>

	MCAL_PIN_Direction (LCD_DIO, DIO_PIN2, OUTPUT_PIN);

	MCAL_PIN_Direction (LCD_DIO, DIO_PIN3, OUTPUT_PIN);
	#endif
	MCAL_PIN_Direction (LCD_DIO, DIO_PIN4, OUTPUT_PIN);
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	60 e1       	ldi	r22, 0x10	; 16
  e0:	89 e3       	ldi	r24, 0x39	; 57
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MCAL_PIN_Direction>

	MCAL_PIN_Direction (LCD_DIO, DIO_PIN5, OUTPUT_PIN);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	60 e2       	ldi	r22, 0x20	; 32
  ec:	89 e3       	ldi	r24, 0x39	; 57
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MCAL_PIN_Direction>

	MCAL_PIN_Direction (LCD_DIO, DIO_PIN6, OUTPUT_PIN);
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	60 e4       	ldi	r22, 0x40	; 64
  f8:	89 e3       	ldi	r24, 0x39	; 57
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MCAL_PIN_Direction>

	MCAL_PIN_Direction (LCD_DIO, DIO_PIN7, OUTPUT_PIN);	
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	60 e8       	ldi	r22, 0x80	; 128
 104:	89 e3       	ldi	r24, 0x39	; 57
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MCAL_PIN_Direction>
 10c:	08 95       	ret

0000010e <LCD_check_lcd_isbusy>:
	#ifdef EIGHT_BIT_MODE
	Reset_Pin(DataDir_LCD_PORT, 0xFF) ;
	#endif 
	
	#ifdef FOUR_BIT_MODE
	Reset_Pin(DataDir_LCD_PORT, 0xFF<<DATA_shift) ;
 10e:	8a b3       	in	r24, 0x1a	; 26
 110:	1a ba       	out	0x1a, r1	; 26
	#endif
	
	MCAL_DIO_WritePIN(LCD_CTRL ,RW_SWITCH,DIO_PIN_SET);
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	64 e0       	ldi	r22, 0x04	; 4
 116:	86 e3       	ldi	r24, 0x36	; 54
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
	MCAL_DIO_WritePIN(LCD_CTRL ,RS_SWITCH,DIO_PIN_RESET);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	86 e3       	ldi	r24, 0x36	; 54
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
	
	LCD_lcd_kick();
 12a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#ifdef EIGHT_BIT_MODE
	Set_Pin(DataDir_LCD_PORT, 0xFF) ;
	#endif
	
	#ifdef FOUR_BIT_MODE
	Set_Pin(DataDir_LCD_PORT, 0xFF<<DATA_shift) ;
 12e:	8a b3       	in	r24, 0x1a	; 26
 130:	80 6f       	ori	r24, 0xF0	; 240
 132:	8a bb       	out	0x1a, r24	; 26
	#endif
	MCAL_DIO_WritePIN(LCD_CTRL ,RW_SWITCH, DIO_PIN_RESET);
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	64 e0       	ldi	r22, 0x04	; 4
 138:	86 e3       	ldi	r24, 0x36	; 54
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
 140:	08 95       	ret

00000142 <LCD_WRITE_COMMAND>:

}


void LCD_WRITE_COMMAND(unsigned char command){
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
	LCD_check_lcd_isbusy();
 146:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_check_lcd_isbusy>
		LCD_lcd_kick();

	#endif
	#ifdef FOUR_BIT_MODE
		
		LCD_check_lcd_isbusy();
 14a:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_check_lcd_isbusy>

		/* take 1st 4 bits of command */
		//LCD_PORT = ((LCD_PORT & 0x0F) | (command & 0xF0));
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) | (command & 0xF0));
 14e:	6b b3       	in	r22, 0x1b	; 27
 150:	6f 70       	andi	r22, 0x0F	; 15
 152:	8c 2f       	mov	r24, r28
 154:	80 7f       	andi	r24, 0xF0	; 240
 156:	68 2b       	or	r22, r24
 158:	89 e3       	ldi	r24, 0x39	; 57
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_WritePort>
		
		//turn RW&RS OFF for instruction write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_RESET);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	62 e0       	ldi	r22, 0x02	; 2
 164:	86 e3       	ldi	r24, 0x36	; 54
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 16c:	40 e0       	ldi	r20, 0x00	; 0
 16e:	64 e0       	ldi	r22, 0x04	; 4
 170:	86 e3       	ldi	r24, 0x36	; 54
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
		
		LCD_lcd_kick();
 178:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		
		/*send 2nd 4 bits of command */
		//LCD_PORT= (LCD_PORT & 0x0F) | (command<<4);
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) |(command<<DATA_shift));
 17c:	6b b3       	in	r22, 0x1b	; 27
 17e:	20 e1       	ldi	r18, 0x10	; 16
 180:	c2 9f       	mul	r28, r18
 182:	c0 01       	movw	r24, r0
 184:	11 24       	eor	r1, r1
 186:	6f 70       	andi	r22, 0x0F	; 15
 188:	68 2b       	or	r22, r24
 18a:	89 e3       	ldi	r24, 0x39	; 57
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_WritePort>
		
		//turn RW&RS OFF for instruction write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_RESET);
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	62 e0       	ldi	r22, 0x02	; 2
 196:	86 e3       	ldi	r24, 0x36	; 54
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	64 e0       	ldi	r22, 0x04	; 4
 1a2:	86 e3       	ldi	r24, 0x36	; 54
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>

		LCD_lcd_kick();
 1aa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		
	#endif
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <LCD_clear_screen>:

#include "lcd.h"


void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
 1b8:	08 95       	ret

000001ba <LCD_GOTO_XY>:
	_delay_ms(50);
	MCAL_DIO_WritePIN(LCD_CTRL, EN_SWITCH, DIO_PIN_RESET);

}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	c8 2f       	mov	r28, r24
 1c0:	d6 2f       	mov	r29, r22
	if (line == 1)
 1c2:	81 30       	cpi	r24, 0x01	; 1
 1c4:	31 f4       	brne	.+12     	; 0x1d2 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 1c6:	60 31       	cpi	r22, 0x10	; 16
 1c8:	20 f4       	brcc	.+8      	; 0x1d2 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	86 0f       	add	r24, r22
 1ce:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 1d2:	c2 30       	cpi	r28, 0x02	; 2
 1d4:	31 f4       	brne	.+12     	; 0x1e2 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 1d6:	d0 31       	cpi	r29, 0x10	; 16
 1d8:	20 f4       	brcc	.+8      	; 0x1e2 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 1da:	80 ec       	ldi	r24, 0xC0	; 192
 1dc:	8d 0f       	add	r24, r29
 1de:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
		}
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <LCD_INIT>:
 1e8:	87 e8       	ldi	r24, 0x87	; 135
 1ea:	93 e1       	ldi	r25, 0x13	; 19
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <LCD_INIT+0x4>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_INIT+0xa>
 1f2:	00 00       	nop
}

void LCD_INIT(){

	_delay_ms(20);
	LCD_DIO_INIT();
 1f4:	0e 94 5c 00 	call	0xb8	; 0xb8 <LCD_DIO_INIT>
 1f8:	85 ea       	ldi	r24, 0xA5	; 165
 1fa:	9e e0       	ldi	r25, 0x0E	; 14
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_INIT+0x14>
 200:	00 c0       	rjmp	.+0      	; 0x202 <LCD_INIT+0x1a>
 202:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 204:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
	#endif
	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_RETURN_HOME);		/* send for 4-bit initialization of LCD  */
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);              /* 2 line, 5*7 matrix in 4-bit mode */
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
	#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 21a:	80 e8       	ldi	r24, 0x80	; 128
 21c:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 220:	8f e0       	ldi	r24, 0x0F	; 15
 222:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_WRITE_COMMAND>
 226:	08 95       	ret

00000228 <LCD_WRITE_CHAR>:

		LCD_lcd_kick();
		
	#endif
}
void LCD_WRITE_CHAR(unsigned char character){
 228:	cf 93       	push	r28
 22a:	c8 2f       	mov	r28, r24
		_delay_ms(1);
		LCD_lcd_kick();	
	#endif
	#ifdef FOUR_BIT_MODE
		//turn RS ON & RW OFF for Data write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_SET);
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	62 e0       	ldi	r22, 0x02	; 2
 230:	86 e3       	ldi	r24, 0x36	; 54
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	64 e0       	ldi	r22, 0x04	; 4
 23c:	86 e3       	ldi	r24, 0x36	; 54
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>

		
		//LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) | (character & 0xF0));
 244:	6b b3       	in	r22, 0x1b	; 27
 246:	6f 70       	andi	r22, 0x0F	; 15
 248:	8c 2f       	mov	r24, r28
 24a:	80 7f       	andi	r24, 0xF0	; 240
 24c:	68 2b       	or	r22, r24
 24e:	89 e3       	ldi	r24, 0x39	; 57
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_WritePort>
		
		LCD_lcd_kick();
 256:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>

		//LCD_PORT = (LCD_PORT & 0x0F) | (character<<4);
		MCAL_DIO_WritePort(LCD_DIO,(LCD_PORT & 0x0F) | (character<<DATA_shift));
 25a:	6b b3       	in	r22, 0x1b	; 27
 25c:	20 e1       	ldi	r18, 0x10	; 16
 25e:	c2 9f       	mul	r28, r18
 260:	c0 01       	movw	r24, r0
 262:	11 24       	eor	r1, r1
 264:	6f 70       	andi	r22, 0x0F	; 15
 266:	68 2b       	or	r22, r24
 268:	89 e3       	ldi	r24, 0x39	; 57
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 cc 01 	call	0x398	; 0x398 <MCAL_DIO_WritePort>
		//turn RS ON & RW OFF for Data write mode.
		MCAL_DIO_WritePIN(LCD_CTRL, RS_SWITCH, DIO_PIN_SET);
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	86 e3       	ldi	r24, 0x36	; 54
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>
		MCAL_DIO_WritePIN(LCD_CTRL, RW_SWITCH, DIO_PIN_RESET);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	64 e0       	ldi	r22, 0x04	; 4
 280:	86 e3       	ldi	r24, 0x36	; 54
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 c0 01 	call	0x380	; 0x380 <MCAL_DIO_WritePIN>

		LCD_lcd_kick();
 288:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	#endif
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(char* string){
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	8c 01       	movw	r16, r24
	int count = 0;
 29a:	c0 e0       	ldi	r28, 0x00	; 0
 29c:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 29e:	18 c0       	rjmp	.+48     	; 0x2d0 <LCD_WRITE_STRING+0x40>
		count++;
 2a0:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 2a2:	0f 5f       	subi	r16, 0xFF	; 255
 2a4:	1f 4f       	sbci	r17, 0xFF	; 255
 2a6:	0e 94 14 01 	call	0x228	; 0x228 <LCD_WRITE_CHAR>
		if (count == 16)
 2aa:	c0 31       	cpi	r28, 0x10	; 16
 2ac:	d1 05       	cpc	r29, r1
 2ae:	29 f4       	brne	.+10     	; 0x2ba <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_GOTO_XY>
 2b8:	0b c0       	rjmp	.+22     	; 0x2d0 <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 2ba:	c0 32       	cpi	r28, 0x20	; 32
 2bc:	d1 05       	cpc	r29, r1
 2be:	41 f4       	brne	.+16     	; 0x2d0 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 2c0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCD_GOTO_XY>
			count = 0;
 2cc:	c0 e0       	ldi	r28, 0x00	; 0
 2ce:	d0 e0       	ldi	r29, 0x00	; 0
}


void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 2d0:	f8 01       	movw	r30, r16
 2d2:	80 81       	ld	r24, Z
 2d4:	81 11       	cpse	r24, r1
 2d6:	e4 cf       	rjmp	.-56     	; 0x2a0 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <main>:

int main(void)
{


	LCD_INIT();
 2e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_INIT>
 2e6:	83 ed       	ldi	r24, 0xD3	; 211
 2e8:	90 e3       	ldi	r25, 0x30	; 48
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0x8>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0xe>
 2f0:	00 00       	nop
	_delay_ms(50);

	LCD_WRITE_STRING("LEARN IN DEPTH");
 2f2:	80 e6       	ldi	r24, 0x60	; 96
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 48 01 	call	0x290	; 0x290 <LCD_WRITE_STRING>
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <main+0x18>

000002fc <MCAL_PIN_Direction>:
uint8_t MCAL_DIO_ReadPort (DIO_TypeDef* DIOx ){

	uint16_t PortVal;
		PortVal = (uint16_t) DIOx -> PINx;
		return PortVal ;
}
 2fc:	fc 01       	movw	r30, r24
 2fe:	41 30       	cpi	r20, 0x01	; 1
 300:	21 f4       	brne	.+8      	; 0x30a <MCAL_PIN_Direction+0xe>
 302:	81 81       	ldd	r24, Z+1	; 0x01
 304:	68 2b       	or	r22, r24
 306:	61 83       	std	Z+1, r22	; 0x01
 308:	08 95       	ret
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	60 95       	com	r22
 30e:	69 23       	and	r22, r25
 310:	61 83       	std	Z+1, r22	; 0x01
 312:	08 95       	ret

00000314 <MCAL_DIO_SetPin>:
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	8c 01       	movw	r16, r24
 31e:	d6 2f       	mov	r29, r22
 320:	c4 2f       	mov	r28, r20
 322:	8e ef       	ldi	r24, 0xFE	; 254
 324:	84 0f       	add	r24, r20
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	88 f4       	brcc	.+34     	; 0x34c <MCAL_DIO_SetPin+0x38>
 32a:	41 e0       	ldi	r20, 0x01	; 1
 32c:	c8 01       	movw	r24, r16
 32e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MCAL_PIN_Direction>
 332:	c3 30       	cpi	r28, 0x03	; 3
 334:	29 f4       	brne	.+10     	; 0x340 <MCAL_DIO_SetPin+0x2c>
 336:	f8 01       	movw	r30, r16
 338:	82 81       	ldd	r24, Z+2	; 0x02
 33a:	d8 2b       	or	r29, r24
 33c:	d2 83       	std	Z+2, r29	; 0x02
 33e:	1b c0       	rjmp	.+54     	; 0x376 <MCAL_DIO_SetPin+0x62>
 340:	f8 01       	movw	r30, r16
 342:	82 81       	ldd	r24, Z+2	; 0x02
 344:	d0 95       	com	r29
 346:	d8 23       	and	r29, r24
 348:	d2 83       	std	Z+2, r29	; 0x02
 34a:	15 c0       	rjmp	.+42     	; 0x376 <MCAL_DIO_SetPin+0x62>
 34c:	42 30       	cpi	r20, 0x02	; 2
 34e:	98 f4       	brcc	.+38     	; 0x376 <MCAL_DIO_SetPin+0x62>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	c8 01       	movw	r24, r16
 354:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MCAL_PIN_Direction>
 358:	c1 11       	cpse	r28, r1
 35a:	06 c0       	rjmp	.+12     	; 0x368 <MCAL_DIO_SetPin+0x54>
 35c:	f8 01       	movw	r30, r16
 35e:	82 81       	ldd	r24, Z+2	; 0x02
 360:	d0 95       	com	r29
 362:	d8 23       	and	r29, r24
 364:	d2 83       	std	Z+2, r29	; 0x02
 366:	07 c0       	rjmp	.+14     	; 0x376 <MCAL_DIO_SetPin+0x62>
 368:	f8 01       	movw	r30, r16
 36a:	82 81       	ldd	r24, Z+2	; 0x02
 36c:	d8 2b       	or	r29, r24
 36e:	d2 83       	std	Z+2, r29	; 0x02
 370:	80 b7       	in	r24, 0x30	; 48
 372:	8b 7f       	andi	r24, 0xFB	; 251
 374:	80 bf       	out	0x30, r24	; 48
 376:	df 91       	pop	r29
 378:	cf 91       	pop	r28
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	08 95       	ret

00000380 <MCAL_DIO_WritePIN>:
 * @param [in]	-PinNumber : Specific Pin number to be Write on according to @ref DIO_PINS_Define
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_DIO_WritePIN (DIO_TypeDef* DIOx ,uint8_t PIN_Number,uint8_t value ){
 380:	fc 01       	movw	r30, r24

	if (value == DIO_PIN_SET )
 382:	41 30       	cpi	r20, 0x01	; 1
 384:	21 f4       	brne	.+8      	; 0x38e <MCAL_DIO_WritePIN+0xe>
		{
		//Port bit set/reset register (PORTx_BRR)
		//BRy: Port x Reset bit y (y= 0 ... 15)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		Set_Pin( DIOx->PORTx , PIN_Number) ;
 386:	82 81       	ldd	r24, Z+2	; 0x02
 388:	68 2b       	or	r22, r24
 38a:	62 83       	std	Z+2, r22	; 0x02
 38c:	08 95       	ret
	else
		// Port bit set/reset register (PORTx_BSRR)
		// BSy: Port x Reset bit y (y= 0 ... 15)
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
		Reset_Pin(DIOx->PORTx, PIN_Number) ;
 38e:	92 81       	ldd	r25, Z+2	; 0x02
 390:	60 95       	com	r22
 392:	69 23       	and	r22, r25
 394:	62 83       	std	Z+2, r22	; 0x02
 396:	08 95       	ret

00000398 <MCAL_DIO_WritePort>:
 * Note 		-None
 */

void MCAL_DIO_WritePort (DIO_TypeDef* DIOx, uint8_t value ){

	DIOx->PORTx = (uint8_t) value;
 398:	fc 01       	movw	r30, r24
 39a:	62 83       	std	Z+2, r22	; 0x02
 39c:	08 95       	ret

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
