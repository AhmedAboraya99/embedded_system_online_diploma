
EXTI_GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001030  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08001160  08001160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800117c  0800117c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  0800117c  0800117c  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800117c  0800117c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800117c  0800117c  0001117c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001180  08001180  00011180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08001184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000001c  080011a0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080011a0  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000015b5  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000388  00000000  00000000  000215fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a62  00000000  00000000  00021982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000223e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000158  00000000  00000000  00022558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001e95  00000000  00000000  000226b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001367  00000000  00000000  00024545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000096f9  00000000  00000000  000258ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0002efa5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000550  00000000  00000000  0002eff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001148 	.word	0x08001148

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08001148 	.word	0x08001148

08000170 <Enable_NVIC>:
void (*GP_IRQ_Callback[15])(void);
//====================
//Generic Function
//====================
void Enable_NVIC (uint16_t IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE();
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
		break;
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_ENABLE();
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
		break;
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_ENABLE();
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
		break;
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_ENABLE();
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
		break;
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_ENABLE();
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
		break;
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE();
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
		break;
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE();
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
		break;
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:

void Disable_NVIC (uint16_t IRQ)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	{
	case 0:
			NVIC_IRQ6_EXTI0_DISABLE();
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
			break;
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
	case 1:
			NVIC_IRQ7_EXTI1_DISABLE();
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
			break;
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
	case 2:
			NVIC_IRQ8_EXTI2_DISABLE();
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
			break;
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
	case 3:
			NVIC_IRQ9_EXTI3_DISABLE();
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
			break;
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
	case 4:
			NVIC_IRQ10_EXTI4_DISABLE();
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
			break;
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
			NVIC_IRQ23_EXTI5_9_DISABLE();
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
			break;
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
			NVIC_IRQ40_EXTI10_15_DISABLE();
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
			break;
 80002f4:	bf00      	nop
	}
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Update_EXTI>:

void Update_EXTI(EXTI_pinConfig_t* EXTIConfig)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	//configure GPIO pin as AF input
	GPIO_PinConfig_t pinconfig;

	//MODE: init GPIOx pinx as input(reset state)
	//CNF: make PORTx pin x as floating input
	pinconfig.GPIO_PINNumber = EXTIConfig -> EXTI_Pin.GPIO_Pin;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891b      	ldrh	r3, [r3, #8]
 8000314:	813b      	strh	r3, [r7, #8]
	pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000316:	2301      	movs	r3, #1
 8000318:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_init (EXTIConfig -> EXTI_Pin.GPIO_Port,&pinconfig);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	f107 0208 	add.w	r2, r7, #8
 8000322:	4611      	mov	r1, r2
 8000324:	4618      	mov	r0, r3
 8000326:	f000 faf9 	bl	800091c <MCAL_GPIO_init>
	//update AFIO routing to EXTI line with port A, B, C , D
	uint8_t	AFIO_EXTICR_Index = EXTIConfig->EXTI_Pin.EXTI_LineNumber / 4 ;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]
	uint8_t	AFIO_EXTICR_Position = (EXTIConfig->EXTI_Pin.EXTI_LineNumber % 4) * 4;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]

	//reset and set AFIO_EXTICR to select the source input for EXTIx external interrupt
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTICR_Position);
 8000344:	4b6f      	ldr	r3, [pc, #444]	; (8000504 <Update_EXTI+0x1fc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	7bfa      	ldrb	r2, [r7, #15]
 800034a:	3202      	adds	r2, #2
 800034c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000350:	7bbb      	ldrb	r3, [r7, #14]
 8000352:	220f      	movs	r2, #15
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	43db      	mvns	r3, r3
 800035a:	4618      	mov	r0, r3
 800035c:	4b69      	ldr	r3, [pc, #420]	; (8000504 <Update_EXTI+0x1fc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	7bfa      	ldrb	r2, [r7, #15]
 8000362:	4001      	ands	r1, r0
 8000364:	3202      	adds	r2, #2
 8000366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_GPIO_EXTI_Mapping(EXTIConfig->EXTI_Pin.GPIO_Port) &0xF)<<AFIO_EXTICR_Position);
 800036a:	4b67      	ldr	r3, [pc, #412]	; (8000508 <Update_EXTI+0x200>)
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d11f      	bne.n	80003ba <Update_EXTI+0xb2>
 800037a:	4b64      	ldr	r3, [pc, #400]	; (800050c <Update_EXTI+0x204>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	605a      	str	r2, [r3, #4]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d115      	bne.n	80003b6 <Update_EXTI+0xae>
 800038a:	4b61      	ldr	r3, [pc, #388]	; (8000510 <Update_EXTI+0x208>)
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	605a      	str	r2, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d10b      	bne.n	80003b2 <Update_EXTI+0xaa>
 800039a:	4b5e      	ldr	r3, [pc, #376]	; (8000514 <Update_EXTI+0x20c>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	685b      	ldr	r3, [r3, #4]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <Update_EXTI+0xa6>
 80003aa:	2303      	movs	r3, #3
 80003ac:	e006      	b.n	80003bc <Update_EXTI+0xb4>
 80003ae:	2300      	movs	r3, #0
 80003b0:	e004      	b.n	80003bc <Update_EXTI+0xb4>
 80003b2:	2302      	movs	r3, #2
 80003b4:	e002      	b.n	80003bc <Update_EXTI+0xb4>
 80003b6:	2301      	movs	r3, #1
 80003b8:	e000      	b.n	80003bc <Update_EXTI+0xb4>
 80003ba:	2300      	movs	r3, #0
 80003bc:	7bba      	ldrb	r2, [r7, #14]
 80003be:	fa03 f002 	lsl.w	r0, r3, r2
 80003c2:	4b50      	ldr	r3, [pc, #320]	; (8000504 <Update_EXTI+0x1fc>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	7bfa      	ldrb	r2, [r7, #15]
 80003c8:	3202      	adds	r2, #2
 80003ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80003ce:	4b4d      	ldr	r3, [pc, #308]	; (8000504 <Update_EXTI+0x1fc>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	7bfa      	ldrb	r2, [r7, #15]
 80003d4:	4301      	orrs	r1, r0
 80003d6:	3202      	adds	r2, #2
 80003d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//reset edge trigger registers
	EXTI->RTSR &= ~(1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber );
 80003dc:	4b4e      	ldr	r3, [pc, #312]	; (8000518 <Update_EXTI+0x210>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	4619      	mov	r1, r3
 80003e8:	2301      	movs	r3, #1
 80003ea:	408b      	lsls	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	4619      	mov	r1, r3
 80003f0:	4b49      	ldr	r3, [pc, #292]	; (8000518 <Update_EXTI+0x210>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	400a      	ands	r2, r1
 80003f6:	609a      	str	r2, [r3, #8]
	EXTI->FTSR &= ~(1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber );
 80003f8:	4b47      	ldr	r3, [pc, #284]	; (8000518 <Update_EXTI+0x210>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	68da      	ldr	r2, [r3, #12]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	881b      	ldrh	r3, [r3, #0]
 8000402:	4619      	mov	r1, r3
 8000404:	2301      	movs	r3, #1
 8000406:	408b      	lsls	r3, r1
 8000408:	43db      	mvns	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	4b42      	ldr	r3, [pc, #264]	; (8000518 <Update_EXTI+0x210>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	400a      	ands	r2, r1
 8000412:	60da      	str	r2, [r3, #12]

	if(EXTIConfig -> Trigger_state == EXTI_Trigger_RISING)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	7b1b      	ldrb	r3, [r3, #12]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10d      	bne.n	8000438 <Update_EXTI+0x130>
	{
		EXTI->RTSR |= (1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 800041c:	4b3e      	ldr	r3, [pc, #248]	; (8000518 <Update_EXTI+0x210>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	881b      	ldrh	r3, [r3, #0]
 8000426:	4619      	mov	r1, r3
 8000428:	2301      	movs	r3, #1
 800042a:	408b      	lsls	r3, r1
 800042c:	4619      	mov	r1, r3
 800042e:	4b3a      	ldr	r3, [pc, #232]	; (8000518 <Update_EXTI+0x210>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	430a      	orrs	r2, r1
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	e02f      	b.n	8000498 <Update_EXTI+0x190>
	}
	else if(EXTIConfig -> Trigger_state == EXTI_Trigger_FALLING)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	7b1b      	ldrb	r3, [r3, #12]
 800043c:	2b01      	cmp	r3, #1
 800043e:	d10d      	bne.n	800045c <Update_EXTI+0x154>
	{
		EXTI->FTSR |= (1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 8000440:	4b35      	ldr	r3, [pc, #212]	; (8000518 <Update_EXTI+0x210>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68da      	ldr	r2, [r3, #12]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	881b      	ldrh	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	2301      	movs	r3, #1
 800044e:	408b      	lsls	r3, r1
 8000450:	4619      	mov	r1, r3
 8000452:	4b31      	ldr	r3, [pc, #196]	; (8000518 <Update_EXTI+0x210>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	430a      	orrs	r2, r1
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	e01d      	b.n	8000498 <Update_EXTI+0x190>
	}
	else if(EXTIConfig -> Trigger_state == EXTI_Trigger_ANYCHANGE)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	7b1b      	ldrb	r3, [r3, #12]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d119      	bne.n	8000498 <Update_EXTI+0x190>
	{
		EXTI->RTSR |= (1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <Update_EXTI+0x210>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	689a      	ldr	r2, [r3, #8]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	4619      	mov	r1, r3
 8000470:	2301      	movs	r3, #1
 8000472:	408b      	lsls	r3, r1
 8000474:	4619      	mov	r1, r3
 8000476:	4b28      	ldr	r3, [pc, #160]	; (8000518 <Update_EXTI+0x210>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	430a      	orrs	r2, r1
 800047c:	609a      	str	r2, [r3, #8]
		EXTI->FTSR |= (1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 800047e:	4b26      	ldr	r3, [pc, #152]	; (8000518 <Update_EXTI+0x210>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	68da      	ldr	r2, [r3, #12]
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	4619      	mov	r1, r3
 800048a:	2301      	movs	r3, #1
 800048c:	408b      	lsls	r3, r1
 800048e:	4619      	mov	r1, r3
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <Update_EXTI+0x210>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	430a      	orrs	r2, r1
 8000496:	60da      	str	r2, [r3, #12]
	}
	//Update IRQ Handling Callback
	GP_IRQ_Callback[EXTIConfig->EXTI_Pin.EXTI_LineNumber] = EXTIConfig->P_IRQ_CallBack;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	4619      	mov	r1, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	691b      	ldr	r3, [r3, #16]
 80004a2:	4a1e      	ldr	r2, [pc, #120]	; (800051c <Update_EXTI+0x214>)
 80004a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//Enable / Disable IRQ & NVIC
	if(EXTIConfig -> IRQ_EN == EXTI_IRQ_ENABLE)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	7b5b      	ldrb	r3, [r3, #13]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d112      	bne.n	80004d6 <Update_EXTI+0x1ce>
	{
		EXTI ->IMR |= (1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <Update_EXTI+0x210>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	4619      	mov	r1, r3
 80004bc:	2301      	movs	r3, #1
 80004be:	408b      	lsls	r3, r1
 80004c0:	4619      	mov	r1, r3
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <Update_EXTI+0x210>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	601a      	str	r2, [r3, #0]
		Enable_NVIC(EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff fe4e 	bl	8000170 <Enable_NVIC>
	}else
	{
		EXTI ->IMR &= ~(1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber);
		Disable_NVIC(EXTIConfig->EXTI_Pin.EXTI_LineNumber);
	}
}
 80004d4:	e012      	b.n	80004fc <Update_EXTI+0x1f4>
		EXTI ->IMR &= ~(1<<EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <Update_EXTI+0x210>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	4619      	mov	r1, r3
 80004e2:	2301      	movs	r3, #1
 80004e4:	408b      	lsls	r3, r1
 80004e6:	43db      	mvns	r3, r3
 80004e8:	4619      	mov	r1, r3
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <Update_EXTI+0x210>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	400a      	ands	r2, r1
 80004f0:	601a      	str	r2, [r3, #0]
		Disable_NVIC(EXTIConfig->EXTI_Pin.EXTI_LineNumber);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	881b      	ldrh	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff fea0 	bl	800023c <Disable_NVIC>
}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000014 	.word	0x20000014
 8000508:	20000000 	.word	0x20000000
 800050c:	20000004 	.word	0x20000004
 8000510:	20000008 	.word	0x20000008
 8000514:	2000000c 	.word	0x2000000c
 8000518:	20000010 	.word	0x20000010
 800051c:	2000003c 	.word	0x2000003c

08000520 <MCAL_EXTI_init>:
*  @param [in]	-	EXTIConfig : Pointer to EXTI_PinConfig_t which contains
 * 				 	the configuration info for specified EXTI
* @retval		-	None
* Note			- 	None
*/
void  MCAL_EXTI_init (EXTI_pinConfig_t* EXTIConfig){
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

	Update_EXTI(EXTIConfig);
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f7ff feed 	bl	8000308 <Update_EXTI>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <EXTI0_IRQHandler>:

//====================
//ISR Functions
//====================

void EXTI0_IRQHandler(void){
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<0 ;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <EXTI0_IRQHandler+0x20>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	695a      	ldr	r2, [r3, #20]
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <EXTI0_IRQHandler+0x20>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f042 0201 	orr.w	r2, r2, #1
 800054a:	615a      	str	r2, [r3, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[0]();
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <EXTI0_IRQHandler+0x24>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4798      	blx	r3
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000010 	.word	0x20000010
 800055c:	2000003c 	.word	0x2000003c

08000560 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<1 ;
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <EXTI1_IRQHandler+0x20>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	695a      	ldr	r2, [r3, #20]
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <EXTI1_IRQHandler+0x20>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f042 0202 	orr.w	r2, r2, #2
 8000572:	615a      	str	r2, [r3, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[1]();
 8000574:	4b03      	ldr	r3, [pc, #12]	; (8000584 <EXTI1_IRQHandler+0x24>)
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	4798      	blx	r3
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	20000010 	.word	0x20000010
 8000584:	2000003c 	.word	0x2000003c

08000588 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<2 ;
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <EXTI2_IRQHandler+0x20>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI2_IRQHandler+0x20>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f042 0204 	orr.w	r2, r2, #4
 800059a:	615a      	str	r2, [r3, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[2]();
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI2_IRQHandler+0x24>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4798      	blx	r3
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000010 	.word	0x20000010
 80005ac:	2000003c 	.word	0x2000003c

080005b0 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<3 ;
 80005b4:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <EXTI3_IRQHandler+0x20>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	695a      	ldr	r2, [r3, #20]
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <EXTI3_IRQHandler+0x20>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f042 0208 	orr.w	r2, r2, #8
 80005c2:	615a      	str	r2, [r3, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[3]();
 80005c4:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <EXTI3_IRQHandler+0x24>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4798      	blx	r3
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000010 	.word	0x20000010
 80005d4:	2000003c 	.word	0x2000003c

080005d8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	//Clear EXTI Pending Register by writing 1 to clear
	EXTI -> PR |= 1<<4 ;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <EXTI4_IRQHandler+0x20>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	695a      	ldr	r2, [r3, #20]
 80005e2:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <EXTI4_IRQHandler+0x20>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f042 0210 	orr.w	r2, r2, #16
 80005ea:	615a      	str	r2, [r3, #20]
	//Call IRQ Call back function
	GP_IRQ_Callback[4]();
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <EXTI4_IRQHandler+0x24>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	4798      	blx	r3
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000010 	.word	0x20000010
 80005fc:	2000003c 	.word	0x2000003c

08000600 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5){
 8000604:	4b2d      	ldr	r3, [pc, #180]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f003 0320 	and.w	r3, r3, #32
 800060e:	2b00      	cmp	r3, #0
 8000610:	d00a      	beq.n	8000628 <EXTI9_5_IRQHandler+0x28>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<5 ;
 8000612:	4b2a      	ldr	r3, [pc, #168]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	695a      	ldr	r2, [r3, #20]
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f042 0220 	orr.w	r2, r2, #32
 8000620:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[5]();
 8000622:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <EXTI9_5_IRQHandler+0xc0>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<6){
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000632:	2b00      	cmp	r3, #0
 8000634:	d00a      	beq.n	800064c <EXTI9_5_IRQHandler+0x4c>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<6 ;
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	695a      	ldr	r2, [r3, #20]
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000644:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[6]();
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <EXTI9_5_IRQHandler+0xc0>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<7){
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00a      	beq.n	8000670 <EXTI9_5_IRQHandler+0x70>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<7 ;
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	4b16      	ldr	r3, [pc, #88]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000668:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[7]();
 800066a:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <EXTI9_5_IRQHandler+0xc0>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<8){
 8000670:	4b12      	ldr	r3, [pc, #72]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800067a:	2b00      	cmp	r3, #0
 800067c:	d00a      	beq.n	8000694 <EXTI9_5_IRQHandler+0x94>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<8 ;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	695a      	ldr	r2, [r3, #20]
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800068c:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[8]();
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <EXTI9_5_IRQHandler+0xc0>)
 8000690:	6a1b      	ldr	r3, [r3, #32]
 8000692:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<9){
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d00a      	beq.n	80006b8 <EXTI9_5_IRQHandler+0xb8>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<9 ;
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <EXTI9_5_IRQHandler+0xbc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006b0:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[9]();
 80006b2:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <EXTI9_5_IRQHandler+0xc0>)
 80006b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006b6:	4798      	blx	r3
	}
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000010 	.word	0x20000010
 80006c0:	2000003c 	.word	0x2000003c

080006c4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10){
 80006c8:	4b36      	ldr	r3, [pc, #216]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00a      	beq.n	80006ec <EXTI15_10_IRQHandler+0x28>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<10 ;
 80006d6:	4b33      	ldr	r3, [pc, #204]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	695a      	ldr	r2, [r3, #20]
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006e4:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[10]();
 80006e6:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <EXTI15_10_IRQHandler+0xe4>)
 80006e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006ea:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<11){
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d00a      	beq.n	8000710 <EXTI15_10_IRQHandler+0x4c>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<11 ;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	695a      	ldr	r2, [r3, #20]
 8000700:	4b28      	ldr	r3, [pc, #160]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000708:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[11]();
 800070a:	4b27      	ldr	r3, [pc, #156]	; (80007a8 <EXTI15_10_IRQHandler+0xe4>)
 800070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800070e:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<12){
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00a      	beq.n	8000734 <EXTI15_10_IRQHandler+0x70>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<12 ;
 800071e:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	695a      	ldr	r2, [r3, #20]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800072c:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[12]();
 800072e:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <EXTI15_10_IRQHandler+0xe4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<13){
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00a      	beq.n	8000758 <EXTI15_10_IRQHandler+0x94>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<13 ;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000750:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[13]();
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <EXTI15_10_IRQHandler+0xe4>)
 8000754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000756:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<14){
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <EXTI15_10_IRQHandler+0xb8>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<14 ;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	695a      	ldr	r2, [r3, #20]
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000774:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[14]();
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <EXTI15_10_IRQHandler+0xe4>)
 8000778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077a:	4798      	blx	r3
	}
	if (EXTI->PR & 1<<15){
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000786:	2b00      	cmp	r3, #0
 8000788:	d00a      	beq.n	80007a0 <EXTI15_10_IRQHandler+0xdc>
		//Clear EXTI Pending Register by writing 1 to clear
		EXTI -> PR |= 1<<15 ;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	695a      	ldr	r2, [r3, #20]
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <EXTI15_10_IRQHandler+0xe0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000798:	615a      	str	r2, [r3, #20]
		//Call IRQ Call back function
		GP_IRQ_Callback[15]();
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <EXTI15_10_IRQHandler+0xe4>)
 800079c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800079e:	4798      	blx	r3
	}
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000010 	.word	0x20000010
 80007a8:	2000003c 	.word	0x2000003c

080007ac <Get_CRLH_Position>:

#include "STM32F103X6_GPIO_Driver.h"

//assisted functions
uint8_t Get_CRLH_Position(uint16_t PINNumber)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	80fb      	strh	r3, [r7, #6]
	switch (PINNumber)
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007bc:	f000 80a5 	beq.w	800090a <Get_CRLH_Position+0x15e>
 80007c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007c4:	f300 80a3 	bgt.w	800090e <Get_CRLH_Position+0x162>
 80007c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007cc:	f000 809b 	beq.w	8000906 <Get_CRLH_Position+0x15a>
 80007d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007d4:	f300 809b 	bgt.w	800090e <Get_CRLH_Position+0x162>
 80007d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007dc:	f000 8091 	beq.w	8000902 <Get_CRLH_Position+0x156>
 80007e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e4:	f300 8093 	bgt.w	800090e <Get_CRLH_Position+0x162>
 80007e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007ec:	f000 8087 	beq.w	80008fe <Get_CRLH_Position+0x152>
 80007f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007f4:	f300 808b 	bgt.w	800090e <Get_CRLH_Position+0x162>
 80007f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007fc:	d07d      	beq.n	80008fa <Get_CRLH_Position+0x14e>
 80007fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000802:	f300 8084 	bgt.w	800090e <Get_CRLH_Position+0x162>
 8000806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800080a:	d074      	beq.n	80008f6 <Get_CRLH_Position+0x14a>
 800080c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000810:	dc7d      	bgt.n	800090e <Get_CRLH_Position+0x162>
 8000812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000816:	d06c      	beq.n	80008f2 <Get_CRLH_Position+0x146>
 8000818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800081c:	dc77      	bgt.n	800090e <Get_CRLH_Position+0x162>
 800081e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000822:	d064      	beq.n	80008ee <Get_CRLH_Position+0x142>
 8000824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000828:	dc71      	bgt.n	800090e <Get_CRLH_Position+0x162>
 800082a:	2b80      	cmp	r3, #128	; 0x80
 800082c:	d05d      	beq.n	80008ea <Get_CRLH_Position+0x13e>
 800082e:	2b80      	cmp	r3, #128	; 0x80
 8000830:	dc6d      	bgt.n	800090e <Get_CRLH_Position+0x162>
 8000832:	2b20      	cmp	r3, #32
 8000834:	dc48      	bgt.n	80008c8 <Get_CRLH_Position+0x11c>
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd69      	ble.n	800090e <Get_CRLH_Position+0x162>
 800083a:	3b01      	subs	r3, #1
 800083c:	2b1f      	cmp	r3, #31
 800083e:	d866      	bhi.n	800090e <Get_CRLH_Position+0x162>
 8000840:	a201      	add	r2, pc, #4	; (adr r2, 8000848 <Get_CRLH_Position+0x9c>)
 8000842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000846:	bf00      	nop
 8000848:	080008cf 	.word	0x080008cf
 800084c:	080008d3 	.word	0x080008d3
 8000850:	0800090f 	.word	0x0800090f
 8000854:	080008d7 	.word	0x080008d7
 8000858:	0800090f 	.word	0x0800090f
 800085c:	0800090f 	.word	0x0800090f
 8000860:	0800090f 	.word	0x0800090f
 8000864:	080008db 	.word	0x080008db
 8000868:	0800090f 	.word	0x0800090f
 800086c:	0800090f 	.word	0x0800090f
 8000870:	0800090f 	.word	0x0800090f
 8000874:	0800090f 	.word	0x0800090f
 8000878:	0800090f 	.word	0x0800090f
 800087c:	0800090f 	.word	0x0800090f
 8000880:	0800090f 	.word	0x0800090f
 8000884:	080008df 	.word	0x080008df
 8000888:	0800090f 	.word	0x0800090f
 800088c:	0800090f 	.word	0x0800090f
 8000890:	0800090f 	.word	0x0800090f
 8000894:	0800090f 	.word	0x0800090f
 8000898:	0800090f 	.word	0x0800090f
 800089c:	0800090f 	.word	0x0800090f
 80008a0:	0800090f 	.word	0x0800090f
 80008a4:	0800090f 	.word	0x0800090f
 80008a8:	0800090f 	.word	0x0800090f
 80008ac:	0800090f 	.word	0x0800090f
 80008b0:	0800090f 	.word	0x0800090f
 80008b4:	0800090f 	.word	0x0800090f
 80008b8:	0800090f 	.word	0x0800090f
 80008bc:	0800090f 	.word	0x0800090f
 80008c0:	0800090f 	.word	0x0800090f
 80008c4:	080008e3 	.word	0x080008e3
 80008c8:	2b40      	cmp	r3, #64	; 0x40
 80008ca:	d00c      	beq.n	80008e6 <Get_CRLH_Position+0x13a>
 80008cc:	e01f      	b.n	800090e <Get_CRLH_Position+0x162>
	{
	//CRL
	case GPIO_PIN0:
		return 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e01e      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN1:
		return 4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	e01c      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN2:
		return 8;
 80008d6:	2308      	movs	r3, #8
 80008d8:	e01a      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN3:
		return 12;
 80008da:	230c      	movs	r3, #12
 80008dc:	e018      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN4:
		return 16;
 80008de:	2310      	movs	r3, #16
 80008e0:	e016      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN5:
		return 20;
 80008e2:	2314      	movs	r3, #20
 80008e4:	e014      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN6:
		return 24;
 80008e6:	2318      	movs	r3, #24
 80008e8:	e012      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN7:
		return 28;
 80008ea:	231c      	movs	r3, #28
 80008ec:	e010      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;

	//CRH
	case GPIO_PIN8:
		return 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e00e      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN9:
		return 4;
 80008f2:	2304      	movs	r3, #4
 80008f4:	e00c      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN10:
		return 8;
 80008f6:	2308      	movs	r3, #8
 80008f8:	e00a      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN11:
		return 12;
 80008fa:	230c      	movs	r3, #12
 80008fc:	e008      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN12:
		return 16;
 80008fe:	2310      	movs	r3, #16
 8000900:	e006      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN13:
		return 20;
 8000902:	2314      	movs	r3, #20
 8000904:	e004      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN14:
		return 24;
 8000906:	2318      	movs	r3, #24
 8000908:	e002      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN15:
		return 28;
 800090a:	231c      	movs	r3, #28
 800090c:	e000      	b.n	8000910 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 800090e:	2300      	movs	r3, #0
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	bc80      	pop	{r7}
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <MCAL_GPIO_init>:
 * 				 the configuration info for specified GPIO
* @retval -
* Note			-STM32F103C6 MCU has GPIO A,B,C,D,E ports
 * 				 but LQFP48 Package has A,B ,Part of C&D
*/
void  MCAL_GPIO_init (GPIO_TypeDef* GPIOx ,GPIO_PinConfig_t* PINConfig){
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b085      	sub	sp, #20
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]

	volatile uint32_t *Config_Reg = NULL;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
	uint8_t PIN = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	73fb      	strb	r3, [r7, #15]

	//Port configuration register low (GPIOx_CRL) configure pins 0 -> 7
	//Port configuration register high (GPIOx_CRH)  configure pins 8 -> 15
	Config_Reg = (PINConfig->GPIO_PINNumber < GPIO_PIN8 )? &GPIOx->CRL : &GPIOx->CRH ;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	881b      	ldrh	r3, [r3, #0]
 8000932:	2bff      	cmp	r3, #255	; 0xff
 8000934:	d801      	bhi.n	800093a <MCAL_GPIO_init+0x1e>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	e001      	b.n	800093e <MCAL_GPIO_init+0x22>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3304      	adds	r3, #4
 800093e:	60bb      	str	r3, [r7, #8]

	//clear CNF[1:0] & MODE[1:0]
	(*Config_Reg) &= ~(0x0F << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff ff31 	bl	80007ac <Get_CRLH_Position>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	230f      	movs	r3, #15
 8000950:	4093      	lsls	r3, r2
 8000952:	43da      	mvns	r2, r3
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	401a      	ands	r2, r3
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	601a      	str	r2, [r3, #0]
	// GPIO PIN mode is output
	if ((PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_AF_OUT_PP) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_OD) || (PINConfig->GPIO_Mode == GPIO_Mode_OUT_PP))
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	789b      	ldrb	r3, [r3, #2]
 8000962:	2b07      	cmp	r3, #7
 8000964:	d00b      	beq.n	800097e <MCAL_GPIO_init+0x62>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	789b      	ldrb	r3, [r3, #2]
 800096a:	2b06      	cmp	r3, #6
 800096c:	d007      	beq.n	800097e <MCAL_GPIO_init+0x62>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	2b05      	cmp	r3, #5
 8000974:	d003      	beq.n	800097e <MCAL_GPIO_init+0x62>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b04      	cmp	r3, #4
 800097c:	d10e      	bne.n	800099c <MCAL_GPIO_init+0x80>
	{
		PIN = (((PINConfig -> GPIO_Mode - 4 )<< 2 ) | (PINConfig -> GPIO_Speed )) & 0x0F;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	789b      	ldrb	r3, [r3, #2]
 8000982:	3b04      	subs	r3, #4
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	b25a      	sxtb	r2, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	78db      	ldrb	r3, [r3, #3]
 800098c:	b25b      	sxtb	r3, r3
 800098e:	4313      	orrs	r3, r2
 8000990:	b25b      	sxtb	r3, r3
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f003 030f 	and.w	r3, r3, #15
 8000998:	73fb      	strb	r3, [r7, #15]
 800099a:	e02a      	b.n	80009f2 <MCAL_GPIO_init+0xd6>
	}

	else {
		//GPIO PIN Mode is input / Analog
		if ((PINConfig->GPIO_Mode == GPIO_Mode_IN_Float) ||  (PINConfig->GPIO_Mode == GPIO_Mode_Analog))
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	789b      	ldrb	r3, [r3, #2]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d003      	beq.n	80009ac <MCAL_GPIO_init+0x90>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	789b      	ldrb	r3, [r3, #2]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d107      	bne.n	80009bc <MCAL_GPIO_init+0xa0>
			{
				PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	789b      	ldrb	r3, [r3, #2]
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	f003 030f 	and.w	r3, r3, #15
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e01a      	b.n	80009f2 <MCAL_GPIO_init+0xd6>
			}
		else{
			PIN = ((PINConfig -> GPIO_Mode << 2 ) &0x0F) ;
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 030f 	and.w	r3, r3, #15
 80009c8:	73fb      	strb	r3, [r7, #15]

			if (PINConfig -> GPIO_Mode == GPIO_Mode_IN_PU ){
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	789b      	ldrb	r3, [r3, #2]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	d107      	bne.n	80009e2 <MCAL_GPIO_init+0xc6>
				//ODR = 1 INPUT Pull Up
				GPIOx -> ODR |= PINConfig -> GPIO_PINNumber;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	8812      	ldrh	r2, [r2, #0]
 80009da:	431a      	orrs	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	e007      	b.n	80009f2 <MCAL_GPIO_init+0xd6>
			}
			else{
				//ODR = 0 INPUT Pull Down
				GPIOx -> ODR &= ~(PINConfig -> GPIO_PINNumber);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	68db      	ldr	r3, [r3, #12]
 80009e6:	683a      	ldr	r2, [r7, #0]
 80009e8:	8812      	ldrh	r2, [r2, #0]
 80009ea:	43d2      	mvns	r2, r2
 80009ec:	401a      	ands	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60da      	str	r2, [r3, #12]
			}

		}
	}
	//write on CRL or CRH
	(*Config_Reg) |= (PIN << Get_CRLH_Position(PINConfig->GPIO_PINNumber));
 80009f2:	7bfc      	ldrb	r4, [r7, #15]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fed7 	bl	80007ac <Get_CRLH_Position>
 80009fe:	4603      	mov	r3, r0
 8000a00:	fa04 f203 	lsl.w	r2, r4, r3
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	601a      	str	r2, [r3, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd90      	pop	{r4, r7, pc}

08000a16 <MCAL_GPIO_WritePIN>:
 * @param [in]	-PinNumber : Specific Pin number to be Write on according to @ref GPIO_PINS_Define
 * @param [in]	-Value : PIN value
 * @retval 		-None
 * Note 		-None
 */
void MCAL_GPIO_WritePIN (GPIO_TypeDef* GPIOx ,uint16_t PIN_Number,uint8_t value ){
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	807b      	strh	r3, [r7, #2]
 8000a22:	4613      	mov	r3, r2
 8000a24:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_SET )
 8000a26:	787b      	ldrb	r3, [r7, #1]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d003      	beq.n	8000a34 <MCAL_GPIO_WritePIN+0x1e>
		{
		//Port bit set/reset register (GPIOx_BSRR)
		//BRy: Port x Reset bit y (y= 0 ... 15)
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOx -> BRR = (uint32_t) PIN_Number ;
 8000a2c:	887a      	ldrh	r2, [r7, #2]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	615a      	str	r2, [r3, #20]
		// Port bit set/reset register (GPIOx_BSRR)
		// BSy: Port x Reset bit y (y= 0 ... 15)
		// 0: No action on the corresponding ODRx bit
		// 1: Set the corresponding ODRx bit
		GPIOx -> BSRR = (uint32_t) PIN_Number ;
}
 8000a32:	e002      	b.n	8000a3a <MCAL_GPIO_WritePIN+0x24>
		GPIOx -> BSRR = (uint32_t) PIN_Number ;
 8000a34:	887a      	ldrh	r2, [r7, #2]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	611a      	str	r2, [r3, #16]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <MCAL_GPIO_WritePort>:
 * @param [in]	-Value : PORT value
 * @retval 		-None
 * Note 		-None
 */

void MCAL_GPIO_WritePort (GPIO_TypeDef* GPIOx, uint8_t value ){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70fb      	strb	r3, [r7, #3]

	GPIOx->ODR = (uint32_t) value;
 8000a50:	78fa      	ldrb	r2, [r7, #3]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60da      	str	r2, [r3, #12]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <LCD_clear_screen>:
 *  Author: Marco
 */ 

#include "lcd.h"

void LCD_clear_screen(){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 f9a9 	bl	8000dbc <LCD_WRITE_COMMAND>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <LCD_lcd_kick>:

void LCD_lcd_kick(){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePIN(LCD_CTRL, EN_SWITCH,GPIO_PIN_SET);
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <LCD_lcd_kick+0x30>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ffc9 	bl	8000a16 <MCAL_GPIO_WritePIN>
	WAIT_ms(50);
 8000a84:	2032      	movs	r0, #50	; 0x32
 8000a86:	f000 fa8b 	bl	8000fa0 <WAIT_ms>
	MCAL_GPIO_WritePIN(LCD_CTRL, EN_SWITCH,GPIO_PIN_RESET);
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <LCD_lcd_kick+0x30>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff ffbe 	bl	8000a16 <MCAL_GPIO_WritePIN>
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000000 	.word	0x20000000

08000aa4 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position){
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	460a      	mov	r2, r1
 8000aae:	71fb      	strb	r3, [r7, #7]
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d108      	bne.n	8000acc <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	2b0f      	cmp	r3, #15
 8000abe:	d805      	bhi.n	8000acc <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	3b80      	subs	r3, #128	; 0x80
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 f978 	bl	8000dbc <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d108      	bne.n	8000ae4 <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000ad2:	79bb      	ldrb	r3, [r7, #6]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d805      	bhi.n	8000ae4 <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	3b40      	subs	r3, #64	; 0x40
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f96c 	bl	8000dbc <LCD_WRITE_COMMAND>
		}
	}
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LCD_GPIO_INIT>:
void LCD_GPIO_INIT(){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

	/*MODE&CNF :make GPIOA (EN_SWITCH,RW_SWITCH,RS_SWITCH) pins
	 	 as floating input(reset state)
	 */
	lcd_pinconfig.GPIO_PINNumber = EN_SWITCH;
 8000af0:	4b60      	ldr	r3, [pc, #384]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af6:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000af8:	4b5e      	ldr	r3, [pc, #376]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000afe:	4b5d      	ldr	r3, [pc, #372]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init(LCD_CTRL,&lcd_pinconfig);
 8000b04:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	495a      	ldr	r1, [pc, #360]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff06 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = RS_SWITCH;
 8000b10:	4b58      	ldr	r3, [pc, #352]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b16:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000b18:	4b56      	ldr	r3, [pc, #344]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b1a:	2204      	movs	r2, #4
 8000b1c:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000b1e:	4b55      	ldr	r3, [pc, #340]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_CTRL,&lcd_pinconfig);
 8000b24:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4952      	ldr	r1, [pc, #328]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fef6 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = RW_SWITCH;
 8000b30:	4b50      	ldr	r3, [pc, #320]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b36:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000b38:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b3a:	2204      	movs	r2, #4
 8000b3c:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000b3e:	4b4d      	ldr	r3, [pc, #308]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_CTRL,&lcd_pinconfig);
 8000b44:	4b4c      	ldr	r3, [pc, #304]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	494a      	ldr	r1, [pc, #296]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fee6 	bl	800091c <MCAL_GPIO_init>

	/************************************************************/

	//MODE&CNF: init GPIOA PIN(0-7) as as push-pull outputs with 10MHZ speed
	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN0;
 8000b50:	4b48      	ldr	r3, [pc, #288]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000b5c:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000b62:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4943      	ldr	r1, [pc, #268]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fed7 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN1;
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000b74:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000b80:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	493b      	ldr	r1, [pc, #236]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fec8 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN2;
 8000b8c:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000b92:	4b38      	ldr	r3, [pc, #224]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b94:	2204      	movs	r2, #4
 8000b96:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000b98:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4934      	ldr	r1, [pc, #208]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff feb9 	bl	800091c <MCAL_GPIO_init>


	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN3;
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bac:	2208      	movs	r2, #8
 8000bae:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000bb0:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	492c      	ldr	r1, [pc, #176]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff feaa 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN4;
 8000bc8:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bca:	2210      	movs	r2, #16
 8000bcc:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000bd4:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4925      	ldr	r1, [pc, #148]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fe9b 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN5;
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000be8:	2220      	movs	r2, #32
 8000bea:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (GPIOA,&lcd_pinconfig);
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	491d      	ldr	r1, [pc, #116]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fe8c 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN6;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c06:	2240      	movs	r2, #64	; 0x40
 8000c08:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4916      	ldr	r1, [pc, #88]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fe7d 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN7;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c2a:	2204      	movs	r2, #4
 8000c2c:	709a      	strb	r2, [r3, #2]
	lcd_pinconfig.GPIO_Speed = GPIO_Speed_10MHZ;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000c34:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	490e      	ldr	r1, [pc, #56]	; (8000c74 <LCD_GPIO_INIT+0x188>)
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff fe6e 	bl	800091c <MCAL_GPIO_init>

	MCAL_GPIO_WritePIN(LCD_CTRL ,EN_SWITCH,GPIO_PIN_RESET);
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fee3 	bl	8000a16 <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL ,RS_SWITCH,GPIO_PIN_RESET);
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2200      	movs	r2, #0
 8000c56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fedb 	bl	8000a16 <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL ,RW_SWITCH,GPIO_PIN_RESET);
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <LCD_GPIO_INIT+0x18c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fed3 	bl	8000a16 <MCAL_GPIO_WritePIN>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000078 	.word	0x20000078
 8000c78:	20000000 	.word	0x20000000

08000c7c <LCD_INIT>:

void LCD_INIT(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

	WAIT_ms(20);
 8000c80:	2014      	movs	r0, #20
 8000c82:	f000 f98d 	bl	8000fa0 <WAIT_ms>
	LCD_GPIO_INIT();
 8000c86:	f7ff ff31 	bl	8000aec <LCD_GPIO_INIT>
	WAIT_ms(15);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f988 	bl	8000fa0 <WAIT_ms>
	LCD_clear_screen();
 8000c90:	f7ff fee6 	bl	8000a60 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f000 f891 	bl	8000dbc <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	WAIT_ms(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f000 f980 	bl	8000fa0 <WAIT_ms>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000ca0:	2006      	movs	r0, #6
 8000ca2:	f000 f88b 	bl	8000dbc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000ca6:	2080      	movs	r0, #128	; 0x80
 8000ca8:	f000 f888 	bl	8000dbc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 8000cac:	200f      	movs	r0, #15
 8000cae:	f000 f885 	bl	8000dbc <LCD_WRITE_COMMAND>
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <LCD_check_lcd_isbusy>:

void LCD_check_lcd_isbusy(){
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0


	//MODE&CNF: make GPIOA PIN(0-7) as as floating input(reset state)
	//make sure that there is no output on LCD
	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN0;
 8000cbc:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000cc2:	4b3c      	ldr	r3, [pc, #240]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000cc8:	4b3b      	ldr	r3, [pc, #236]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4939      	ldr	r1, [pc, #228]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fe24 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN1;
 8000cd4:	4b37      	ldr	r3, [pc, #220]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000cda:	4b36      	ldr	r3, [pc, #216]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000ce0:	4b35      	ldr	r3, [pc, #212]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4933      	ldr	r1, [pc, #204]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe18 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN2;
 8000cec:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cee:	2204      	movs	r2, #4
 8000cf0:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000cf2:	4b30      	ldr	r3, [pc, #192]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000cf8:	4b2f      	ldr	r3, [pc, #188]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	492d      	ldr	r1, [pc, #180]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fe0c 	bl	800091c <MCAL_GPIO_init>


	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN3;
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d06:	2208      	movs	r2, #8
 8000d08:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4927      	ldr	r1, [pc, #156]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fe00 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN4;
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d1e:	2210      	movs	r2, #16
 8000d20:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000d28:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4921      	ldr	r1, [pc, #132]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fdf4 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN5;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d36:	2220      	movs	r2, #32
 8000d38:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	491b      	ldr	r1, [pc, #108]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d46:	4618      	mov	r0, r3
 8000d48:	f7ff fde8 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN6;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d4e:	2240      	movs	r2, #64	; 0x40
 8000d50:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4915      	ldr	r1, [pc, #84]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fddc 	bl	800091c <MCAL_GPIO_init>

	lcd_pinconfig.GPIO_PINNumber = GPIO_PIN7;
 8000d64:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d66:	2280      	movs	r2, #128	; 0x80
 8000d68:	801a      	strh	r2, [r3, #0]
	lcd_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_init (LCD_PORT,&lcd_pinconfig);
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	490f      	ldr	r1, [pc, #60]	; (8000db4 <LCD_check_lcd_isbusy+0xfc>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdd0 	bl	800091c <MCAL_GPIO_init>

	MCAL_GPIO_WritePIN(LCD_CTRL ,RW_SWITCH,GPIO_PIN_SET);
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff fe45 	bl	8000a16 <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL ,RS_SWITCH,GPIO_PIN_RESET);
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff fe3d 	bl	8000a16 <MCAL_GPIO_WritePIN>
	LCD_lcd_kick();
 8000d9c:	f7ff fe68 	bl	8000a70 <LCD_lcd_kick>
	MCAL_GPIO_WritePIN(LCD_CTRL ,RW_SWITCH,GPIO_PIN_RESET);
 8000da0:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <LCD_check_lcd_isbusy+0x100>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fe33 	bl	8000a16 <MCAL_GPIO_WritePIN>
	
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000078 	.word	0x20000078
 8000db8:	20000000 	.word	0x20000000

08000dbc <LCD_WRITE_COMMAND>:


void LCD_WRITE_COMMAND(unsigned char command){
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 8000dc6:	f7ff ff77 	bl	8000cb8 <LCD_check_lcd_isbusy>
		MCAL_GPIO_WritePort(LCD_PORT ,command);
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <LCD_WRITE_COMMAND+0x50>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fe36 	bl	8000a44 <MCAL_GPIO_WritePort>
		MCAL_GPIO_WritePIN(LCD_CTRL ,RW_SWITCH,GPIO_PIN_RESET);
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <LCD_WRITE_COMMAND+0x50>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fe17 	bl	8000a16 <MCAL_GPIO_WritePIN>
		MCAL_GPIO_WritePIN(LCD_CTRL ,RS_SWITCH,GPIO_PIN_RESET);
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <LCD_WRITE_COMMAND+0x50>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fe0f 	bl	8000a16 <MCAL_GPIO_WritePIN>
		WAIT_ms(1);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f000 f8d1 	bl	8000fa0 <WAIT_ms>
		LCD_lcd_kick();
 8000dfe:	f7ff fe37 	bl	8000a70 <LCD_lcd_kick>
//		LCD_lcd_kick ();
//		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
//		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
//		LCD_lcd_kick();
//	#endif
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000

08000e10 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	LCD_check_lcd_isbusy();
 8000e1a:	f7ff ff4d 	bl	8000cb8 <LCD_check_lcd_isbusy>
	MCAL_GPIO_WritePort(LCD_PORT ,character);
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <LCD_WRITE_CHAR+0x50>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff fe0c 	bl	8000a44 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePIN(LCD_CTRL ,RW_SWITCH,GPIO_PIN_RESET);
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <LCD_WRITE_CHAR+0x50>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fded 	bl	8000a16 <MCAL_GPIO_WritePIN>
	MCAL_GPIO_WritePIN(LCD_CTRL ,RS_SWITCH,GPIO_PIN_SET);
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <LCD_WRITE_CHAR+0x50>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fde5 	bl	8000a16 <MCAL_GPIO_WritePIN>
	WAIT_ms(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 f8a7 	bl	8000fa0 <WAIT_ms>
	LCD_lcd_kick();	
 8000e52:	f7ff fe0d 	bl	8000a70 <LCD_lcd_kick>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000000 	.word	0x20000000

08000e64 <LCD_WRITE_STRING>:


void LCD_WRITE_STRING(char* string){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	int count = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000e70:	e01c      	b.n	8000eac <LCD_WRITE_STRING+0x48>
		count++;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3301      	adds	r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffc5 	bl	8000e10 <LCD_WRITE_CHAR>
		if (count == 16)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	2b10      	cmp	r3, #16
 8000e8a:	d104      	bne.n	8000e96 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f7ff fe08 	bl	8000aa4 <LCD_GOTO_XY>
 8000e94:	e00a      	b.n	8000eac <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	2b20      	cmp	r3, #32
 8000e9a:	d107      	bne.n	8000eac <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 8000e9c:	f7ff fde0 	bl	8000a60 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fdfe 	bl	8000aa4 <LCD_GOTO_XY>
			count = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
	while (*string > 0){
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1de      	bne.n	8000e72 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <Keypad_init>:
#include "keypad.h"

int Key_padRow[] = {R0, R1, R2, R3}; //rows of the keypad
int Key_padCol[] = {C0, C1, C2, C3};//columns

void Keypad_init(){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t keypad_pinconfig;

	//MODE: init GPIOB R0 pin as input(reset state)
	//CNF: make PORTB pin R0 as floating input
	keypad_pinconfig.GPIO_PINNumber = R0;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <Keypad_init+0xdc>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1d3a      	adds	r2, r7, #4
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff fd20 	bl	800091c <MCAL_GPIO_init>

	//MODE: init GPIOB R1 pin as input(reset state)
	//CNF: make PORTB pin R1 as floating input
	keypad_pinconfig.GPIO_PINNumber = R1;
 8000edc:	2302      	movs	r3, #2
 8000ede:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <Keypad_init+0xdc>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	1d3a      	adds	r2, r7, #4
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fd15 	bl	800091c <MCAL_GPIO_init>

	//MODE: init GPIOB R2 pin as input(reset state)
	//CNF: make PORTB pin R2 as floating input
	keypad_pinconfig.GPIO_PINNumber = R2;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000efa:	4b28      	ldr	r3, [pc, #160]	; (8000f9c <Keypad_init+0xdc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1d3a      	adds	r2, r7, #4
 8000f00:	4611      	mov	r1, r2
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd0a 	bl	800091c <MCAL_GPIO_init>

	//MODE: init GPIOB R3 pin as input(reset state)
	//CNF: make PORTB pin R3 as floating input
	keypad_pinconfig.GPIO_PINNumber = R3;
 8000f08:	2310      	movs	r3, #16
 8000f0a:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_IN_Float;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <Keypad_init+0xdc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1d3a      	adds	r2, r7, #4
 8000f16:	4611      	mov	r1, r2
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fcff 	bl	800091c <MCAL_GPIO_init>

	/************************************************************/

	//MODE: init GPIOB C0 pin as output with max speed = 50MHZ
	//CNF: make PORTB pin C0 as push-pull output
	keypad_pinconfig.GPIO_PINNumber = C0;
 8000f1e:	2320      	movs	r3, #32
 8000f20:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000f22:	2304      	movs	r3, #4
 8000f24:	71bb      	strb	r3, [r7, #6]
	keypad_pinconfig.GPIO_Speed = GPIO_Speed_50MHZ;
 8000f26:	2303      	movs	r3, #3
 8000f28:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <Keypad_init+0xdc>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	1d3a      	adds	r2, r7, #4
 8000f30:	4611      	mov	r1, r2
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fcf2 	bl	800091c <MCAL_GPIO_init>

	//MODE: init GPIOB C1 pin as output with max speed = 50MHZ
	//CNF: make PORTB pin C1 as push-pull output
	keypad_pinconfig.GPIO_PINNumber = C1;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	71bb      	strb	r3, [r7, #6]
	keypad_pinconfig.GPIO_Speed = GPIO_Speed_50MHZ;
 8000f40:	2303      	movs	r3, #3
 8000f42:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <Keypad_init+0xdc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1d3a      	adds	r2, r7, #4
 8000f4a:	4611      	mov	r1, r2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fce5 	bl	800091c <MCAL_GPIO_init>

	//MODE: init GPIOB C2 pin as output with max speed = 50MHZ
	//CNF: make PORTB pin C2 as push-pull output
	keypad_pinconfig.GPIO_PINNumber = C2;
 8000f52:	2380      	movs	r3, #128	; 0x80
 8000f54:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000f56:	2304      	movs	r3, #4
 8000f58:	71bb      	strb	r3, [r7, #6]
	keypad_pinconfig.GPIO_Speed = GPIO_Speed_50MHZ;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <Keypad_init+0xdc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1d3a      	adds	r2, r7, #4
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fcd8 	bl	800091c <MCAL_GPIO_init>

	//MODE: init GPIOB C3 pin as output with max speed = 50MHZ
	//CNF: make PORTB pin C3 as push-pull output
	keypad_pinconfig.GPIO_PINNumber = C3;
 8000f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f70:	80bb      	strh	r3, [r7, #4]
	keypad_pinconfig.GPIO_Mode = GPIO_Mode_OUT_PP;
 8000f72:	2304      	movs	r3, #4
 8000f74:	71bb      	strb	r3, [r7, #6]
	keypad_pinconfig.GPIO_Speed = GPIO_Speed_50MHZ;
 8000f76:	2303      	movs	r3, #3
 8000f78:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_init (GPIOB,&keypad_pinconfig);
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <Keypad_init+0xdc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	1d3a      	adds	r2, r7, #4
 8000f80:	4611      	mov	r1, r2
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fcca 	bl	800091c <MCAL_GPIO_init>

	MCAL_GPIO_WritePort(KEYPAD_PORT ,(0x3F<<2));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <Keypad_init+0xdc>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	21fc      	movs	r1, #252	; 0xfc
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fd58 	bl	8000a44 <MCAL_GPIO_WritePort>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000004 	.word	0x20000004

08000fa0 <WAIT_ms>:
#include "LCD.c"
#include "Keypad.c"

uint8_t IRQ_Flag;
//Generic Functions
void WAIT_ms(uint32_t t){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<t;i++){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e00b      	b.n	8000fc6 <WAIT_ms+0x26>
		for(j=0;j<255;j++);
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	e002      	b.n	8000fba <WAIT_ms+0x1a>
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2bfe      	cmp	r3, #254	; 0xfe
 8000fbe:	d9f9      	bls.n	8000fb4 <WAIT_ms+0x14>
	for(i=0;i<t;i++){
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d3ef      	bcc.n	8000fae <WAIT_ms+0xe>
	}
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
	...

08000fdc <clock_init>:

void clock_init(){
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
	//Enable ABP2 clock register
	//Enable IO port A clock
	 RCC_GPIOA_CLOCK_EN();
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <clock_init+0x3c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <clock_init+0x3c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f042 0204 	orr.w	r2, r2, #4
 8000fee:	619a      	str	r2, [r3, #24]

	//Enable IO port B clock
	 RCC_GPIOB_CLOCK_EN();
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <clock_init+0x3c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	699a      	ldr	r2, [r3, #24]
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <clock_init+0x3c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f042 0208 	orr.w	r2, r2, #8
 8000ffe:	619a      	str	r2, [r3, #24]
	//Enable Alternative IO port clock
	 RCC_AFIO_CLOCK_EN();
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <clock_init+0x3c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <clock_init+0x3c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	619a      	str	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000018 	.word	0x20000018

0800101c <IRQ9_CallBack>:
void IRQ9_CallBack(void){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	LCD_clear_screen();
 8001020:	f7ff fd1e 	bl	8000a60 <LCD_clear_screen>
	IRQ_Flag = 1;
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <IRQ9_CallBack+0x20>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("Attention!! EXTI9 happened ");
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <IRQ9_CallBack+0x24>)
 800102c:	f7ff ff1a 	bl	8000e64 <LCD_WRITE_STRING>
	WAIT_ms(1000);
 8001030:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001034:	f7ff ffb4 	bl	8000fa0 <WAIT_ms>

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000038 	.word	0x20000038
 8001040:	08001160 	.word	0x08001160

08001044 <main>:


int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
	clock_init();
 800104a:	f7ff ffc7 	bl	8000fdc <clock_init>
	LCD_INIT();
 800104e:	f7ff fe15 	bl	8000c7c <LCD_INIT>
	Keypad_init();
 8001052:	f7ff ff35 	bl	8000ec0 <Keypad_init>
	WAIT_ms(50);
 8001056:	2032      	movs	r0, #50	; 0x32
 8001058:	f7ff ffa2 	bl	8000fa0 <WAIT_ms>
	//Configure an External interrupt request of line 9 on PORT B pin 9
	EXTI_pinConfig_t EXTI_Config;
	EXTI_Config.EXTI_Pin = EXTI9PB9 ;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <main+0x5c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2209      	movs	r2, #9
 8001062:	81ba      	strh	r2, [r7, #12]
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	f44f 7300 	mov.w	r3, #512	; 0x200
 800106a:	82bb      	strh	r3, [r7, #20]
 800106c:	2317      	movs	r3, #23
 800106e:	75bb      	strb	r3, [r7, #22]
	EXTI_Config.Trigger_state = EXTI_Trigger_RISING;
 8001070:	2300      	movs	r3, #0
 8001072:	763b      	strb	r3, [r7, #24]
	EXTI_Config.P_IRQ_CallBack = IRQ9_CallBack;
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <main+0x60>)
 8001076:	61fb      	str	r3, [r7, #28]
	EXTI_Config.IRQ_EN = EXTI_IRQ_ENABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	767b      	strb	r3, [r7, #25]
	MCAL_EXTI_init(&EXTI_Config);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa4d 	bl	8000520 <MCAL_EXTI_init>

	IRQ_Flag = 1;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <main+0x64>)
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
    /* Loop forever */
	while(1){
		if (IRQ_Flag){
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <main+0x64>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0fb      	beq.n	800108c <main+0x48>
			LCD_clear_screen();
 8001094:	f7ff fce4 	bl	8000a60 <LCD_clear_screen>
			IRQ_Flag = 0;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <main+0x64>)
 800109a:	2200      	movs	r2, #0
 800109c:	701a      	strb	r2, [r3, #0]
		if (IRQ_Flag){
 800109e:	e7f5      	b.n	800108c <main+0x48>
 80010a0:	20000004 	.word	0x20000004
 80010a4:	0800101d 	.word	0x0800101d
 80010a8:	20000038 	.word	0x20000038

080010ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	; (80010e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	; (80010ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	; (80010f8 <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010da:	f000 f811 	bl	8001100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010de:	f7ff ffb1 	bl	8001044 <main>

080010e2 <LoopForever>:

LoopForever:
    b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   r0, =_estack
 80010e4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80010f0:	08001184 	.word	0x08001184
  ldr r2, =_sbss
 80010f4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80010f8:	2000007c 	.word	0x2000007c

080010fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC1_2_IRQHandler>
	...

08001100 <__libc_init_array>:
 8001100:	b570      	push	{r4, r5, r6, lr}
 8001102:	2600      	movs	r6, #0
 8001104:	4d0c      	ldr	r5, [pc, #48]	; (8001138 <__libc_init_array+0x38>)
 8001106:	4c0d      	ldr	r4, [pc, #52]	; (800113c <__libc_init_array+0x3c>)
 8001108:	1b64      	subs	r4, r4, r5
 800110a:	10a4      	asrs	r4, r4, #2
 800110c:	42a6      	cmp	r6, r4
 800110e:	d109      	bne.n	8001124 <__libc_init_array+0x24>
 8001110:	f000 f81a 	bl	8001148 <_init>
 8001114:	2600      	movs	r6, #0
 8001116:	4d0a      	ldr	r5, [pc, #40]	; (8001140 <__libc_init_array+0x40>)
 8001118:	4c0a      	ldr	r4, [pc, #40]	; (8001144 <__libc_init_array+0x44>)
 800111a:	1b64      	subs	r4, r4, r5
 800111c:	10a4      	asrs	r4, r4, #2
 800111e:	42a6      	cmp	r6, r4
 8001120:	d105      	bne.n	800112e <__libc_init_array+0x2e>
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	f855 3b04 	ldr.w	r3, [r5], #4
 8001128:	4798      	blx	r3
 800112a:	3601      	adds	r6, #1
 800112c:	e7ee      	b.n	800110c <__libc_init_array+0xc>
 800112e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001132:	4798      	blx	r3
 8001134:	3601      	adds	r6, #1
 8001136:	e7f2      	b.n	800111e <__libc_init_array+0x1e>
 8001138:	0800117c 	.word	0x0800117c
 800113c:	0800117c 	.word	0x0800117c
 8001140:	0800117c 	.word	0x0800117c
 8001144:	08001180 	.word	0x08001180

08001148 <_init>:
 8001148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114a:	bf00      	nop
 800114c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114e:	bc08      	pop	{r3}
 8001150:	469e      	mov	lr, r3
 8001152:	4770      	bx	lr

08001154 <_fini>:
 8001154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001156:	bf00      	nop
 8001158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800115a:	bc08      	pop	{r3}
 800115c:	469e      	mov	lr, r3
 800115e:	4770      	bx	lr
